[
  {
    "desc": "Core Hammerspoon functionality",
    "name": "hs",
    "type": "Module"
  },
  {
    "desc": "A string containing Hammerspoon's configuration directory. Typically `~/.hammerspoon/`",
    "module": "hs",
    "name": "configdir",
    "type": "Constant"
  },
  {
    "desc": "A string containing the full path to the `docs.json` file inside Hammerspoon's app bundle. This contains the full Hammerspoon API documentation and can be accessed in the Console using `help(\"someAPI\")`. It can also be loaded and processed by the `hs.doc` extension",
    "module": "hs",
    "name": "docstrings_json_file",
    "type": "Constant"
  },
  {
    "desc": "A table containing read-only information about the Hammerspoon application instance currently running.",
    "module": "hs",
    "name": "processInfo",
    "type": "Constant"
  },
  {
    "desc": "An optional function that will be called when the Accessibility State is changed.",
    "module": "hs",
    "name": "accessibilityStateCallback",
    "type": "Variable"
  },
  {
    "desc": "Gathers tab completion options for the Console window",
    "module": "hs",
    "name": "completionsForInputString",
    "type": "Variable"
  },
  {
    "desc": "An optional function that will be called when the Hammerspoon Dock Icon is clicked while the app is running",
    "module": "hs",
    "name": "dockIconClickCallback",
    "type": "Variable"
  },
  {
    "desc": "An optional function that will be called when a files are dragged to the Hammerspoon Dock Icon or sent via the Services menu",
    "module": "hs",
    "name": "fileDroppedToDockIconCallback",
    "type": "Variable"
  },
  {
    "desc": "An optional function that will be called when the Lua environment is being destroyed (either because Hammerspoon is exiting or reloading its config)",
    "module": "hs",
    "name": "shutdownCallback",
    "type": "Variable"
  },
  {
    "desc": "An optional function that will be called when text is dragged to the Hammerspoon Dock Icon or sent via the Services menu",
    "module": "hs",
    "name": "textDroppedToDockIconCallback",
    "type": "Variable"
  },
  {
    "desc": "",
    "module": "hs",
    "name": "accessibilityState",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not external Hammerspoon AppleScript commands are allowed.",
    "module": "hs",
    "name": "allowAppleScript",
    "type": "Function"
  },
  {
    "desc": "Set or display the \"Launch on Login\" status for Hammerspoon.",
    "module": "hs",
    "name": "autoLaunch",
    "type": "Function"
  },
  {
    "desc": "Gets and optionally sets the Hammerspoon option to automatically check for updates.",
    "module": "hs",
    "name": "automaticallyCheckForUpdates",
    "type": "Function"
  },
  {
    "desc": "Returns a boolean indicating whether or not the Sparkle framework is available to check for Hammerspoon updates.",
    "module": "hs",
    "name": "canCheckForUpdates",
    "type": "Function"
  },
  {
    "desc": "Check for an update now, and if one is available, prompt the user to continue the update process.",
    "module": "hs",
    "name": "checkForUpdates",
    "type": "Function"
  },
  {
    "desc": "Returns a copy of the incoming string that can be displayed in the Hammerspoon console.  Invalid UTF8 sequences are converted to the Unicode Replacement Character and NULL (0x00) is converted to the Unicode Empty Set character.",
    "module": "hs",
    "name": "cleanUTF8forConsole",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the Hammerspoon console is always on top when visible.",
    "module": "hs",
    "name": "consoleOnTop",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the Hammerspoon dock icon is visible.",
    "module": "hs",
    "name": "dockIcon",
    "type": "Function"
  },
  {
    "desc": "Runs a shell command, optionally loading the users shell environment first, and returns stdout as a string, followed by the same result codes as `os.execute` would return.",
    "module": "hs",
    "name": "execute",
    "type": "Function"
  },
  {
    "desc": "Makes Hammerspoon the foreground app.",
    "module": "hs",
    "name": "focus",
    "type": "Function"
  },
  {
    "desc": "Fetches the Lua metatable for objects produced by an extension",
    "module": "hs",
    "name": "getObjectMetatable",
    "type": "Function"
  },
  {
    "desc": "Prints the documentation for some part of Hammerspoon's API and Lua 5.3.  This function is actually sourced from hs.doc.help.",
    "module": "hs",
    "name": "help",
    "type": "Function"
  },
  {
    "desc": "Display's Hammerspoon API documentation in a webview browser.",
    "module": "hs",
    "name": "hsdocs",
    "type": "Function"
  },
  {
    "desc": "Loads a Spoon",
    "module": "hs",
    "name": "loadSpoon",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the Hammerspoon menu icon is visible.",
    "module": "hs",
    "name": "menuIcon",
    "type": "Function"
  },
  {
    "desc": "Opens a file as if it were opened with /usr/bin/open",
    "module": "hs",
    "name": "open",
    "type": "Function"
  },
  {
    "desc": "Displays the OS X About panel for Hammerspoon; implicitly focuses Hammerspoon.",
    "module": "hs",
    "name": "openAbout",
    "type": "Function"
  },
  {
    "desc": "Opens the Hammerspoon Console window and optionally focuses it.",
    "module": "hs",
    "name": "openConsole",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the Console window will open when the Hammerspoon dock icon is clicked",
    "module": "hs",
    "name": "openConsoleOnDockClick",
    "type": "Function"
  },
  {
    "desc": "Displays the Hammerspoon Preferences panel; implicitly focuses Hammerspoon.",
    "module": "hs",
    "name": "openPreferences",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the Preferences panel should display in dark mode.",
    "module": "hs",
    "name": "preferencesDarkMode",
    "type": "Function"
  },
  {
    "desc": "Prints formatted strings to the Console",
    "module": "hs",
    "name": "printf",
    "type": "Function"
  },
  {
    "desc": "The original Lua print() function",
    "module": "hs",
    "name": "rawprint",
    "type": "Function"
  },
  {
    "desc": "Reloads your init-file in a fresh Lua environment.",
    "module": "hs",
    "name": "reload",
    "type": "Function"
  },
  {
    "desc": "Shows an error to the user, using Hammerspoon's Console",
    "module": "hs",
    "name": "showError",
    "type": "Function"
  },
  {
    "desc": "Toggles the visibility of the console",
    "module": "hs",
    "name": "toggleConsole",
    "type": "Function"
  },
  {
    "desc": "Gets the version number of an available update",
    "module": "hs",
    "name": "updateAvailable",
    "type": "Function"
  },
  {
    "desc": "Get or set the \"Upload Crash Data\" preference for Hammerspoon",
    "module": "hs",
    "name": "uploadCrashData",
    "type": "Function"
  },
  {
    "desc": "Simple on-screen alerts",
    "name": "hs.alert",
    "type": "Module"
  },
  {
    "desc": "A table defining the default visual style for the alerts generated by this module.",
    "module": "hs.alert",
    "name": "defaultStyle",
    "type": "Variable"
  },
  {
    "desc": "Closes all alerts currently open on the screen",
    "module": "hs.alert",
    "name": "closeAll",
    "type": "Function"
  },
  {
    "desc": "Closes the alert with the specified identifier",
    "module": "hs.alert",
    "name": "closeSpecific",
    "type": "Function"
  },
  {
    "desc": "Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.",
    "module": "hs.alert",
    "name": "show",
    "type": "Function"
  },
  {
    "desc": "Easily find ```hs.application``` and ```hs.window``` objects",
    "name": "hs.appfinder",
    "type": "Module"
  },
  {
    "desc": "Finds an application by its name (e.g. \"Safari\")",
    "module": "hs.appfinder",
    "name": "appFromName",
    "type": "Function"
  },
  {
    "desc": "Finds an application by its window title (e.g. \"Activity Monitor (All Processes)\")",
    "module": "hs.appfinder",
    "name": "appFromWindowTitle",
    "type": "Function"
  },
  {
    "desc": "Finds an application by Lua pattern in its window title (e.g.\"Inbox %(%d+ messages.*)\")",
    "module": "hs.appfinder",
    "name": "appFromWindowTitlePattern",
    "type": "Function"
  },
  {
    "desc": "Finds a window by its title (e.g. \"Activity Monitor (All Processes)\")",
    "module": "hs.appfinder",
    "name": "windowFromWindowTitle",
    "type": "Function"
  },
  {
    "desc": "Finds a window by Lua pattern in its title (e.g.\"Inbox %(%d+ messages.*)\")",
    "module": "hs.appfinder",
    "name": "windowFromWindowTitlePattern",
    "type": "Function"
  },
  {
    "desc": "Execute AppleScript code",
    "name": "hs.applescript",
    "type": "Module"
  },
  {
    "desc": "Manipulate running applications",
    "name": "hs.application",
    "type": "Module"
  },
  {
    "desc": "A table containing UTF8 representations of the defined key glyphs used in Menus for keybaord shortcuts which are presented pictorially rather than as text (arrow keys, return key, etc.)",
    "module": "hs.application",
    "name": "menuGlyphs",
    "type": "Variable"
  },
  {
    "desc": "Returns the running app for the given pid, if it exists.",
    "module": "hs.application",
    "name": "applicationForPID",
    "type": "Function"
  },
  {
    "desc": "Returns any running apps that have the given bundleID.",
    "module": "hs.application",
    "name": "applicationsForBundleID",
    "type": "Function"
  },
  {
    "desc": "Get or set whether Spotlight should be used to find alternate names for applications.",
    "module": "hs.application",
    "name": "enableSpotlightForNameSearches",
    "type": "Function"
  },
  {
    "desc": "Returns the application object for the frontmost (active) application.  This is the application which currently receives input events.",
    "module": "hs.application",
    "name": "frontmostApplication",
    "type": "Function"
  },
  {
    "desc": "Gets the metadata of an application from its bundle identifier",
    "module": "hs.application",
    "name": "infoForBundleID",
    "type": "Function"
  },
  {
    "desc": "Gets the metadata of an application from its path on disk",
    "module": "hs.application",
    "name": "infoForBundlePath",
    "type": "Function"
  },
  {
    "desc": "Launches the app with the given name, or activates it if it's already running",
    "module": "hs.application",
    "name": "launchOrFocus",
    "type": "Function"
  },
  {
    "desc": "Launches the app with the given bundle ID, or activates it if it's already running",
    "module": "hs.application",
    "name": "launchOrFocusByBundleID",
    "type": "Function"
  },
  {
    "desc": "Gets the name of an application from its bundle identifier",
    "module": "hs.application",
    "name": "nameForBundleID",
    "type": "Function"
  },
  {
    "desc": "Gets the filesystem path of an application from its bundle identifier",
    "module": "hs.application",
    "name": "pathForBundleID",
    "type": "Function"
  },
  {
    "desc": "Returns all running apps.",
    "module": "hs.application",
    "name": "runningApplications",
    "type": "Function"
  },
  {
    "desc": "Finds running applications",
    "module": "hs.application",
    "name": "find",
    "type": "Constructor"
  },
  {
    "desc": "Gets a running application",
    "module": "hs.application",
    "name": "get",
    "type": "Constructor"
  },
  {
    "desc": "Launches an application, or activates it if it's already running",
    "module": "hs.application",
    "name": "open",
    "type": "Constructor"
  },
  {
    "desc": "Tries to activate the app (make its key window focused) and returns whether it succeeded; if allWindows is true, all windows of the application are brought forward as well.",
    "module": "hs.application",
    "name": "activate",
    "type": "Method"
  },
  {
    "desc": "Returns all open windows owned by the given app.",
    "module": "hs.application",
    "name": "allWindows",
    "type": "Method"
  },
  {
    "desc": "Returns the bundle identifier of the app.",
    "module": "hs.application",
    "name": "bundleID",
    "type": "Method"
  },
  {
    "desc": "Searches the application for a menu item",
    "module": "hs.application",
    "name": "findMenuItem",
    "type": "Method"
  },
  {
    "desc": "Finds windows from this application",
    "module": "hs.application",
    "name": "findWindow",
    "type": "Method"
  },
  {
    "desc": "Returns the currently focused window of the application, or nil",
    "module": "hs.application",
    "name": "focusedWindow",
    "type": "Method"
  },
  {
    "desc": "Gets the menu structure of the application",
    "module": "hs.application",
    "name": "getMenuItems",
    "type": "Method"
  },
  {
    "desc": "Gets a specific window from this application",
    "module": "hs.application",
    "name": "getWindow",
    "type": "Method"
  },
  {
    "desc": "Hides the app (and all its windows).",
    "module": "hs.application",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Returns whether the app is the frontmost (i.e. is the currently active application)",
    "module": "hs.application",
    "name": "isFrontmost",
    "type": "Method"
  },
  {
    "desc": "Returns whether the app is currently hidden.",
    "module": "hs.application",
    "name": "isHidden",
    "type": "Method"
  },
  {
    "desc": "Checks if the application is still running",
    "module": "hs.application",
    "name": "isRunning",
    "type": "Method"
  },
  {
    "desc": "Tries to terminate the app gracefully.",
    "module": "hs.application",
    "name": "kill",
    "type": "Method"
  },
  {
    "desc": "Tries to terminate the app forcefully.",
    "module": "hs.application",
    "name": "kill9",
    "type": "Method"
  },
  {
    "desc": "Identify the application's GUI state",
    "module": "hs.application",
    "name": "kind",
    "type": "Method"
  },
  {
    "desc": "Returns the main window of the given app, or nil.",
    "module": "hs.application",
    "name": "mainWindow",
    "type": "Method"
  },
  {
    "desc": "Alias for `hs.application:title()`",
    "module": "hs.application",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Returns the filesystem path of the app.",
    "module": "hs.application",
    "name": "path",
    "type": "Method"
  },
  {
    "desc": "Returns the app's process identifier.",
    "module": "hs.application",
    "name": "pid",
    "type": "Method"
  },
  {
    "desc": "Selects a menu item (i.e. simulates clicking on the menu item)",
    "module": "hs.application",
    "name": "selectMenuItem",
    "type": "Method"
  },
  {
    "desc": "Returns the localized name of the app (in UTF8).",
    "module": "hs.application",
    "name": "title",
    "type": "Method"
  },
  {
    "desc": "Unhides the app (and all its windows) if it's hidden.",
    "module": "hs.application",
    "name": "unhide",
    "type": "Method"
  },
  {
    "desc": "Returns only the app's windows that are visible.",
    "module": "hs.application",
    "name": "visibleWindows",
    "type": "Method"
  },
  {
    "desc": "Watch for application launch/terminate events",
    "name": "hs.application.watcher",
    "type": "Module"
  },
  {
    "desc": "An application has been activated (i.e. given keyboard/mouse focus)",
    "module": "hs.application.watcher",
    "name": "activated",
    "type": "Constant"
  },
  {
    "desc": "An application has been deactivated (i.e. lost keyboard/mouse focus)",
    "module": "hs.application.watcher",
    "name": "deactivated",
    "type": "Constant"
  },
  {
    "desc": "An application has been hidden",
    "module": "hs.application.watcher",
    "name": "hidden",
    "type": "Constant"
  },
  {
    "desc": "An application has been launched",
    "module": "hs.application.watcher",
    "name": "launched",
    "type": "Constant"
  },
  {
    "desc": "An application is in the process of being launched",
    "module": "hs.application.watcher",
    "name": "launching",
    "type": "Constant"
  },
  {
    "desc": "An application has been terminated",
    "module": "hs.application.watcher",
    "name": "terminated",
    "type": "Constant"
  },
  {
    "desc": "An application has been unhidden",
    "module": "hs.application.watcher",
    "name": "unhidden",
    "type": "Constant"
  },
  {
    "desc": "Creates an application event watcher",
    "module": "hs.application.watcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts the application watcher",
    "module": "hs.application.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the application watcher",
    "module": "hs.application.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Manipulate the system's audio devices",
    "name": "hs.audiodevice",
    "type": "Module"
  },
  {
    "desc": "Returns a list of all connected devices",
    "module": "hs.audiodevice",
    "name": "allDevices",
    "type": "Function"
  },
  {
    "desc": "Returns a list of all connected input devices.",
    "module": "hs.audiodevice",
    "name": "allInputDevices",
    "type": "Function"
  },
  {
    "desc": "Returns a list of all connected output devices",
    "module": "hs.audiodevice",
    "name": "allOutputDevices",
    "type": "Function"
  },
  {
    "desc": "Fetch various metadata about the current default audio devices",
    "module": "hs.audiodevice",
    "name": "current",
    "type": "Function"
  },
  {
    "desc": "Get the currently selected audio input device",
    "module": "hs.audiodevice",
    "name": "defaultInputDevice",
    "type": "Function"
  },
  {
    "desc": "Get the currently selected audio output device",
    "module": "hs.audiodevice",
    "name": "defaultOutputDevice",
    "type": "Function"
  },
  {
    "desc": "Find an audio device by name",
    "module": "hs.audiodevice",
    "name": "findDeviceByName",
    "type": "Function"
  },
  {
    "desc": "Find an audio device by UID",
    "module": "hs.audiodevice",
    "name": "findDeviceByUID",
    "type": "Function"
  },
  {
    "desc": "Find an audio input device by name",
    "module": "hs.audiodevice",
    "name": "findInputByName",
    "type": "Function"
  },
  {
    "desc": "Find an audio input device by UID",
    "module": "hs.audiodevice",
    "name": "findInputByUID",
    "type": "Function"
  },
  {
    "desc": "Find an audio output device by name",
    "module": "hs.audiodevice",
    "name": "findOutputByName",
    "type": "Function"
  },
  {
    "desc": "Find an audio output device by UID",
    "module": "hs.audiodevice",
    "name": "findOutputByUID",
    "type": "Function"
  },
  {
    "desc": "Gets all of the input data sources of an audio device",
    "module": "hs.audiodevice",
    "name": "allInputDataSources",
    "type": "Method"
  },
  {
    "desc": "Gets all of the output data sources of an audio device",
    "module": "hs.audiodevice",
    "name": "allOutputDataSources",
    "type": "Method"
  },
  {
    "desc": "Gets the current input data source of an audio device",
    "module": "hs.audiodevice",
    "name": "currentInputDataSource",
    "type": "Method"
  },
  {
    "desc": "Gets the current output data source of an audio device",
    "module": "hs.audiodevice",
    "name": "currentOutputDataSource",
    "type": "Method"
  },
  {
    "desc": "Get the Input mutedness state of the audio device",
    "module": "hs.audiodevice",
    "name": "inputMuted",
    "type": "Method"
  },
  {
    "desc": "Get the current input volume of this audio device",
    "module": "hs.audiodevice",
    "name": "inputVolume",
    "type": "Method"
  },
  {
    "desc": "Determins if an audio device is an input device",
    "module": "hs.audiodevice",
    "name": "isInputDevice",
    "type": "Method"
  },
  {
    "desc": "Determins if an audio device is an output device",
    "module": "hs.audiodevice",
    "name": "isOutputDevice",
    "type": "Method"
  },
  {
    "desc": "Determines whether an audio jack (e.g. headphones) is connected to an audio device",
    "module": "hs.audiodevice",
    "name": "jackConnected",
    "type": "Method"
  },
  {
    "desc": "Get the mutedness state of the audio device",
    "module": "hs.audiodevice",
    "name": "muted",
    "type": "Method"
  },
  {
    "desc": "Get the name of the audio device",
    "module": "hs.audiodevice",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Get the Output mutedness state of the audio device",
    "module": "hs.audiodevice",
    "name": "outputMuted",
    "type": "Method"
  },
  {
    "desc": "Get the current output volume of this audio device",
    "module": "hs.audiodevice",
    "name": "outputVolume",
    "type": "Method"
  },
  {
    "desc": "Selects this device as the system's audio input device",
    "module": "hs.audiodevice",
    "name": "setDefaultInputDevice",
    "type": "Method"
  },
  {
    "desc": "Selects this device as the system's audio output device",
    "module": "hs.audiodevice",
    "name": "setDefaultOutputDevice",
    "type": "Method"
  },
  {
    "desc": "Set the mutedness state of the Input of the audio device",
    "module": "hs.audiodevice",
    "name": "setInputMuted",
    "type": "Method"
  },
  {
    "desc": "Set the input volume of this audio device",
    "module": "hs.audiodevice",
    "name": "setInputVolume",
    "type": "Method"
  },
  {
    "desc": "Set the mutedness state of the audio device",
    "module": "hs.audiodevice",
    "name": "setMuted",
    "type": "Method"
  },
  {
    "desc": "Set the mutedness state of the Output of the audio device",
    "module": "hs.audiodevice",
    "name": "setOutputMuted",
    "type": "Method"
  },
  {
    "desc": "Set the output volume of this audio device",
    "module": "hs.audiodevice",
    "name": "setOutputtVolume",
    "type": "Method"
  },
  {
    "desc": "Set the volume of this audio device",
    "module": "hs.audiodevice",
    "name": "setVolume",
    "type": "Method"
  },
  {
    "desc": "Determines whether an audio device supports input data sources",
    "module": "hs.audiodevice",
    "name": "supportsInputDataSources",
    "type": "Method"
  },
  {
    "desc": "Determines whether an audio device supports output data sources",
    "module": "hs.audiodevice",
    "name": "supportsOutputDataSources",
    "type": "Method"
  },
  {
    "desc": "Gets the hardware transport type of an audio device",
    "module": "hs.audiodevice",
    "name": "transportType",
    "type": "Method"
  },
  {
    "desc": "Get the unique identifier of the audio device",
    "module": "hs.audiodevice",
    "name": "uid",
    "type": "Method"
  },
  {
    "desc": "Get the current volume of this audio device",
    "module": "hs.audiodevice",
    "name": "volume",
    "type": "Method"
  },
  {
    "desc": "Sets or removes a callback function for an audio device watcher",
    "module": "hs.audiodevice",
    "name": "watcherCallback",
    "type": "Method"
  },
  {
    "desc": "Gets the status of the `hs.audiodevice` object watcher",
    "module": "hs.audiodevice",
    "name": "watcherIsRunning",
    "type": "Method"
  },
  {
    "desc": "Starts the watcher on an `hs.audiodevice` object",
    "module": "hs.audiodevice",
    "name": "watcherStart",
    "type": "Method"
  },
  {
    "desc": "Stops the watcher on an `hs.audiodevice` object",
    "module": "hs.audiodevice",
    "name": "watcherStop",
    "type": "Method"
  },
  {
    "desc": "Inspect/manipulate the data sources of an audio device",
    "name": "hs.audiodevice.datasource",
    "type": "Module"
  },
  {
    "desc": "Gets the name of an audio device datasource",
    "module": "hs.audiodevice.datasource",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Sets the audio device datasource as the default",
    "module": "hs.audiodevice.datasource",
    "name": "setDefault",
    "type": "Method"
  },
  {
    "desc": "Watch for system level audio hardware events",
    "name": "hs.audiodevice.watcher",
    "type": "Module"
  },
  {
    "desc": "Gets the status of the audio device watcher",
    "module": "hs.audiodevice.watcher",
    "name": "isRunning",
    "type": "Function"
  },
  {
    "desc": "Sets the callback function for the audio device watcher",
    "module": "hs.audiodevice.watcher",
    "name": "setCallback",
    "type": "Function"
  },
  {
    "desc": "Starts the audio device watcher",
    "module": "hs.audiodevice.watcher",
    "name": "start",
    "type": "Function"
  },
  {
    "desc": "Stops the audio device watcher",
    "module": "hs.audiodevice.watcher",
    "name": "stop",
    "type": "Function"
  },
  {
    "desc": "Base64 encoding and decoding",
    "name": "hs.base64",
    "type": "Module"
  },
  {
    "desc": "Decodes a given base64 string",
    "module": "hs.base64",
    "name": "decode",
    "type": "Function"
  },
  {
    "desc": "Encodes a given string to base64",
    "module": "hs.base64",
    "name": "encode",
    "type": "Function"
  },
  {
    "desc": "Battery/power information",
    "name": "hs.battery",
    "type": "Module"
  },
  {
    "desc": "Returns the amount of current flowing through the battery, in mAh",
    "module": "hs.battery",
    "name": "amperage",
    "type": "Function"
  },
  {
    "desc": "Returns the current capacity of the battery in mAh",
    "module": "hs.battery",
    "name": "capacity",
    "type": "Function"
  },
  {
    "desc": "Returns the number of discharge cycles of the battery",
    "module": "hs.battery",
    "name": "cycles",
    "type": "Function"
  },
  {
    "desc": "Returns the design capacity of the battery in mAh.",
    "module": "hs.battery",
    "name": "designCapacity",
    "type": "Function"
  },
  {
    "desc": "Get all available battery information",
    "module": "hs.battery",
    "name": "getAll",
    "type": "Function"
  },
  {
    "desc": "Returns the health status of the battery.",
    "module": "hs.battery",
    "name": "health",
    "type": "Function"
  },
  {
    "desc": "Returns the health condition status of the battery.",
    "module": "hs.battery",
    "name": "healthCondition",
    "type": "Function"
  },
  {
    "desc": "Returns the charged state of the battery",
    "module": "hs.battery",
    "name": "isCharged",
    "type": "Function"
  },
  {
    "desc": "Returns the charging state of the battery",
    "module": "hs.battery",
    "name": "isCharging",
    "type": "Function"
  },
  {
    "desc": "Returns true if battery is finishing its charge",
    "module": "hs.battery",
    "name": "isFinishingCharge",
    "type": "Function"
  },
  {
    "desc": "Returns the maximum capacity of the battery in mAh",
    "module": "hs.battery",
    "name": "maxCapacity",
    "type": "Function"
  },
  {
    "desc": "Returns the name of the battery",
    "module": "hs.battery",
    "name": "name",
    "type": "Function"
  },
  {
    "desc": "Returns information about non-PSU batteries (e.g. bluetooth accessories)",
    "module": "hs.battery",
    "name": "otherBatteryInfo",
    "type": "Function"
  },
  {
    "desc": "Returns the current percentage of battery charge",
    "module": "hs.battery",
    "name": "percentage",
    "type": "Function"
  },
  {
    "desc": "Returns current source of power",
    "module": "hs.battery",
    "name": "powerSource",
    "type": "Function"
  },
  {
    "desc": "Returns the serial number of the attached power supply, if present",
    "module": "hs.battery",
    "name": "psuSerial",
    "type": "Function"
  },
  {
    "desc": "Returns the battery life remaining, in minutes",
    "module": "hs.battery",
    "name": "timeRemaining",
    "type": "Function"
  },
  {
    "desc": "Returns the time remaining for the battery to be fully charged, in minutes",
    "module": "hs.battery",
    "name": "timeToFullCharge",
    "type": "Function"
  },
  {
    "desc": "Returns the current voltage of the battery in mV",
    "module": "hs.battery",
    "name": "voltage",
    "type": "Function"
  },
  {
    "desc": "Returns the power entering or leaving the battery, in W",
    "module": "hs.battery",
    "name": "watts",
    "type": "Function"
  },
  {
    "desc": "Watch for battery/power state changes",
    "name": "hs.battery.watcher",
    "type": "Module"
  },
  {
    "desc": "Creates a battery watcher",
    "module": "hs.battery.watcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts the battery watcher",
    "module": "hs.battery.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the battery watcher",
    "module": "hs.battery.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Inspect/manipulate display brightness",
    "name": "hs.brightness",
    "type": "Module"
  },
  {
    "desc": "Gets the current ambient brightness",
    "module": "hs.brightness",
    "name": "ambient",
    "type": "Function"
  },
  {
    "desc": "Returns the current brightness of the display",
    "module": "hs.brightness",
    "name": "get",
    "type": "Function"
  },
  {
    "desc": "Sets the display brightness",
    "module": "hs.brightness",
    "name": "set",
    "type": "Function"
  },
  {
    "desc": "Control system power states (sleeping, preventing sleep, screen locking, etc)",
    "name": "hs.caffeinate",
    "type": "Module"
  },
  {
    "desc": "Informs the OS that the user performed some activity",
    "module": "hs.caffeinate",
    "name": "declareUserActivity",
    "type": "Function"
  },
  {
    "desc": "Queries whether a particular sleep type is being prevented",
    "module": "hs.caffeinate",
    "name": "get",
    "type": "Function"
  },
  {
    "desc": "Request the system lock the displays",
    "module": "hs.caffeinate",
    "name": "lockScreen",
    "type": "Function"
  },
  {
    "desc": "Request the system log out the current user",
    "module": "hs.caffeinate",
    "name": "logOut",
    "type": "Function"
  },
  {
    "desc": "Request the system reboot",
    "module": "hs.caffeinate",
    "name": "restartSystem",
    "type": "Function"
  },
  {
    "desc": "Fetches information from the display server about the current session",
    "module": "hs.caffeinate",
    "name": "sessionProperties",
    "type": "Function"
  },
  {
    "desc": "Configures the sleep prevention settings",
    "module": "hs.caffeinate",
    "name": "set",
    "type": "Function"
  },
  {
    "desc": "Request the system log out and power down",
    "module": "hs.caffeinate",
    "name": "shutdownSystem",
    "type": "Function"
  },
  {
    "desc": "Request the system start the screensaver (which may lock the screen if the OS is configured to do so)",
    "module": "hs.caffeinate",
    "name": "startScreensaver",
    "type": "Function"
  },
  {
    "desc": "Requests the system to sleep immediately",
    "module": "hs.caffeinate",
    "name": "systemSleep",
    "type": "Function"
  },
  {
    "desc": "Toggles the current state of the specified type of sleep",
    "module": "hs.caffeinate",
    "name": "toggle",
    "type": "Function"
  },
  {
    "desc": "Watch for display and system sleep/wake/power events",
    "name": "hs.caffeinate.watcher",
    "type": "Module"
  },
  {
    "desc": "The screensaver started",
    "module": "hs.caffeinate.watcher",
    "name": "screensaverDidStart",
    "type": "Constant"
  },
  {
    "desc": "The screensaver stopped",
    "module": "hs.caffeinate.watcher",
    "name": "screensaverDidStop",
    "type": "Constant"
  },
  {
    "desc": "The screensaver is about to stop",
    "module": "hs.caffeinate.watcher",
    "name": "screensaverWillStop",
    "type": "Constant"
  },
  {
    "desc": "The screen was locked",
    "module": "hs.caffeinate.watcher",
    "name": "screensDidLock",
    "type": "Constant"
  },
  {
    "desc": "The displays have gone to sleep",
    "module": "hs.caffeinate.watcher",
    "name": "screensDidSleep",
    "type": "Constant"
  },
  {
    "desc": "The screen was unlocked",
    "module": "hs.caffeinate.watcher",
    "name": "screensDidUnlock",
    "type": "Constant"
  },
  {
    "desc": "The displays have woken from sleep",
    "module": "hs.caffeinate.watcher",
    "name": "screensDidWake",
    "type": "Constant"
  },
  {
    "desc": "The session became active, due to fast user switching",
    "module": "hs.caffeinate.watcher",
    "name": "sessionDidBecomeActive",
    "type": "Constant"
  },
  {
    "desc": "The session is no longer active, due to fast user switching",
    "module": "hs.caffeinate.watcher",
    "name": "sessionDidResignActive",
    "type": "Constant"
  },
  {
    "desc": "The system woke from sleep",
    "module": "hs.caffeinate.watcher",
    "name": "systemDidWake",
    "type": "Constant"
  },
  {
    "desc": "The user requested a logout or shutdown",
    "module": "hs.caffeinate.watcher",
    "name": "systemWillPowerOff",
    "type": "Constant"
  },
  {
    "desc": "The system is preparing to sleep",
    "module": "hs.caffeinate.watcher",
    "name": "systemWillSleep",
    "type": "Constant"
  },
  {
    "desc": "Creates a watcher object for system and display sleep/wake/power events",
    "module": "hs.caffeinate.watcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts the sleep/wake watcher",
    "module": "hs.caffeinate.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the sleep/wake watcher",
    "module": "hs.caffeinate.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "A different approach to drawing in Hammerspoon",
    "name": "hs.canvas",
    "type": "Module"
  },
  {
    "desc": "A table containing the possible compositing rules for elements within the canvas.",
    "module": "hs.canvas",
    "name": "compositeTypes",
    "type": "Constant"
  },
  {
    "desc": "Array of window behavior labels for determining how a canvas or drawing object is handled in Spaces and Exposé",
    "module": "hs.canvas",
    "name": "windowBehaviors",
    "type": "Constant"
  },
  {
    "desc": "A table of predefined window levels usable with [hs.canvas:level](#level)",
    "module": "hs.canvas",
    "name": "windowLevels",
    "type": "Constant"
  },
  {
    "desc": "Returns a table containing the default font, size, color, and paragraphStyle used by `hs.canvas` for text drawing objects.",
    "module": "hs.canvas",
    "name": "defaultTextStyle",
    "type": "Function"
  },
  {
    "desc": "Tells the OS X window server to pause updating the physical displays for a short while.",
    "module": "hs.canvas",
    "name": "disableScreenUpdates",
    "type": "Function"
  },
  {
    "desc": "Returns the list of attributes and their specifications that are recognized for canvas elements by this module.",
    "module": "hs.canvas",
    "name": "elementSpec",
    "type": "Function"
  },
  {
    "desc": "Tells the OS X window server to resume updating the physical displays after a previous pause.",
    "module": "hs.canvas",
    "name": "enableScreenUpdates",
    "type": "Function"
  },
  {
    "desc": "Provides specification information for the recognized attributes, or the specific attribute specified.",
    "module": "hs.canvas",
    "name": "help",
    "type": "Function"
  },
  {
    "desc": "Create a new canvas object at the specified coordinates",
    "module": "hs.canvas",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Canvas Element Attributes",
    "module": "hs.canvas",
    "name": "attributes",
    "type": "Field"
  },
  {
    "desc": "An array-like method for accessing the attributes for the canvas element at the specified index",
    "module": "hs.canvas",
    "name": "object",
    "type": "Field"
  },
  {
    "desc": "Canvas attributes which specify the location and size of canvas elements can be specified with an absolute position or as a percentage of the canvas size.",
    "module": "hs.canvas",
    "name": "percentages",
    "type": "Field"
  },
  {
    "desc": "Get or set the alpha level of the window containing the canvasObject.",
    "module": "hs.canvas",
    "name": "alpha",
    "type": "Method"
  },
  {
    "desc": "Appends the elements specified to the canvas.",
    "module": "hs.canvas",
    "name": "appendElements",
    "type": "Method"
  },
  {
    "desc": "Assigns a new element to the canvas at the specified index.",
    "module": "hs.canvas",
    "name": "assignElement",
    "type": "Method"
  },
  {
    "desc": "Get or set the window behavior settings for the canvas object using labels defined in [hs.canvas.windowBehaviors](#windowBehaviors).",
    "module": "hs.canvas",
    "name": "behavior",
    "type": "Method"
  },
  {
    "desc": "Get or set the window behavior settings for the canvas object using labels defined in [hs.canvas.windowBehaviors](#windowBehaviors).",
    "module": "hs.canvas",
    "name": "behaviorAsLabels",
    "type": "Method"
  },
  {
    "desc": "Places the canvas object on top of normal windows",
    "module": "hs.canvas",
    "name": "bringToFront",
    "type": "Method"
  },
  {
    "desc": "Get or set the element default specified by keyName.",
    "module": "hs.canvas",
    "name": "canvasDefaultFor",
    "type": "Method"
  },
  {
    "desc": "Returns a list of the key names for the attributes set for the canvas defaults.",
    "module": "hs.canvas",
    "name": "canvasDefaultKeys",
    "type": "Method"
  },
  {
    "desc": "Get a table of the default key-value pairs which apply to the canvas.",
    "module": "hs.canvas",
    "name": "canvasDefaults",
    "type": "Method"
  },
  {
    "desc": "Returns an array containing the elements defined for this canvas.  Each array entry will be a table containing the key-value pairs which have been set for that canvas element.",
    "module": "hs.canvas",
    "name": "canvasElements",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not regions of the canvas which are not otherwise covered by an element with mouse tracking enabled should generate a callback for mouse events.",
    "module": "hs.canvas",
    "name": "canvasMouseEvents",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not clicking on a canvas with a click callback defined should bring all of Hammerspoon's open windows to the front.",
    "module": "hs.canvas",
    "name": "clickActivating",
    "type": "Method"
  },
  {
    "desc": "Creates a copy of the canvas.",
    "module": "hs.canvas",
    "name": "copy",
    "type": "Method"
  },
  {
    "desc": "Destroys the canvas object, optionally fading it out first (if currently visible).",
    "module": "hs.canvas",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Sets or remove a callback for accepting dragging and dropping items onto the canvas.",
    "module": "hs.canvas",
    "name": "draggingCallback",
    "type": "Method"
  },
  {
    "desc": "Get or set the attribute `key` for the canvas element at the specified index.",
    "module": "hs.canvas",
    "name": "elementAttribute",
    "type": "Method"
  },
  {
    "desc": "Returns the smallest rectangle which can fully contain the canvas element at the specified index.",
    "module": "hs.canvas",
    "name": "elementBounds",
    "type": "Method"
  },
  {
    "desc": "Returns the number of elements currently defined for the canvas object.",
    "module": "hs.canvas",
    "name": "elementCount",
    "type": "Method"
  },
  {
    "desc": "Returns a list of the key names for the attributes set for the canvas element at the specified index.",
    "module": "hs.canvas",
    "name": "elementKeys",
    "type": "Method"
  },
  {
    "desc": "Get or set the frame of the canvasObject.",
    "module": "hs.canvas",
    "name": "frame",
    "type": "Method"
  },
  {
    "desc": "Hides the canvas object",
    "module": "hs.canvas",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Returns an image of the canvas contents as an `hs.image` object.",
    "module": "hs.canvas",
    "name": "imageFromCanvas",
    "type": "Method"
  },
  {
    "desc": "Insert a new element into the canvas at the specified index.",
    "module": "hs.canvas",
    "name": "insertElement",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the canvas is currently occluded (hidden by other windows, off screen, etc).",
    "module": "hs.canvas",
    "name": "isOccluded",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the canvas is currently being shown.",
    "module": "hs.canvas",
    "name": "isShowing",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the canvas is currently showing and is (at least partially) visible on screen.",
    "module": "hs.canvas",
    "name": "isVisible",
    "type": "Method"
  },
  {
    "desc": "Sets the window level more precisely than sendToBack and bringToFront.",
    "module": "hs.canvas",
    "name": "level",
    "type": "Method"
  },
  {
    "desc": "Returns a table specifying the size of the rectangle which can fully render the text with the specified style so that is will be completely visible.",
    "module": "hs.canvas",
    "name": "minimumTextSize",
    "type": "Method"
  },
  {
    "desc": "Sets a callback for mouse events with respect to the canvas",
    "module": "hs.canvas",
    "name": "mouseCallback",
    "type": "Method"
  },
  {
    "desc": "Moves canvas object above canvas2, or all canvas objects in the same presentation level, if canvas2 is not given.",
    "module": "hs.canvas",
    "name": "orderAbove",
    "type": "Method"
  },
  {
    "desc": "Moves canvas object below canvas2, or all canvas objects in the same presentation level, if canvas2 is not given.",
    "module": "hs.canvas",
    "name": "orderBelow",
    "type": "Method"
  },
  {
    "desc": "Insert a new element into the canvas at the specified index.",
    "module": "hs.canvas",
    "name": "removeElement",
    "type": "Method"
  },
  {
    "desc": "Replaces all of the elements in the canvas with the elements specified.  Shortens or lengthens the canvas element count if necessary to accomodate the new canvas elements.",
    "module": "hs.canvas",
    "name": "replaceElements",
    "type": "Method"
  },
  {
    "desc": "Rotates an element about the point specified, or the elements center if no point is specified.",
    "module": "hs.canvas",
    "name": "rotateElement",
    "type": "Method"
  },
  {
    "desc": "Places the canvas object behind normal windows, between the desktop wallpaper and desktop icons",
    "module": "hs.canvas",
    "name": "sendToBack",
    "type": "Method"
  },
  {
    "desc": "Displays the canvas object",
    "module": "hs.canvas",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Get or set the size of a canvas object",
    "module": "hs.canvas",
    "name": "size",
    "type": "Method"
  },
  {
    "desc": "Get or set the top-left coordinate of the canvas object",
    "module": "hs.canvas",
    "name": "topLeft",
    "type": "Method"
  },
  {
    "desc": "Get or set the matrix transformation which is applied to every element in the canvas before being individually processed and added to the canvas.",
    "module": "hs.canvas",
    "name": "transformation",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the canvas object should be rendered by the view or by Core Animation.",
    "module": "hs.canvas",
    "name": "wantsLayer",
    "type": "Method"
  },
  {
    "desc": "An wrapper to replace `hs.drawing` with `hs.canvas`.",
    "name": "hs.canvas.drawing",
    "type": "Module"
  },
  {
    "desc": "Get or set whether or not `hs.drawing` is replaced by a wrapper which uses this module.",
    "module": "hs.canvas.drawing",
    "name": "drawingWrapper",
    "type": "Function"
  },
  {
    "desc": "A sub module to `hs.canvas` which provides support for basic matrix manipulations which can be used as the values for `transformation` attributes in the `hs.canvas` module.",
    "name": "hs.canvas.matrix",
    "type": "Module"
  },
  {
    "desc": "Specifies the identity matrix.  Resets all existing transformations when applied as a method to an existing matrixObject.",
    "module": "hs.canvas.matrix",
    "name": "identity",
    "type": "Constructor"
  },
  {
    "desc": "Appends the specified matrix transformations to the matrix and returns the new matrix.  This method cannot be used as a constructor.",
    "module": "hs.canvas.matrix",
    "name": "append",
    "type": "Method"
  },
  {
    "desc": "Generates the mathematical inverse of the matrix.  This method cannot be used as a constructor.",
    "module": "hs.canvas.matrix",
    "name": "invert",
    "type": "Method"
  },
  {
    "desc": "Prepends the specified matrix transformations to the matrix and returns the new matrix.  This method cannot be used as a constructor.",
    "module": "hs.canvas.matrix",
    "name": "prepend",
    "type": "Method"
  },
  {
    "desc": "Applies a rotation of the specified number of degrees to the transformation matrix.  This method can be used as a constructor or a method.",
    "module": "hs.canvas.matrix",
    "name": "rotate",
    "type": "Method"
  },
  {
    "desc": "Applies a scaling transformation to the matrix.  This method can be used as a constructor or a method.",
    "module": "hs.canvas.matrix",
    "name": "scale",
    "type": "Method"
  },
  {
    "desc": "Applies a shearing transformation to the matrix.  This method can be used as a constructor or a method.",
    "module": "hs.canvas.matrix",
    "name": "shear",
    "type": "Method"
  },
  {
    "desc": "Applies a translation transformation to the matrix.  This method can be used as a constructor or a method.",
    "module": "hs.canvas.matrix",
    "name": "translate",
    "type": "Method"
  },
  {
    "desc": "Graphical, interactive tool for choosing/searching data",
    "name": "hs.chooser",
    "type": "Module"
  },
  {
    "desc": "Creates a new chooser object",
    "module": "hs.chooser",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Sets the background of the chooser between light and dark",
    "module": "hs.chooser",
    "name": "bgDark",
    "type": "Method"
  },
  {
    "desc": "Cancels the chooser",
    "module": "hs.chooser",
    "name": "cancel",
    "type": "Method"
  },
  {
    "desc": "Sets the choices for a chooser",
    "module": "hs.chooser",
    "name": "choices",
    "type": "Method"
  },
  {
    "desc": "Deletes a chooser",
    "module": "hs.chooser",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Sets the foreground color of the chooser",
    "module": "hs.chooser",
    "name": "fgColor",
    "type": "Method"
  },
  {
    "desc": "Hides the chooser",
    "module": "hs.chooser",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Checks if the chooser is currently displayed",
    "module": "hs.chooser",
    "name": "isVisible",
    "type": "Method"
  },
  {
    "desc": "Sets/gets the search string",
    "module": "hs.chooser",
    "name": "query",
    "type": "Method"
  },
  {
    "desc": "Sets/clears a callback for when the search query changes",
    "module": "hs.chooser",
    "name": "queryChangedCallback",
    "type": "Method"
  },
  {
    "desc": "Refreshes the choices data from a callback",
    "module": "hs.chooser",
    "name": "refreshChoicesCallback",
    "type": "Method"
  },
  {
    "desc": "Sets/clears a callback for right clicking on choices",
    "module": "hs.chooser",
    "name": "rightClickCallback",
    "type": "Method"
  },
  {
    "desc": "Gets/Sets the number of rows that will be shown",
    "module": "hs.chooser",
    "name": "rows",
    "type": "Method"
  },
  {
    "desc": "Gets/Sets whether the chooser should search in the sub-text of each item",
    "module": "hs.chooser",
    "name": "searchSubText",
    "type": "Method"
  },
  {
    "desc": "Closes the chooser by selecting the specified row, or the currently selected row if not given",
    "module": "hs.chooser",
    "name": "select",
    "type": "Method"
  },
  {
    "desc": "Get or set the currently selected row",
    "module": "hs.chooser",
    "name": "selectedRow",
    "type": "Method"
  },
  {
    "desc": "Returns the contents of the currently selected or specified row",
    "module": "hs.chooser",
    "name": "selectedRowContents",
    "type": "Method"
  },
  {
    "desc": "Displays the chooser",
    "module": "hs.chooser",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Sets/clears a callback for when the chooser window is shown",
    "module": "hs.chooser",
    "name": "showCallback",
    "type": "Method"
  },
  {
    "desc": "Sets the sub-text color of the chooser",
    "module": "hs.chooser",
    "name": "subTextColor",
    "type": "Method"
  },
  {
    "desc": "Gets/Sets the width of the chooser",
    "module": "hs.chooser",
    "name": "width",
    "type": "Method"
  },
  {
    "desc": "Some functions for manipulating the Hammerspoon console.",
    "name": "hs.console",
    "type": "Module"
  },
  {
    "desc": "Because use of this function can easily lead to a crash, useful methods from `hs.drawing` have been added to the `hs.console` module itself.  If you believe that a useful method has been overlooked, please submit an issue.",
    "module": "hs.console",
    "name": "asHSDrawing",
    "type": "Deprecated"
  },
  {
    "desc": "Returns an hs.window object for the console so that you can use hs.window methods on it.",
    "module": "hs.console",
    "name": "asHSWindow",
    "type": "Deprecated"
  },
  {
    "desc": "Get or set the alpha level of the console window.",
    "module": "hs.console",
    "name": "alpha",
    "type": "Function"
  },
  {
    "desc": "Get or set the window behavior settings for the console using labels defined in `hs.drawing.windowBehaviors`.",
    "module": "hs.console",
    "name": "behaviorAsLabels",
    "type": "Function"
  },
  {
    "desc": "Clear the Hammerspoon console output window.",
    "module": "hs.console",
    "name": "clearConsole",
    "type": "Function"
  },
  {
    "desc": "Get or set the color that commands displayed in the Hammerspoon console are displayed with.",
    "module": "hs.console",
    "name": "consoleCommandColor",
    "type": "Function"
  },
  {
    "desc": "Get or set the font used in the Hammerspoon console.",
    "module": "hs.console",
    "name": "consoleFont",
    "type": "Function"
  },
  {
    "desc": "Get or set the color that regular output displayed in the Hammerspoon console is displayed with.",
    "module": "hs.console",
    "name": "consolePrintColor",
    "type": "Function"
  },
  {
    "desc": "Get or set the color that function results displayed in the Hammerspoon console are displayed with.",
    "module": "hs.console",
    "name": "consoleResultColor",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the Console window should display in dark mode.",
    "module": "hs.console",
    "name": "darkMode",
    "type": "Function"
  },
  {
    "desc": "Get the text of the Hammerspoon console output window.",
    "module": "hs.console",
    "name": "getConsole",
    "type": "Function"
  },
  {
    "desc": "Get the Hammerspoon console history as an array.",
    "module": "hs.console",
    "name": "getHistory",
    "type": "Function"
  },
  {
    "desc": "Get an hs.window object which represents the Hammerspoon console window",
    "module": "hs.console",
    "name": "hswindow",
    "type": "Function"
  },
  {
    "desc": "Get or set the color for the background of the Hammerspoon Console's input field.",
    "module": "hs.console",
    "name": "inputBackgroundColor",
    "type": "Function"
  },
  {
    "desc": "Get or set the console window level",
    "module": "hs.console",
    "name": "level",
    "type": "Function"
  },
  {
    "desc": "Get or set the color for the background of the Hammerspoon Console's output view.",
    "module": "hs.console",
    "name": "outputBackgroundColor",
    "type": "Function"
  },
  {
    "desc": "A print function which recognizes `hs.styledtext` objects and renders them as such in the Hammerspoon console.",
    "module": "hs.console",
    "name": "printStyledtext",
    "type": "Function"
  },
  {
    "desc": "Clear the Hammerspoon console output window.",
    "module": "hs.console",
    "name": "setConsole",
    "type": "Function"
  },
  {
    "desc": "Set the Hammerspoon console history to the items specified in the given array.",
    "module": "hs.console",
    "name": "setHistory",
    "type": "Function"
  },
  {
    "desc": "Determine whether or not objects copied from the console window insert or delete space around selected words to preserve proper spacing and punctuation.",
    "module": "hs.console",
    "name": "smartInsertDeleteEnabled",
    "type": "Function"
  },
  {
    "desc": "Get or set whether or not the \"Hammerspoon Console\" text appears in the Hammerspoon console titlebar.",
    "module": "hs.console",
    "name": "titleVisibility",
    "type": "Function"
  },
  {
    "desc": "Get or set the color for the background of the Hammerspoon Console's window.",
    "module": "hs.console",
    "name": "windowBackgroundColor",
    "type": "Function"
  },
  {
    "desc": "Get or set the window behavior settings for the console.",
    "module": "hs.console",
    "name": "behavior",
    "type": "Method"
  },
  {
    "desc": "Get or attach/detach a toolbar to/from the Hammerspoon console.",
    "module": "hs.console",
    "name": "toolbar",
    "type": "Method"
  },
  {
    "desc": "Various features/facilities for developers who are working on Hammerspoon itself, or writing extensions for it. It is extremely unlikely that you should need any part of this extension, in a normal user configuration.",
    "name": "hs.crash",
    "type": "Module"
  },
  {
    "desc": "A boolean value of true will log Hammerspoon's crash log with NSLog, false will silently capture messages in case of a crash. Defaults to false.",
    "module": "hs.crash",
    "name": "crashLogToNSLog",
    "type": "Variable"
  },
  {
    "desc": "Attempts to reduce RAM usage of Hammerspoon",
    "module": "hs.crash",
    "name": "attemptMemoryRelease",
    "type": "Function"
  },
  {
    "desc": "Causes Hammerspoon to immediately crash",
    "module": "hs.crash",
    "name": "crash",
    "type": "Function"
  },
  {
    "desc": "Sets a key/value pair in any Crashlytics crash dump generated by this Hamerspoon session",
    "module": "hs.crash",
    "name": "crashKV",
    "type": "Function"
  },
  {
    "desc": "Leaves a breadcrumb log message in any Crashlytics crash dump generated by this Hammerspoon session",
    "module": "hs.crash",
    "name": "crashLog",
    "type": "Function"
  },
  {
    "desc": "Dumps the contents of Lua's CLIBS registry",
    "module": "hs.crash",
    "name": "dumpCLIBS",
    "type": "Function"
  },
  {
    "desc": "Gets the resident size of the Hammerspoon process",
    "module": "hs.crash",
    "name": "residentSize",
    "type": "Function"
  },
  {
    "desc": "Causes Hammerspoon to generate an Objective C exception",
    "module": "hs.crash",
    "name": "throwObjCException",
    "type": "Function"
  },
  {
    "desc": "",
    "name": "hs.deezer",
    "type": "Module"
  },
  {
    "desc": "Returned by `hs.deezer.getPlaybackState()` to indicates deezer is paused",
    "module": "hs.deezer",
    "name": "state_paused",
    "type": "Constant"
  },
  {
    "desc": "Returned by `hs.deezer.getPlaybackState()` to indicates deezer is playing",
    "module": "hs.deezer",
    "name": "state_playing",
    "type": "Constant"
  },
  {
    "desc": "Returned by `hs.deezer.getPlaybackState()` to indicates deezer is stopped",
    "module": "hs.deezer",
    "name": "state_stopped",
    "type": "Constant"
  },
  {
    "desc": "Displays information for current track on screen",
    "module": "hs.deezer",
    "name": "displayCurrentTrack",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position forwards by 5 seconds",
    "module": "hs.deezer",
    "name": "ff",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the album of the current track",
    "module": "hs.deezer",
    "name": "getCurrentAlbum",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the artist of the current track",
    "module": "hs.deezer",
    "name": "getCurrentArtist",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the current track",
    "module": "hs.deezer",
    "name": "getCurrentTrack",
    "type": "Function"
  },
  {
    "desc": "Gets the current playback state of deezer",
    "module": "hs.deezer",
    "name": "getPlaybackState",
    "type": "Function"
  },
  {
    "desc": "Gets the playback position (in seconds) in the current song",
    "module": "hs.deezer",
    "name": "getPosition",
    "type": "Function"
  },
  {
    "desc": "Gets the deezer volume setting",
    "module": "hs.deezer",
    "name": "getVolume",
    "type": "Function"
  },
  {
    "desc": "Returns whether deezer is currently playing",
    "module": "hs.deezer",
    "name": "isPlaying",
    "type": "Function"
  },
  {
    "desc": "Returns whether deezer is currently open. Most other functions in hs.deezer will automatically start the application, so this function can be used to guard against that.",
    "module": "hs.deezer",
    "name": "isRunning",
    "type": "Function"
  },
  {
    "desc": "Skips to the next deezer track",
    "module": "hs.deezer",
    "name": "next",
    "type": "Function"
  },
  {
    "desc": "Pauses the current deezer track",
    "module": "hs.deezer",
    "name": "pause",
    "type": "Function"
  },
  {
    "desc": "Plays the current deezer track",
    "module": "hs.deezer",
    "name": "play",
    "type": "Function"
  },
  {
    "desc": "Toggles play/pause of current deezer track",
    "module": "hs.deezer",
    "name": "playpause",
    "type": "Function"
  },
  {
    "desc": "Skips to previous deezer track",
    "module": "hs.deezer",
    "name": "previous",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position backwards by 5 seconds",
    "module": "hs.deezer",
    "name": "rw",
    "type": "Function"
  },
  {
    "desc": "Sets the playback position in the current song",
    "module": "hs.deezer",
    "name": "setPosition",
    "type": "Function"
  },
  {
    "desc": "Sets the deezer volume setting",
    "module": "hs.deezer",
    "name": "setVolume",
    "type": "Function"
  },
  {
    "desc": "Reduces the volume by 5",
    "module": "hs.deezer",
    "name": "volumeDown",
    "type": "Function"
  },
  {
    "desc": "Increases the volume by 5",
    "module": "hs.deezer",
    "name": "volumeUp",
    "type": "Function"
  },
  {
    "desc": "A collection of useful dialog boxes, alerts and panels for user interaction.",
    "name": "hs.dialog",
    "type": "Module"
  },
  {
    "desc": "Displays a simple non-blocking dialog box using `NSAlert` and a hidden `hs.webview` that's automatically destroyed when the alert is closed.",
    "module": "hs.dialog",
    "name": "alert",
    "type": "Function"
  },
  {
    "desc": "Displays a simple dialog box using `NSAlert` that will halt Lua code processing until the alert is closed.",
    "module": "hs.dialog",
    "name": "blockAlert",
    "type": "Function"
  },
  {
    "desc": "Displays a file and/or folder selection dialog box using NSOpenPanel.",
    "module": "hs.dialog",
    "name": "chooseFileOrFolder",
    "type": "Function"
  },
  {
    "desc": "Displays a simple text input dialog box.",
    "module": "hs.dialog",
    "name": "textPrompt",
    "type": "Function"
  },
  {
    "desc": "Displays a simple dialog box using `NSAlert` in a `hs.webview`.",
    "module": "hs.dialog",
    "name": "webviewAlert",
    "type": "Function"
  },
  {
    "desc": "A panel that allows users to select a color.",
    "name": "hs.dialog.color",
    "type": "Module"
  },
  {
    "desc": "Set or display the selected opacity.",
    "module": "hs.dialog.color",
    "name": "alpha",
    "type": "Function"
  },
  {
    "desc": "Sets or removes the callback function for the color panel.",
    "module": "hs.dialog.color",
    "name": "callback",
    "type": "Function"
  },
  {
    "desc": "Set or display the currently selected color in a color wheel.",
    "module": "hs.dialog.color",
    "name": "color",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the callback should be continiously updated when a user drags a color slider or control.",
    "module": "hs.dialog.color",
    "name": "continuous",
    "type": "Function"
  },
  {
    "desc": "Hides the Color Panel.",
    "module": "hs.dialog.color",
    "name": "hide",
    "type": "Function"
  },
  {
    "desc": "Set or display the currently selected color panel mode.",
    "module": "hs.dialog.color",
    "name": "mode",
    "type": "Function"
  },
  {
    "desc": "Shows the Color Panel.",
    "module": "hs.dialog.color",
    "name": "show",
    "type": "Function"
  },
  {
    "desc": "Set or display whether or not the color panel should display an opacity slider.",
    "module": "hs.dialog.color",
    "name": "showsAlpha",
    "type": "Function"
  },
  {
    "desc": "Interact with NSDistributedNotificationCenter",
    "name": "hs.distributednotifications",
    "type": "Module"
  },
  {
    "desc": "Sends a distributed notification",
    "module": "hs.distributednotifications",
    "name": "post",
    "type": "Function"
  },
  {
    "desc": "Creates a new NSDistributedNotificationCenter watcher",
    "module": "hs.distributednotifications",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts a NSDistributedNotificationCenter watcher",
    "module": "hs.distributednotifications",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops a NSDistributedNotificationCenter watcher",
    "module": "hs.distributednotifications",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Create documentation objects for interactive help within Hammerspoon",
    "name": "hs.doc",
    "type": "Module"
  },
  {
    "desc": "Prints the documentation for some part of Hammerspoon's API and Lua 5.3.  This function has also been aliased as `hs.help` and `help` as a shorthand for use within the Hammerspoon console.",
    "module": "hs.doc",
    "name": "help",
    "type": "Function"
  },
  {
    "desc": "Locates the JSON file corresponding to the specified module by searching package.path and package.cpath.",
    "module": "hs.doc",
    "name": "locateJSONFile",
    "type": "Function"
  },
  {
    "desc": "Returns the list of registered JSON files.",
    "module": "hs.doc",
    "name": "registeredFiles",
    "type": "Function"
  },
  {
    "desc": "Register a JSON file for inclusion when Hammerspoon generates internal documentation.",
    "module": "hs.doc",
    "name": "registerJSONFile",
    "type": "Function"
  },
  {
    "desc": "Remove a JSON file from the list of registered files.",
    "module": "hs.doc",
    "name": "unregisterJSONFile",
    "type": "Function"
  },
  {
    "desc": "Validate a JSON file potential inclusion in the Hammerspoon internal documentation.",
    "module": "hs.doc",
    "name": "validateJSONFile",
    "type": "Function"
  },
  {
    "desc": "Builds documentation support files.  Still experimental.",
    "name": "hs.doc.builder",
    "type": "Module"
  },
  {
    "desc": "Generates a documentation table for Hammerspoon modules or Spoon bundles from the source files located in the path(s) provided.",
    "module": "hs.doc.builder",
    "name": "genComments",
    "type": "Function"
  },
  {
    "desc": "Generates a JSON string representation of the documentation source specified. This is the format expected by `hs.doc` and `hs.doc.hsdoc` and is used to provide the built in documentation for Hammerspoon.",
    "module": "hs.doc.builder",
    "name": "genJSON",
    "type": "Function"
  },
  {
    "desc": "Generates the SQL commands required for creating the search index when creating a docset of the documentation.",
    "module": "hs.doc.builder",
    "name": "genSQL",
    "type": "Function"
  },
  {
    "desc": "Manage the internal documentation web server.",
    "name": "hs.doc.hsdocs",
    "type": "Module"
  },
  {
    "desc": "Get or set whether or not the Hammerspoon browser renders output in Dark mode.",
    "module": "hs.doc.hsdocs",
    "name": "browserDarkMode",
    "type": "Function"
  },
  {
    "desc": "Get or set the currently saved initial frame location for the documentation browser.",
    "module": "hs.doc.hsdocs",
    "name": "browserFrame",
    "type": "Function"
  },
  {
    "desc": "Get or set whether or not [hs.doc.hsdocs.help](#help) uses an external browser.",
    "module": "hs.doc.hsdocs",
    "name": "forceExternalBrowser",
    "type": "Function"
  },
  {
    "desc": "Display the documentation for the specified Hammerspoon function, or the Table of Contents for the Hammerspoon documentation in a built-in mini browser.",
    "module": "hs.doc.hsdocs",
    "name": "help",
    "type": "Function"
  },
  {
    "desc": "Get or set the network interface that the Hammerspoon documentation web server will be served on",
    "module": "hs.doc.hsdocs",
    "name": "interface",
    "type": "Function"
  },
  {
    "desc": "Get or set whether or not a module's entity list is displayed as a column on the left of the rendered page.",
    "module": "hs.doc.hsdocs",
    "name": "moduleEntitiesInSidebar",
    "type": "Function"
  },
  {
    "desc": "Get or set the Hammerspoon documentation server HTTP port.",
    "module": "hs.doc.hsdocs",
    "name": "port",
    "type": "Function"
  },
  {
    "desc": "Start the Hammerspoon internal documentation web server.",
    "module": "hs.doc.hsdocs",
    "name": "start",
    "type": "Function"
  },
  {
    "desc": "Stop the Hammerspoon internal documentation web server.",
    "module": "hs.doc.hsdocs",
    "name": "stop",
    "type": "Function"
  },
  {
    "desc": "Get or set whether or not changes in the documentation browsers location and size persist through launches of Hammerspoon.",
    "module": "hs.doc.hsdocs",
    "name": "trackBrowserFrame",
    "type": "Function"
  },
  {
    "desc": "Markdown to HTML and plaintext conversion support used by hs.doc",
    "name": "hs.doc.markdown",
    "type": "Module"
  },
  {
    "desc": "Converts markdown encoded text to html or plaintext.",
    "module": "hs.doc.markdown",
    "name": "convert",
    "type": "Function"
  },
  {
    "desc": "Provides run-time support for generating and including documentation for installed Hammerspoon Spoon bundles.",
    "name": "hs.doc.spoonsupport",
    "type": "Module"
  },
  {
    "desc": "Returns tables describing where spoons are installed and what spoons are currently available.",
    "module": "hs.doc.spoonsupport",
    "name": "findSpoons",
    "type": "Function"
  },
  {
    "desc": "Create the docs.json file for the Spoon bundle at the specified path.",
    "module": "hs.doc.spoonsupport",
    "name": "makeDocsFile",
    "type": "Function"
  },
  {
    "desc": "Creates and updates the included documentation for the installed Spoon bundles if the documentation file is not present or the init.lua file for the Spoon has been modified more recently then the documentation file.",
    "module": "hs.doc.spoonsupport",
    "name": "updateDocFiles",
    "type": "Function"
  },
  {
    "desc": "Control Hammerspoon's dock icon",
    "name": "hs.dockicon",
    "type": "Module"
  },
  {
    "desc": "Bounce Hammerspoon's dock icon",
    "module": "hs.dockicon",
    "name": "bounce",
    "type": "Function"
  },
  {
    "desc": "Hide Hammerspoon's dock icon",
    "module": "hs.dockicon",
    "name": "hide",
    "type": "Function"
  },
  {
    "desc": "Set Hammerspoon's dock icon badge",
    "module": "hs.dockicon",
    "name": "setBadge",
    "type": "Function"
  },
  {
    "desc": "Make Hammerspoon's dock icon visible",
    "module": "hs.dockicon",
    "name": "show",
    "type": "Function"
  },
  {
    "desc": "Determine whether Hammerspoon's dock icon is visible",
    "module": "hs.dockicon",
    "name": "visible",
    "type": "Function"
  },
  {
    "desc": "Primitives for drawing on the screen in various ways",
    "name": "hs.drawing",
    "type": "Module"
  },
  {
    "desc": "Array of window behavior labels for determining how an hs.drawing object is handled in Spaces and Exposé",
    "module": "hs.drawing",
    "name": "windowBehaviors",
    "type": "Constant"
  },
  {
    "desc": "A table of predefined window levels usable with `hs.drawing:setLevel(...)`",
    "module": "hs.drawing",
    "name": "windowLevels",
    "type": "Constant"
  },
  {
    "desc": "Returns a table containing the default font, size, color, and paragraphStyle used by `hs.drawing` for text drawing objects.",
    "module": "hs.drawing",
    "name": "defaultTextStyle",
    "type": "Function"
  },
  {
    "desc": "Tells the OS X window server to pause updating the physical displays for a short while.",
    "module": "hs.drawing",
    "name": "disableScreenUpdates",
    "type": "Function"
  },
  {
    "desc": "Tells the OS X window server to resume updating the physical displays after a previous pause.",
    "module": "hs.drawing",
    "name": "enableScreenUpdates",
    "type": "Function"
  },
  {
    "desc": "Get the size of the rectangle necessary to fully render the text with the specified style so that is will be completely visible.",
    "module": "hs.drawing",
    "name": "getTextDrawingSize",
    "type": "Function"
  },
  {
    "desc": "Creates a new image object with the icon of a given app",
    "module": "hs.drawing",
    "name": "appImage",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new arc object",
    "module": "hs.drawing",
    "name": "arc",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new circle object",
    "module": "hs.drawing",
    "name": "circle",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new elliptical arc object",
    "module": "hs.drawing",
    "name": "ellipticalArc",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new image object",
    "module": "hs.drawing",
    "name": "image",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new line object",
    "module": "hs.drawing",
    "name": "line",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new rectangle object",
    "module": "hs.drawing",
    "name": "rectangle",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new text object",
    "module": "hs.drawing",
    "name": "text",
    "type": "Constructor"
  },
  {
    "desc": "Get the alpha level of the window containing the hs.drawing object.",
    "module": "hs.drawing",
    "name": "alpha",
    "type": "Method"
  },
  {
    "desc": "Returns the current behavior of the hs.drawing object with respect to Spaces and Exposé for the object.",
    "module": "hs.drawing",
    "name": "behavior",
    "type": "Method"
  },
  {
    "desc": "Returns a table of the labels for the current behaviors of the object.",
    "module": "hs.drawing",
    "name": "behaviorAsLabels",
    "type": "Method"
  },
  {
    "desc": "Places the drawing object on top of normal windows",
    "module": "hs.drawing",
    "name": "bringToFront",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not clicking on a drawing with a click callback defined should bring all of Hammerspoon's open windows to the front.",
    "module": "hs.drawing",
    "name": "clickCallbackActivating",
    "type": "Method"
  },
  {
    "desc": "Set the screen area in which the drawing contents are visible.",
    "module": "hs.drawing",
    "name": "clippingRectangle",
    "type": "Method"
  },
  {
    "desc": "Destroys the drawing object",
    "module": "hs.drawing",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Gets the frame of a drawingObject in absolute coordinates",
    "module": "hs.drawing",
    "name": "frame",
    "type": "Method"
  },
  {
    "desc": "Gets the text of a drawing object as an `hs.styledtext` object",
    "module": "hs.drawing",
    "name": "getStyledText",
    "type": "Method"
  },
  {
    "desc": "Hides the drawing object",
    "module": "hs.drawing",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Get or set the alignment of an image that doesn't fully fill the drawing objects frame.",
    "module": "hs.drawing",
    "name": "imageAlignment",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not an animated GIF image should cycle through its animation.",
    "module": "hs.drawing",
    "name": "imageAnimates",
    "type": "Method"
  },
  {
    "desc": "Get or set what type of frame should be around the drawing frame of the image.",
    "module": "hs.drawing",
    "name": "imageFrame",
    "type": "Method"
  },
  {
    "desc": "Get or set how an image is scaled within the frame of a drawing object containing an image.",
    "module": "hs.drawing",
    "name": "imageScaling",
    "type": "Method"
  },
  {
    "desc": "Moves drawing object above drawing object2, or all drawing objects in the same presentation level, if object2 is not provided.",
    "module": "hs.drawing",
    "name": "orderAbove",
    "type": "Method"
  },
  {
    "desc": "Moves drawing object below drawing object2, or all drawing objects in the same presentation level, if object2 is not provided.",
    "module": "hs.drawing",
    "name": "orderBelow",
    "type": "Method"
  },
  {
    "desc": "Rotates an image clockwise around its center",
    "module": "hs.drawing",
    "name": "rotateImage",
    "type": "Method"
  },
  {
    "desc": "Places the drawing object behind normal windows, between the desktop wallpaper and desktop icons",
    "module": "hs.drawing",
    "name": "sendToBack",
    "type": "Method"
  },
  {
    "desc": "Sets the alpha level of the window containing the hs.drawing object.",
    "module": "hs.drawing",
    "name": "setAlpha",
    "type": "Method"
  },
  {
    "desc": "Changes the starting and ending angles for an arc drawing object",
    "module": "hs.drawing",
    "name": "setArcAngles",
    "type": "Method"
  },
  {
    "desc": "Sets the window behaviors represented by the number provided for the window containing the hs.drawing object.",
    "module": "hs.drawing",
    "name": "setBehavior",
    "type": "Method"
  },
  {
    "desc": "Sets the window behaviors based upon the labels specified in the table provided.",
    "module": "hs.drawing",
    "name": "setBehaviorByLabels",
    "type": "Method"
  },
  {
    "desc": "Sets a callback for mouseUp and mouseDown click events",
    "module": "hs.drawing",
    "name": "setClickCallback",
    "type": "Method"
  },
  {
    "desc": "Sets whether or not to fill a drawing object",
    "module": "hs.drawing",
    "name": "setFill",
    "type": "Method"
  },
  {
    "desc": "Sets the fill color of a drawing object",
    "module": "hs.drawing",
    "name": "setFillColor",
    "type": "Method"
  },
  {
    "desc": "Sets the fill gradient of a drawing object",
    "module": "hs.drawing",
    "name": "setFillGradient",
    "type": "Method"
  },
  {
    "desc": "Sets the frame of the drawingObject in absolute coordinates",
    "module": "hs.drawing",
    "name": "setFrame",
    "type": "Method"
  },
  {
    "desc": "Sets the image of a drawing object",
    "module": "hs.drawing",
    "name": "setImage",
    "type": "Method"
  },
  {
    "desc": "Sets the image of a drawing object from an ASCII representation",
    "module": "hs.drawing",
    "name": "setImageASCII",
    "type": "Method"
  },
  {
    "desc": "Sets the image path of a drawing object",
    "module": "hs.drawing",
    "name": "setImageFromPath",
    "type": "Method"
  },
  {
    "desc": "Sets the window level more precisely than sendToBack and bringToFront.",
    "module": "hs.drawing",
    "name": "setLevel",
    "type": "Method"
  },
  {
    "desc": "Sets the radii of the corners of a rectangle drawing object",
    "module": "hs.drawing",
    "name": "setRoundedRectRadii",
    "type": "Method"
  },
  {
    "desc": "Resizes a drawing object",
    "module": "hs.drawing",
    "name": "setSize",
    "type": "Method"
  },
  {
    "desc": "Sets whether or not to stroke a drawing object",
    "module": "hs.drawing",
    "name": "setStroke",
    "type": "Method"
  },
  {
    "desc": "Sets the stroke color of a drawing object",
    "module": "hs.drawing",
    "name": "setStrokeColor",
    "type": "Method"
  },
  {
    "desc": "Sets the stroke width of a drawing object",
    "module": "hs.drawing",
    "name": "setStrokeWidth",
    "type": "Method"
  },
  {
    "desc": "Sets the text of a drawing object from an `hs.styledtext` object",
    "module": "hs.drawing",
    "name": "setStyledText",
    "type": "Method"
  },
  {
    "desc": "Sets the text of a drawing object",
    "module": "hs.drawing",
    "name": "setText",
    "type": "Method"
  },
  {
    "desc": "Sets the default text color for a drawing object",
    "module": "hs.drawing",
    "name": "setTextColor",
    "type": "Method"
  },
  {
    "desc": "Sets the default font for a drawing object",
    "module": "hs.drawing",
    "name": "setTextFont",
    "type": "Method"
  },
  {
    "desc": "Sets the default text size for a drawing object",
    "module": "hs.drawing",
    "name": "setTextSize",
    "type": "Method"
  },
  {
    "desc": "Sets some simple style parameters for the entire text of a drawing object.  For more control over style including having multiple styles within a single text object, use `hs.styledtext` and `hs.drawing:setStyledText` instead.",
    "module": "hs.drawing",
    "name": "setTextStyle",
    "type": "Method"
  },
  {
    "desc": "Moves the drawingObject to a given point",
    "module": "hs.drawing",
    "name": "setTopLeft",
    "type": "Method"
  },
  {
    "desc": "Displays the drawing object",
    "module": "hs.drawing",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Gets or sets whether or not the drawing object should be rendered by the view or by Core Animation.",
    "module": "hs.drawing",
    "name": "wantsLayer",
    "type": "Method"
  },
  {
    "desc": "Additions to hs.drawing which provide access to the system color lists and a wider variety of ways to represent color within Hammerspoon.",
    "name": "hs.drawing.color",
    "type": "Module"
  },
  {
    "desc": "This table contains this list of defined color collections provided by the `hs.drawing.color` module.  Collections differ from the system color lists in that you can modify the color values their members contain by modifying the table at `hs.drawing.color.<collection>.<color>` and future references to that color will reflect the new changes, thus allowing you to customize the palettes for your installation.",
    "module": "hs.drawing.color",
    "name": "definedCollections",
    "type": "Constant"
  },
  {
    "desc": "A collection of colors representing the ANSI Terminal color sequences.  The color definitions are based upon code found at https://github.com/balthamos/geektool-3 in the /NerdTool/classes/ANSIEscapeHelper.m file.",
    "module": "hs.drawing.color",
    "name": "ansiTerminalColors",
    "type": "Variable"
  },
  {
    "desc": "This table contains a collection of various useful pre-defined colors:",
    "module": "hs.drawing.color",
    "name": "hammerspoon",
    "type": "Variable"
  },
  {
    "desc": "A collection of colors representing the X11 color names as defined at  https://en.wikipedia.org/wiki/Web_colors#X11_color_names (names in lowercase)",
    "module": "hs.drawing.color",
    "name": "x11",
    "type": "Variable"
  },
  {
    "desc": "Returns a table containing the HSB representation of the specified color.",
    "module": "hs.drawing.color",
    "name": "asHSB",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing the RGB representation of the specified color.",
    "module": "hs.drawing.color",
    "name": "asRGB",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing the colors for the specified system color list or hs.drawing.color collection.",
    "module": "hs.drawing.color",
    "name": "colorsFor",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing the system color lists and hs.drawing.color collections with their defined colors.",
    "module": "hs.drawing.color",
    "name": "lists",
    "type": "Function"
  },
  {
    "desc": "Tap into input events (mouse, keyboard, trackpad) for observation and possibly overriding them",
    "name": "hs.eventtap",
    "type": "Module"
  },
  {
    "desc": "Returns a table containing the current key modifiers being pressed or in effect *at this instant* for the keyboard most recently used.",
    "module": "hs.eventtap",
    "name": "checkKeyboardModifiers",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing the current mouse buttons being pressed *at this instant*.",
    "module": "hs.eventtap",
    "name": "checkMouseButtons",
    "type": "Function"
  },
  {
    "desc": "Returns the system-wide setting for the delay between two clicks, to register a double click event",
    "module": "hs.eventtap",
    "name": "doubleClickInterval",
    "type": "Function"
  },
  {
    "desc": "Returns the system-wide setting for the delay before keyboard repeat events begin",
    "module": "hs.eventtap",
    "name": "keyRepeatDelay",
    "type": "Function"
  },
  {
    "desc": "Returns the system-wide setting for the interval between repeated keyboard events",
    "module": "hs.eventtap",
    "name": "keyRepeatInterval",
    "type": "Function"
  },
  {
    "desc": "Generates and emits a single keystroke event pair for the supplied keyboard modifiers and character",
    "module": "hs.eventtap",
    "name": "keyStroke",
    "type": "Function"
  },
  {
    "desc": "Generates and emits keystroke events for the supplied text",
    "module": "hs.eventtap",
    "name": "keyStrokes",
    "type": "Function"
  },
  {
    "desc": "Generates a left mouse click event at the specified point",
    "module": "hs.eventtap",
    "name": "leftClick",
    "type": "Function"
  },
  {
    "desc": "Generates a middle mouse click event at the specified point",
    "module": "hs.eventtap",
    "name": "middleClick",
    "type": "Function"
  },
  {
    "desc": "Generates an \"other\" mouse click event at the specified point",
    "module": "hs.eventtap",
    "name": "otherClick",
    "type": "Function"
  },
  {
    "desc": "Generates a right mouse click event at the specified point",
    "module": "hs.eventtap",
    "name": "rightClick",
    "type": "Function"
  },
  {
    "desc": "Generates and emits a scroll wheel event",
    "module": "hs.eventtap",
    "name": "scrollWheel",
    "type": "Function"
  },
  {
    "desc": "Create a new event tap object",
    "module": "hs.eventtap",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Determine whether or not an event tap object is enabled.",
    "module": "hs.eventtap",
    "name": "isEnabled",
    "type": "Method"
  },
  {
    "desc": "Starts an event tap",
    "module": "hs.eventtap",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops an event tap",
    "module": "hs.eventtap",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Create, modify and inspect events for `hs.eventtap`",
    "name": "hs.eventtap.event",
    "type": "Module"
  },
  {
    "desc": "A table containing property types for use with `hs.eventtap.event:getProperty()` and `hs.eventtap.event:setProperty()`.  The table supports forward (label to number) and reverse (number to label) lookups to increase its flexibility.",
    "module": "hs.eventtap.event",
    "name": "properties",
    "type": "Constant"
  },
  {
    "desc": "A table containing key-value pairs describing the raw modifier flags which can be manipulated with [hs.eventtap.event:rawFlags](#rawFlags).",
    "module": "hs.eventtap.event",
    "name": "rawFlagMasks",
    "type": "Constant"
  },
  {
    "desc": "A table containing event types to be used with `hs.eventtap.new(...)` and returned by `hs.eventtap.event:type()`.  The table supports forward (label to number) and reverse (number to label) lookups to increase its flexibility.",
    "module": "hs.eventtap.event",
    "name": "types",
    "type": "Constant"
  },
  {
    "desc": "Generates a table containing the keydown and keyup events to generate the keystroke with the specified modifiers.",
    "module": "hs.eventtap.event",
    "name": "newKeyEventSequence",
    "type": "Function"
  },
  {
    "desc": "Duplicates an `hs.eventtap.event` event for further modification or injection",
    "module": "hs.eventtap.event",
    "name": "copy",
    "type": "Constructor"
  },
  {
    "desc": "Creates a blank event.  You will need to set its type with [hs.eventtap.event:setType](#setType)",
    "module": "hs.eventtap.event",
    "name": "newEvent",
    "type": "Constructor"
  },
  {
    "desc": "Creates an event from the data encoded in the string provided.",
    "module": "hs.eventtap.event",
    "name": "newEventFromData",
    "type": "Constructor"
  },
  {
    "desc": "Creates a keyboard event",
    "module": "hs.eventtap.event",
    "name": "newKeyEvent",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new mouse event",
    "module": "hs.eventtap.event",
    "name": "newMouseEvent",
    "type": "Constructor"
  },
  {
    "desc": "Creates a scroll wheel event",
    "module": "hs.eventtap.event",
    "name": "newScrollEvent",
    "type": "Constructor"
  },
  {
    "desc": "Creates a keyboard event for special keys (e.g. media playback)",
    "module": "hs.eventtap.event",
    "name": "newSystemKeyEvent",
    "type": "Constructor"
  },
  {
    "desc": "Returns a string containing binary data representing the event.  This can be used to record events for later use.",
    "module": "hs.eventtap.event",
    "name": "asData",
    "type": "Method"
  },
  {
    "desc": "Gets the state of a mouse button in the event",
    "module": "hs.eventtap.event",
    "name": "getButtonState",
    "type": "Method"
  },
  {
    "desc": "Returns the Unicode character, if any, represented by a keyDown or keyUp event.",
    "module": "hs.eventtap.event",
    "name": "getCharacters",
    "type": "Method"
  },
  {
    "desc": "Gets the keyboard modifiers of an event",
    "module": "hs.eventtap.event",
    "name": "getFlags",
    "type": "Method"
  },
  {
    "desc": "Gets the raw keycode for the event",
    "module": "hs.eventtap.event",
    "name": "getKeyCode",
    "type": "Method"
  },
  {
    "desc": "Gets a property of the event",
    "module": "hs.eventtap.event",
    "name": "getProperty",
    "type": "Method"
  },
  {
    "desc": "Returns raw data about the event",
    "module": "hs.eventtap.event",
    "name": "getRawEventData",
    "type": "Method"
  },
  {
    "desc": "Gets the type of the event",
    "module": "hs.eventtap.event",
    "name": "getType",
    "type": "Method"
  },
  {
    "desc": "Get or set the current mouse pointer location as defined for the event.",
    "module": "hs.eventtap.event",
    "name": "location",
    "type": "Method"
  },
  {
    "desc": "Posts the event to the OS - i.e. emits the keyboard/mouse input defined by the event",
    "module": "hs.eventtap.event",
    "name": "post",
    "type": "Method"
  },
  {
    "desc": "Experimental method to get or set the modifier flags for an event directly.",
    "module": "hs.eventtap.event",
    "name": "rawFlags",
    "type": "Method"
  },
  {
    "desc": "Sets the keyboard modifiers of an event",
    "module": "hs.eventtap.event",
    "name": "setFlags",
    "type": "Method"
  },
  {
    "desc": "Sets the raw keycode for the event",
    "module": "hs.eventtap.event",
    "name": "setKeyCode",
    "type": "Method"
  },
  {
    "desc": "Sets a property of the event",
    "module": "hs.eventtap.event",
    "name": "setProperty",
    "type": "Method"
  },
  {
    "desc": "Set the type for this event.",
    "module": "hs.eventtap.event",
    "name": "setType",
    "type": "Method"
  },
  {
    "desc": "Returns the special key and its state if the event is a NSSystemDefined event of subtype AUX_CONTROL_BUTTONS (special-key pressed)",
    "module": "hs.eventtap.event",
    "name": "systemKey",
    "type": "Method"
  },
  {
    "desc": "Get or set the timestamp of the event.",
    "module": "hs.eventtap.event",
    "name": "timestamp",
    "type": "Method"
  },
  {
    "desc": "Keyboard-driven expose replacement/enhancement",
    "name": "hs.expose",
    "type": "Module"
  },
  {
    "desc": "Allows customization of the expose behaviour and user interface",
    "module": "hs.expose",
    "name": "ui",
    "type": "Variable"
  },
  {
    "desc": "Creates a new hs.expose instance; it can use a windowfilter to determine which windows to show",
    "module": "hs.expose",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Hides the expose, if visible, and exits the modal mode.",
    "module": "hs.expose",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Shows an expose-like screen with modal keyboard hints for switching to, closing or minimizing/unminimizing windows.",
    "module": "hs.expose",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Toggles the expose - see `hs.expose:show()` and `hs.expose:hide()`",
    "module": "hs.expose",
    "name": "toggleShow",
    "type": "Method"
  },
  {
    "desc": "Functional programming utility functions",
    "name": "hs.fnutils",
    "type": "Module"
  },
  {
    "desc": "Join two tables together",
    "module": "hs.fnutils",
    "name": "concat",
    "type": "Function"
  },
  {
    "desc": "Determine if a table contains a given object",
    "module": "hs.fnutils",
    "name": "contains",
    "type": "Function"
  },
  {
    "desc": "Copy a table using `pairs()`",
    "module": "hs.fnutils",
    "name": "copy",
    "type": "Function"
  },
  {
    "desc": "Execute a function across a table (in arbitrary order), and discard the results",
    "module": "hs.fnutils",
    "name": "each",
    "type": "Function"
  },
  {
    "desc": "Returns true if the application of fn on every entry in table is true.",
    "module": "hs.fnutils",
    "name": "every",
    "type": "Function"
  },
  {
    "desc": "Filter a table by running a predicate function on its elements (in arbitrary order)",
    "module": "hs.fnutils",
    "name": "filter",
    "type": "Function"
  },
  {
    "desc": "Execute a function across a table and return the first element where that function returns true",
    "module": "hs.fnutils",
    "name": "find",
    "type": "Function"
  },
  {
    "desc": "Execute a function across a list-like table in order, and discard the results",
    "module": "hs.fnutils",
    "name": "ieach",
    "type": "Function"
  },
  {
    "desc": "Filter a list-like table by running a predicate function on its elements in order",
    "module": "hs.fnutils",
    "name": "ifilter",
    "type": "Function"
  },
  {
    "desc": "Execute a function across a list-like table in order, and collect the results",
    "module": "hs.fnutils",
    "name": "imap",
    "type": "Function"
  },
  {
    "desc": "Determine the location in a table of a given object",
    "module": "hs.fnutils",
    "name": "indexOf",
    "type": "Function"
  },
  {
    "desc": "Execute a function across a table (in arbitrary order) and collect the results",
    "module": "hs.fnutils",
    "name": "map",
    "type": "Function"
  },
  {
    "desc": "Execute, across a table, a function that outputs tables, and concatenate all of those tables together",
    "module": "hs.fnutils",
    "name": "mapCat",
    "type": "Function"
  },
  {
    "desc": "Reduce a table to a single element, using a function",
    "module": "hs.fnutils",
    "name": "reduce",
    "type": "Function"
  },
  {
    "desc": "Returns true if the application of fn on entries in table are true for at least one of the members.",
    "module": "hs.fnutils",
    "name": "some",
    "type": "Function"
  },
  {
    "desc": "Convert string to an array of strings, breaking at the specified separator.",
    "module": "hs.fnutils",
    "name": "split",
    "type": "Function"
  },
  {
    "desc": "Creates a function that repeatedly iterates a table",
    "module": "hs.fnutils",
    "name": "cycle",
    "type": "Constructor"
  },
  {
    "desc": "Returns a new function which takes the provided arguments and pre-applies them as the initial arguments to the provided function.  When the new function is later invoked with additional arguments, they are appended to the end of the initial list given and the complete list of arguments is finally passed into the provided function and its result returned.",
    "module": "hs.fnutils",
    "name": "partial",
    "type": "Constructor"
  },
  {
    "desc": "Creates a function that will collect the result of a series of functions into a table",
    "module": "hs.fnutils",
    "name": "sequence",
    "type": "Constructor"
  },
  {
    "desc": "Iterator for retrieving elements from a table of key-value pairs in the order of the keys.",
    "module": "hs.fnutils",
    "name": "sortByKeys",
    "type": "Constructor"
  },
  {
    "desc": "Iterator for retrieving elements from a table of key-value pairs in the order of the values.",
    "module": "hs.fnutils",
    "name": "sortByKeyValues",
    "type": "Constructor"
  },
  {
    "desc": "Access/inspect the filesystem",
    "name": "hs.fs",
    "type": "Module"
  },
  {
    "desc": "Gets the attributes of a file",
    "module": "hs.fs",
    "name": "attributes",
    "type": "Function"
  },
  {
    "desc": "Changes the current working directory to the given path.",
    "module": "hs.fs",
    "name": "chdir",
    "type": "Function"
  },
  {
    "desc": "Gets the current working directory",
    "module": "hs.fs",
    "name": "currentDir",
    "type": "Function"
  },
  {
    "desc": "Creates an iterator for walking a filesystem path",
    "module": "hs.fs",
    "name": "dir",
    "type": "Function"
  },
  {
    "desc": "Returns the display name of the file or directory at a specified path.",
    "module": "hs.fs",
    "name": "displayName",
    "type": "Function"
  },
  {
    "desc": "Returns the Uniform Type Identifier for the file location specified.",
    "module": "hs.fs",
    "name": "fileUTI",
    "type": "Function"
  },
  {
    "desc": "Returns the fileUTI's equivalent form in an alternate type specification format.",
    "module": "hs.fs",
    "name": "fileUTIalternate",
    "type": "Function"
  },
  {
    "desc": "Get the Finder comments for the file or directory at the specified path",
    "module": "hs.fs",
    "name": "getFinderComments",
    "type": "Function"
  },
  {
    "desc": "Creates a link",
    "module": "hs.fs",
    "name": "link",
    "type": "Function"
  },
  {
    "desc": "Locks a file, or part of it",
    "module": "hs.fs",
    "name": "lock",
    "type": "Function"
  },
  {
    "desc": "Locks a directory",
    "module": "hs.fs",
    "name": "lockDir",
    "type": "Function"
  },
  {
    "desc": "Creates a new directory",
    "module": "hs.fs",
    "name": "mkdir",
    "type": "Function"
  },
  {
    "desc": "Gets the absolute path of a given path",
    "module": "hs.fs",
    "name": "pathToAbsolute",
    "type": "Function"
  },
  {
    "desc": "Removes an existing directory",
    "module": "hs.fs",
    "name": "rmdir",
    "type": "Function"
  },
  {
    "desc": "Set the Finder comments for the file or directory at the specified path to the comment specified",
    "module": "hs.fs",
    "name": "setFinderComments",
    "type": "Function"
  },
  {
    "desc": "Gets the attributes of a symbolic link",
    "module": "hs.fs",
    "name": "symlinkAttributes",
    "type": "Function"
  },
  {
    "desc": "Adds one or more tags to the Finder tags of a file",
    "module": "hs.fs",
    "name": "tagsAdd",
    "type": "Function"
  },
  {
    "desc": "Gets the Finder tags of a file",
    "module": "hs.fs",
    "name": "tagsGet",
    "type": "Function"
  },
  {
    "desc": "Removes Finder tags from a file",
    "module": "hs.fs",
    "name": "tagsRemove",
    "type": "Function"
  },
  {
    "desc": "Sets the Finder tags of a file, removing any that are already set",
    "module": "hs.fs",
    "name": "tagsSet",
    "type": "Function"
  },
  {
    "desc": "Returns the path of the temporary directory for the current user.",
    "module": "hs.fs",
    "name": "temporaryDirectory",
    "type": "Function"
  },
  {
    "desc": "Updates the access and modification times of a file",
    "module": "hs.fs",
    "name": "touch",
    "type": "Function"
  },
  {
    "desc": "Unlocks a file or a part of it.",
    "module": "hs.fs",
    "name": "unlock",
    "type": "Function"
  },
  {
    "desc": "Interact with OS X filesystem volumes",
    "name": "hs.fs.volume",
    "type": "Module"
  },
  {
    "desc": "A volume was mounted",
    "module": "hs.fs.volume",
    "name": "didMount",
    "type": "Constant"
  },
  {
    "desc": "A volume changed either its name or mountpoint (or more likely, both)",
    "module": "hs.fs.volume",
    "name": "didRename",
    "type": "Constant"
  },
  {
    "desc": "A volume was unmounted",
    "module": "hs.fs.volume",
    "name": "didUnmount",
    "type": "Constant"
  },
  {
    "desc": "A volume is about to be unmounted",
    "module": "hs.fs.volume",
    "name": "willUnmount",
    "type": "Constant"
  },
  {
    "desc": "Returns a table of information about disk volumes attached to the system",
    "module": "hs.fs.volume",
    "name": "allVolumes",
    "type": "Function"
  },
  {
    "desc": "Unmounts and ejects a volume",
    "module": "hs.fs.volume",
    "name": "eject",
    "type": "Function"
  },
  {
    "desc": "Creates a watcher object for volume events",
    "module": "hs.fs.volume",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts the volume watcher",
    "module": "hs.fs.volume",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the volume watcher",
    "module": "hs.fs.volume",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Get and manipulate extended attributes for files and directories",
    "name": "hs.fs.xattr",
    "type": "Module"
  },
  {
    "desc": "Set the extended attribute to the value provided for the path specified.",
    "module": "hs.fs.xattr",
    "name": "get",
    "type": "Function"
  },
  {
    "desc": "A wrapper to [hs.fs.xattr.get](#get) which returns non UTF-8 data as a hexadecimal dump provided by `hs.utf8.hexDump`.",
    "module": "hs.fs.xattr",
    "name": "getHumanReadable",
    "type": "Function"
  },
  {
    "desc": "Returns a list of the extended attributes currently defined for the specified file or directory",
    "module": "hs.fs.xattr",
    "name": "list",
    "type": "Function"
  },
  {
    "desc": "Removes the specified extended attribute from the file or directory at the path specified.",
    "module": "hs.fs.xattr",
    "name": "remove",
    "type": "Function"
  },
  {
    "desc": "Set the extended attribute to the value provided for the path specified.",
    "module": "hs.fs.xattr",
    "name": "set",
    "type": "Function"
  },
  {
    "desc": "Utility object to represent points, sizes and rects in a bidimensional plane",
    "name": "hs.geometry",
    "type": "Module"
  },
  {
    "desc": "Creates a copy of an hs.geometry object",
    "module": "hs.geometry",
    "name": "copy",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new hs.geometry object",
    "module": "hs.geometry",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Convenience function for creating a point object",
    "module": "hs.geometry",
    "name": "point",
    "type": "Constructor"
  },
  {
    "desc": "Convenience function for creating a rect-table",
    "module": "hs.geometry",
    "name": "rect",
    "type": "Constructor"
  },
  {
    "desc": "Convenience function for creating a size object",
    "module": "hs.geometry",
    "name": "size",
    "type": "Constructor"
  },
  {
    "desc": "A number representing the area of this rect or size; changing it will scale the rect/size - see `hs.geometry:scale()`",
    "module": "hs.geometry",
    "name": "area",
    "type": "Field"
  },
  {
    "desc": "A number representing the aspect ratio of this rect or size; changing it will reshape the rect/size, keeping its area and center constant",
    "module": "hs.geometry",
    "name": "aspect",
    "type": "Field"
  },
  {
    "desc": "Alias for `x2y2`",
    "module": "hs.geometry",
    "name": "bottomright",
    "type": "Field"
  },
  {
    "desc": "A point representing the geometric center of this rect or the midpoint of this vector2; changing it will move the rect/vector accordingly",
    "module": "hs.geometry",
    "name": "center",
    "type": "Field"
  },
  {
    "desc": "The height of this rect or size; changing it will keep the rect's x,y corner constant",
    "module": "hs.geometry",
    "name": "h",
    "type": "Field"
  },
  {
    "desc": "A number representing the length of the diagonal of this rect, or the length of this vector2; changing it will scale the rect/vector - see `hs.geometry:scale()`",
    "module": "hs.geometry",
    "name": "length",
    "type": "Field"
  },
  {
    "desc": "The `\"X,Y/WxH\"` string for this hs.geometry object (*reduced precision*); useful e.g. for logging",
    "module": "hs.geometry",
    "name": "string",
    "type": "Field"
  },
  {
    "desc": "The `{x=X,y=Y,w=W,h=H}` table for this hs.geometry object; useful e.g. for serialization/deserialization",
    "module": "hs.geometry",
    "name": "table",
    "type": "Field"
  },
  {
    "desc": "Alias for `xy`",
    "module": "hs.geometry",
    "name": "topleft",
    "type": "Field"
  },
  {
    "desc": "The width of this rect or size; changing it will keep the rect's x,y corner constant",
    "module": "hs.geometry",
    "name": "w",
    "type": "Field"
  },
  {
    "desc": "The size component for this hs.geometry object; setting this to a new size will keep the rect's x,y corner constant",
    "module": "hs.geometry",
    "name": "wh",
    "type": "Field"
  },
  {
    "desc": "The x coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height",
    "module": "hs.geometry",
    "name": "x",
    "type": "Field"
  },
  {
    "desc": "Alias for `x`",
    "module": "hs.geometry",
    "name": "x1",
    "type": "Field"
  },
  {
    "desc": "The x coordinate for the second corner of this rect; changing it will affect the rect's width",
    "module": "hs.geometry",
    "name": "x2",
    "type": "Field"
  },
  {
    "desc": "The point denoting the other corner of this hs.geometry object; setting this to a new point will change the rect's width and height",
    "module": "hs.geometry",
    "name": "x2y2",
    "type": "Field"
  },
  {
    "desc": "The point component for this hs.geometry object; setting this to a new point will move the rect but keep the same width and height",
    "module": "hs.geometry",
    "name": "xy",
    "type": "Field"
  },
  {
    "desc": "The y coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height",
    "module": "hs.geometry",
    "name": "y",
    "type": "Field"
  },
  {
    "desc": "Alias for `y`",
    "module": "hs.geometry",
    "name": "y1",
    "type": "Field"
  },
  {
    "desc": "The y coordinate for the second corner of this rect; changing it will affect the rect's height",
    "module": "hs.geometry",
    "name": "y2",
    "type": "Field"
  },
  {
    "desc": "Returns the angle between the positive x axis and this vector2",
    "module": "hs.geometry",
    "name": "angle",
    "type": "Method"
  },
  {
    "desc": "Returns the angle between the positive x axis and the vector connecting this point or rect's center to another point or rect's center",
    "module": "hs.geometry",
    "name": "angleTo",
    "type": "Method"
  },
  {
    "desc": "Finds the distance between this point or rect's center and another point or rect's center",
    "module": "hs.geometry",
    "name": "distance",
    "type": "Method"
  },
  {
    "desc": "Checks if two geometry objects are equal",
    "module": "hs.geometry",
    "name": "equals",
    "type": "Method"
  },
  {
    "desc": "Ensure this rect is fully inside `bounds`, by scaling it down if it's larger (preserving its aspect ratio) and moving it if necessary",
    "module": "hs.geometry",
    "name": "fit",
    "type": "Method"
  },
  {
    "desc": "Truncates all coordinates in this object to integers",
    "module": "hs.geometry",
    "name": "floor",
    "type": "Method"
  },
  {
    "desc": "Converts a unit rect within a given frame into a rect",
    "module": "hs.geometry",
    "name": "fromUnitRect",
    "type": "Method"
  },
  {
    "desc": "Checks if this hs.geometry object lies fully inside a given rect",
    "module": "hs.geometry",
    "name": "inside",
    "type": "Method"
  },
  {
    "desc": "Returns the intersection rect between this rect and another rect",
    "module": "hs.geometry",
    "name": "intersect",
    "type": "Method"
  },
  {
    "desc": "Moves this point/rect",
    "module": "hs.geometry",
    "name": "move",
    "type": "Method"
  },
  {
    "desc": "Normalizes this vector2",
    "module": "hs.geometry",
    "name": "normalize",
    "type": "Method"
  },
  {
    "desc": "Rotates a point around another point N times",
    "module": "hs.geometry",
    "name": "rotateCCW",
    "type": "Method"
  },
  {
    "desc": "Scales this vector2/size, or this rect *keeping its center constant*",
    "module": "hs.geometry",
    "name": "scale",
    "type": "Method"
  },
  {
    "desc": "Converts a rect into its unit rect within a given frame",
    "module": "hs.geometry",
    "name": "toUnitRect",
    "type": "Method"
  },
  {
    "desc": "Returns the type of an hs.geometry object",
    "module": "hs.geometry",
    "name": "type",
    "type": "Method"
  },
  {
    "desc": "Returns the smallest rect that encloses both this rect and another rect",
    "module": "hs.geometry",
    "name": "union",
    "type": "Method"
  },
  {
    "desc": "Returns the vector2 from this point or rect's center to another point or rect's center",
    "module": "hs.geometry",
    "name": "vector",
    "type": "Method"
  },
  {
    "desc": "Move/resize windows within a grid",
    "name": "hs.grid",
    "type": "Module"
  },
  {
    "desc": "A bidimensional array (table of tables of strings) holding the keyboard hints (as per `hs.keycodes.map`) to be used for the interactive resizing interface.",
    "module": "hs.grid",
    "name": "HINTS",
    "type": "Variable"
  },
  {
    "desc": "Allows customization of the modal resizing grid user interface",
    "module": "hs.grid",
    "name": "ui",
    "type": "Variable"
  },
  {
    "desc": "Calls a user specified function to adjust a window's cell",
    "module": "hs.grid",
    "name": "adjustWindow",
    "type": "Function"
  },
  {
    "desc": "Gets the cell describing a window",
    "module": "hs.grid",
    "name": "get",
    "type": "Function"
  },
  {
    "desc": "Gets the `hs.geometry` rect for a cell on a particular screen",
    "module": "hs.grid",
    "name": "getCell",
    "type": "Function"
  },
  {
    "desc": "Gets the defined grid size for a given screen or screen resolution",
    "module": "hs.grid",
    "name": "getGrid",
    "type": "Function"
  },
  {
    "desc": "Gets the defined grid frame for a given screen or screen resolution.",
    "module": "hs.grid",
    "name": "getGridFrame",
    "type": "Function"
  },
  {
    "desc": "Hides the grid, if visible, and exits the modal resizing mode.",
    "module": "hs.grid",
    "name": "hide",
    "type": "Function"
  },
  {
    "desc": "Moves and resizes a window to fill the entire grid",
    "module": "hs.grid",
    "name": "maximizeWindow",
    "type": "Function"
  },
  {
    "desc": "Moves a window one grid cell down the screen, or onto the adjacent screen's grid when necessary",
    "module": "hs.grid",
    "name": "pushWindowDown",
    "type": "Function"
  },
  {
    "desc": "Moves a window one grid cell to the left, or onto the adjacent screen's grid when necessary",
    "module": "hs.grid",
    "name": "pushWindowLeft",
    "type": "Function"
  },
  {
    "desc": "Moves a window one cell to the right, or onto the adjacent screen's grid when necessary",
    "module": "hs.grid",
    "name": "pushWindowRight",
    "type": "Function"
  },
  {
    "desc": "Moves a window one grid cell up the screen, or onto the adjacent screen's grid when necessary",
    "module": "hs.grid",
    "name": "pushWindowUp",
    "type": "Function"
  },
  {
    "desc": "Resizes a window so its bottom edge moves one grid cell higher",
    "module": "hs.grid",
    "name": "resizeWindowShorter",
    "type": "Function"
  },
  {
    "desc": "Resizes a window so its bottom edge moves one grid cell lower",
    "module": "hs.grid",
    "name": "resizeWindowTaller",
    "type": "Function"
  },
  {
    "desc": "Resizes a window to be one cell thinner",
    "module": "hs.grid",
    "name": "resizeWindowThinner",
    "type": "Function"
  },
  {
    "desc": "Resizes a window to be one cell wider",
    "module": "hs.grid",
    "name": "resizeWindowWider",
    "type": "Function"
  },
  {
    "desc": "Sets the cell for a window on a particular screen",
    "module": "hs.grid",
    "name": "set",
    "type": "Function"
  },
  {
    "desc": "Sets the grid size for a given screen or screen resolution",
    "module": "hs.grid",
    "name": "setGrid",
    "type": "Function"
  },
  {
    "desc": "Sets the margins between windows",
    "module": "hs.grid",
    "name": "setMargins",
    "type": "Function"
  },
  {
    "desc": "Shows the grid and starts the modal interactive resizing process for the focused or frontmost window.",
    "module": "hs.grid",
    "name": "show",
    "type": "Function"
  },
  {
    "desc": "Snaps a window into alignment with the nearest grid lines",
    "module": "hs.grid",
    "name": "snap",
    "type": "Function"
  },
  {
    "desc": "Toggles the grid and modal resizing mode - see `hs.grid.show()` and `hs.grid.hide()`",
    "module": "hs.grid",
    "name": "toggleShow",
    "type": "Function"
  },
  {
    "desc": "Various hashing algorithms",
    "name": "hs.hash",
    "type": "Module"
  },
  {
    "desc": "Calculates an HMAC using a key and an MD5 hash",
    "module": "hs.hash",
    "name": "hmacMD5",
    "type": "Function"
  },
  {
    "desc": "Calculates an HMAC using a key and a SHA1 hash",
    "module": "hs.hash",
    "name": "hmacSHA1",
    "type": "Function"
  },
  {
    "desc": "Calculates an HMAC using a key and a SHA256 hash",
    "module": "hs.hash",
    "name": "hmacSHA256",
    "type": "Function"
  },
  {
    "desc": "Calculates an HMAC using a key and a SHA512 hash",
    "module": "hs.hash",
    "name": "hmacSHA512",
    "type": "Function"
  },
  {
    "desc": "Calculates an MD5 hash",
    "module": "hs.hash",
    "name": "MD5",
    "type": "Function"
  },
  {
    "desc": "Calculates an SHA1 hash",
    "module": "hs.hash",
    "name": "SHA1",
    "type": "Function"
  },
  {
    "desc": "Calculates an SHA256 hash",
    "module": "hs.hash",
    "name": "SHA256",
    "type": "Function"
  },
  {
    "desc": "Calculates an SHA512 hash",
    "module": "hs.hash",
    "name": "SHA512",
    "type": "Function"
  },
  {
    "desc": "Switch focus with a transient per-application keyboard shortcut",
    "name": "hs.hints",
    "type": "Module"
  },
  {
    "desc": "A fully specified family-face name, preferrably the PostScript name, such as Helvetica-BoldOblique or Times-Roman. (The Font Book app displays PostScript names of fonts in the Font Info panel.)",
    "module": "hs.hints",
    "name": "fontName",
    "type": "Variable"
  },
  {
    "desc": "The size of font that should be used. A value of 0.0 will use the default size.",
    "module": "hs.hints",
    "name": "fontSize",
    "type": "Variable"
  },
  {
    "desc": "This controls the set of characters that will be used for window hints. They must be characters found in hs.keycodes.map",
    "module": "hs.hints",
    "name": "hintChars",
    "type": "Variable"
  },
  {
    "desc": "If there are less than or equal to this many windows on screen their titles will be shown in the hints.",
    "module": "hs.hints",
    "name": "showTitleThresh",
    "type": "Variable"
  },
  {
    "desc": "If this is set to \"vimperator\", every window hint starts with the first character",
    "module": "hs.hints",
    "name": "style",
    "type": "Variable"
  },
  {
    "desc": "If the title is longer than maxSize, the string is truncated, -1 to disable, valid value is >= 6",
    "module": "hs.hints",
    "name": "titleMaxSize",
    "type": "Variable"
  },
  {
    "desc": "Displays a keyboard hint for switching focus to each window",
    "module": "hs.hints",
    "name": "windowHints",
    "type": "Function"
  },
  {
    "desc": "Inspect information about the machine Hammerspoon is running on",
    "name": "hs.host",
    "type": "Module"
  },
  {
    "desc": "Gets a list of network addresses for the current machine",
    "module": "hs.host",
    "name": "addresses",
    "type": "Function"
  },
  {
    "desc": "Query CPU usage statistics for a given time interval using [hs.host.cpuUsageTicks](#cpuUsageTicks) and return the results as percentages.",
    "module": "hs.host",
    "name": "cpuUsage",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing the current cpu usage information for the system in `ticks` since the most recent system boot.",
    "module": "hs.host",
    "name": "cpuUsageTicks",
    "type": "Function"
  },
  {
    "desc": "Returns a newly generated global unique identifier as a string",
    "module": "hs.host",
    "name": "globallyUniqueString",
    "type": "Function"
  },
  {
    "desc": "Returns the model and VRAM size for the installed GPUs.",
    "module": "hs.host",
    "name": "gpuVRAM",
    "type": "Function"
  },
  {
    "desc": "Returns the number of seconds the computer has been idle.",
    "module": "hs.host",
    "name": "idleTime",
    "type": "Function"
  },
  {
    "desc": "Returns the OS X interface style for the current user.",
    "module": "hs.host",
    "name": "interfaceStyle",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the current machine, as displayed in the Finder sidebar",
    "module": "hs.host",
    "name": "localizedName",
    "type": "Function"
  },
  {
    "desc": "Gets a list of network names for the current machine",
    "module": "hs.host",
    "name": "names",
    "type": "Function"
  },
  {
    "desc": "The operating system version as a table containing the major, minor, and patch numbers.",
    "module": "hs.host",
    "name": "operatingSystemVersion",
    "type": "Function"
  },
  {
    "desc": "The operating system version as a human readable string.",
    "module": "hs.host",
    "name": "operatingSystemVersionString",
    "type": "Function"
  },
  {
    "desc": "The current thermal state of the computer, as a human readable string",
    "module": "hs.host",
    "name": "thermalState",
    "type": "Function"
  },
  {
    "desc": "Returns a newly generated UUID as a string",
    "module": "hs.host",
    "name": "uuid",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing virtual memory statistics for the current machine, as well as the page size (in bytes) and physical memory size (in bytes).",
    "module": "hs.host",
    "name": "vmStat",
    "type": "Function"
  },
  {
    "desc": "Returns a table of information about disk volumes attached to the system",
    "module": "hs.host",
    "name": "volumeInformation",
    "type": "Function"
  },
  {
    "desc": "Retrieve information about the user's Language and Region settings.",
    "name": "hs.host.locale",
    "type": "Module"
  },
  {
    "desc": "Returns an array table containing the identifiers for the locales available on the system.",
    "module": "hs.host.locale",
    "name": "availableLocales",
    "type": "Function"
  },
  {
    "desc": "Returns an string specifying the user's currently selected locale identifier.",
    "module": "hs.host.locale",
    "name": "current",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing information about the current or specified locale.",
    "module": "hs.host.locale",
    "name": "details",
    "type": "Function"
  },
  {
    "desc": "Returns the user's language preference order as an array of strings.",
    "module": "hs.host.locale",
    "name": "preferredLanguages",
    "type": "Function"
  },
  {
    "desc": "Registers a function to be invoked when anything in the user's locale settings change",
    "module": "hs.host.locale",
    "name": "registerCallback",
    "type": "Function"
  },
  {
    "desc": "Unregister a callback function when you no longer care about changes to the user's locale",
    "module": "hs.host.locale",
    "name": "unregisterCallback",
    "type": "Function"
  },
  {
    "desc": "Create and manage global keyboard shortcuts",
    "name": "hs.hotkey",
    "type": "Module"
  },
  {
    "desc": "Duration of the alert shown when a hotkey created with a `message` parameter is triggered, in seconds. Default is 1.",
    "module": "hs.hotkey",
    "name": "alertDuration",
    "type": "Variable"
  },
  {
    "desc": "Determines whether the hotkey combination can be assigned a callback through Hammerspoon.",
    "module": "hs.hotkey",
    "name": "assignable",
    "type": "Function"
  },
  {
    "desc": "Deletes all previously set callbacks for a given keyboard combination",
    "module": "hs.hotkey",
    "name": "deleteAll",
    "type": "Function"
  },
  {
    "desc": "Disables all previously set callbacks for a given keyboard combination",
    "module": "hs.hotkey",
    "name": "disableAll",
    "type": "Function"
  },
  {
    "desc": "Returns a list of all currently active hotkeys",
    "module": "hs.hotkey",
    "name": "getHotkeys",
    "type": "Function"
  },
  {
    "desc": "Creates (and enables) a hotkey that shows all currently active hotkeys (i.e. enabled and not \"shadowed\"",
    "module": "hs.hotkey",
    "name": "showHotkeys",
    "type": "Function"
  },
  {
    "desc": "Examine whether a potential hotkey is in use by the macOS system such as the Screen Capture, Universal Access, and Keyboard Navigation keys.",
    "module": "hs.hotkey",
    "name": "systemAssigned",
    "type": "Function"
  },
  {
    "desc": "Creates a hotkey and enables it immediately",
    "module": "hs.hotkey",
    "name": "bind",
    "type": "Constructor"
  },
  {
    "desc": "Creates a hotkey and enables it immediately",
    "module": "hs.hotkey",
    "name": "bindSpec",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new hotkey",
    "module": "hs.hotkey",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Disables and deletes a hotkey object",
    "module": "hs.hotkey",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Disables a hotkey object",
    "module": "hs.hotkey",
    "name": "disable",
    "type": "Method"
  },
  {
    "desc": "Enables a hotkey object",
    "module": "hs.hotkey",
    "name": "enable",
    "type": "Method"
  },
  {
    "desc": "Create/manage modal keyboard shortcut environments",
    "name": "hs.hotkey.modal",
    "type": "Module"
  },
  {
    "desc": "Creates a new modal state, optionally with a global keyboard combination to trigger it",
    "module": "hs.hotkey.modal",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates a hotkey that is enabled/disabled as the modal is entered/exited",
    "module": "hs.hotkey.modal",
    "name": "bind",
    "type": "Method"
  },
  {
    "desc": "Enters a modal state",
    "module": "hs.hotkey.modal",
    "name": "enter",
    "type": "Method"
  },
  {
    "desc": "Optional callback for when a modal is entered",
    "module": "hs.hotkey.modal",
    "name": "entered",
    "type": "Method"
  },
  {
    "desc": "Exits a modal state",
    "module": "hs.hotkey.modal",
    "name": "exit",
    "type": "Method"
  },
  {
    "desc": "Optional callback for when a modal is exited",
    "module": "hs.hotkey.modal",
    "name": "exited",
    "type": "Method"
  },
  {
    "desc": "Perform HTTP requests",
    "name": "hs.http",
    "type": "Module"
  },
  {
    "desc": "A collection of common HTML Entities (&whatever;) and their UTF8 equivalents.  To retrieve the UTF8 sequence for a given entity, reference the table as `hs.http.htmlEntities[\"&key;\"]` where `key` is the text of the entity's name or a numeric reference like `#number`.",
    "module": "hs.http",
    "name": "htmlEntities",
    "type": "Variable"
  },
  {
    "desc": "Sends an HTTP GET request asynchronously",
    "module": "hs.http",
    "name": "asyncGet",
    "type": "Function"
  },
  {
    "desc": "Sends an HTTP POST request asynchronously",
    "module": "hs.http",
    "name": "asyncPost",
    "type": "Function"
  },
  {
    "desc": "Convert all recognized HTML Entities in the `inString` to appropriate UTF8 byte sequences and returns the converted text.",
    "module": "hs.http",
    "name": "convertHtmlEntities",
    "type": "Function"
  },
  {
    "desc": "Creates an HTTP request and executes it asynchronously",
    "module": "hs.http",
    "name": "doAsyncRequest",
    "type": "Function"
  },
  {
    "desc": "Creates an HTTP request and executes it synchronously",
    "module": "hs.http",
    "name": "doRequest",
    "type": "Function"
  },
  {
    "desc": "Returns a copy of the provided string in which characters that are not valid within an HTTP query key or value are escaped with their %## equivalent.",
    "module": "hs.http",
    "name": "encodeForQuery",
    "type": "Function"
  },
  {
    "desc": "Sends an HTTP GET request to a URL",
    "module": "hs.http",
    "name": "get",
    "type": "Function"
  },
  {
    "desc": "Sends an HTTP POST request to a URL",
    "module": "hs.http",
    "name": "post",
    "type": "Function"
  },
  {
    "desc": "Registers an HTML Entity with the specified Unicode codepoint which can later referenced in your code as `hs.http.htmlEntity[entity]` for convenience and readability.",
    "module": "hs.http",
    "name": "registerEntity",
    "type": "Function"
  },
  {
    "desc": "Returns a table of keys containing the individual components of the provided url.",
    "module": "hs.http",
    "name": "urlParts",
    "type": "Function"
  },
  {
    "desc": "Simple HTTP server",
    "name": "hs.httpserver",
    "type": "Module"
  },
  {
    "desc": "Creates a new HTTP or HTTPS server",
    "module": "hs.httpserver",
    "name": "new",
    "type": "Function"
  },
  {
    "desc": "Gets the network interface the server is configured to listen on",
    "module": "hs.httpserver",
    "name": "getInterface",
    "type": "Method"
  },
  {
    "desc": "Gets the Bonjour name the server is configured to advertise itself as",
    "module": "hs.httpserver",
    "name": "getName",
    "type": "Method"
  },
  {
    "desc": "Gets the TCP port the server is configured to listen on",
    "module": "hs.httpserver",
    "name": "getPort",
    "type": "Method"
  },
  {
    "desc": "Get or set the maximum allowed body size for an incoming HTTP request.",
    "module": "hs.httpserver",
    "name": "maxBodySize",
    "type": "Method"
  },
  {
    "desc": "Sends a message to the websocket client",
    "module": "hs.httpserver",
    "name": "send",
    "type": "Method"
  },
  {
    "desc": "Sets the request handling callback for an HTTP server object",
    "module": "hs.httpserver",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Sets the network interface the server is configured to listen on",
    "module": "hs.httpserver",
    "name": "setInterface",
    "type": "Method"
  },
  {
    "desc": "Sets the Bonjour name the server should advertise itself as",
    "module": "hs.httpserver",
    "name": "setName",
    "type": "Method"
  },
  {
    "desc": "Sets a password for an HTTP server object",
    "module": "hs.httpserver",
    "name": "setPassword",
    "type": "Method"
  },
  {
    "desc": "Sets the TCP port the server is configured to listen on",
    "module": "hs.httpserver",
    "name": "setPort",
    "type": "Method"
  },
  {
    "desc": "Starts an HTTP server object",
    "module": "hs.httpserver",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops an HTTP server object",
    "module": "hs.httpserver",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Enables a websocket endpoint on the HTTP server",
    "module": "hs.httpserver",
    "name": "websocket",
    "type": "Method"
  },
  {
    "desc": "Minimalist Web Server for Hammerspoon",
    "name": "hs.httpserver.hsminweb",
    "type": "Module"
  },
  {
    "desc": "A format string, usable with `os.date`, which will display a date in the format expected for HTTP communications as described in RFC 822, updated by RFC 1123.",
    "module": "hs.httpserver.hsminweb",
    "name": "dateFormatString",
    "type": "Constant"
  },
  {
    "desc": "HTTP Response Status Codes",
    "module": "hs.httpserver.hsminweb",
    "name": "statusCodes",
    "type": "Constant"
  },
  {
    "desc": "Accessed as `self._accessLog`.  If query logging is enabled for the web server, an Apache style common log entry will be appended to this string for each request.  See [hs.httpserver.hsminweb:queryLogging](#queryLogging).",
    "module": "hs.httpserver.hsminweb",
    "name": "_accessLog",
    "type": "Variable"
  },
  {
    "desc": "Accessed as `self._errorHandlers[errorCode]`.  A table whose keyed entries specify the function to generate the error response page for an HTTP error.",
    "module": "hs.httpserver.hsminweb",
    "name": "_errorHandlers",
    "type": "Variable"
  },
  {
    "desc": "Accessed as `self._serverAdmin`.  A string containing the administrator for the web server.  Defaults to the currently logged in user's short form username and the computer's localized name as returned by `hs.host.localizedName()` (e.g. \"user@computer\").",
    "module": "hs.httpserver.hsminweb",
    "name": "_serverAdmin",
    "type": "Variable"
  },
  {
    "desc": "Accessed as `self._supportMethods[method]`.  A table whose keyed entries specify whether or not a specified HTTP method is supported by this server.",
    "module": "hs.httpserver.hsminweb",
    "name": "_supportMethods",
    "type": "Variable"
  },
  {
    "desc": "The `hs.logger` instance for the `hs.httpserver.hsminweb` module. See the documentation for `hs.logger` for more information.",
    "module": "hs.httpserver.hsminweb",
    "name": "log",
    "type": "Variable"
  },
  {
    "desc": "Returns the current or specified time in the format expected for HTTP communications as described in RFC 822, updated by RFC 1123.",
    "module": "hs.httpserver.hsminweb",
    "name": "formattedDate",
    "type": "Function"
  },
  {
    "desc": "Parse the specified URL into it's constituant parts.",
    "module": "hs.httpserver.hsminweb",
    "name": "urlParts",
    "type": "Function"
  },
  {
    "desc": "Create a new hsminweb table object representing a Hammerspoon Web Server.",
    "module": "hs.httpserver.hsminweb",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Get or set the access-list table for the hsminweb web server",
    "module": "hs.httpserver.hsminweb",
    "name": "accessList",
    "type": "Method"
  },
  {
    "desc": "Get or set the whether or not a directory index is returned when the requested URL specifies a directory and no file matching an entry in the directory indexes table is found.",
    "module": "hs.httpserver.hsminweb",
    "name": "allowDirectory",
    "type": "Method"
  },
  {
    "desc": "Get or set the whether or not the web server should advertise itself via Bonjour when it is running.",
    "module": "hs.httpserver.hsminweb",
    "name": "bonjour",
    "type": "Method"
  },
  {
    "desc": "Get or set the whether or not CGI file execution is enabled.",
    "module": "hs.httpserver.hsminweb",
    "name": "cgiEnabled",
    "type": "Method"
  },
  {
    "desc": "Get or set the file extensions which identify files which should be executed as CGI scripts to provide the results to an HTTP request.",
    "module": "hs.httpserver.hsminweb",
    "name": "cgiExtensions",
    "type": "Method"
  },
  {
    "desc": "Get or set the file names to look for when the requested URL specifies a directory.",
    "module": "hs.httpserver.hsminweb",
    "name": "directoryIndex",
    "type": "Method"
  },
  {
    "desc": "Get or set the whether or not DNS lookups are performed.",
    "module": "hs.httpserver.hsminweb",
    "name": "dnsLookup",
    "type": "Method"
  },
  {
    "desc": "Get or set the document root for the web server.",
    "module": "hs.httpserver.hsminweb",
    "name": "documentRoot",
    "type": "Method"
  },
  {
    "desc": "Get or set the network interface that the hsminweb web server will listen on",
    "module": "hs.httpserver.hsminweb",
    "name": "interface",
    "type": "Method"
  },
  {
    "desc": "Get or set the extension of files which contain Lua code which should be executed within Hammerspoon to provide the results to an HTTP request.",
    "module": "hs.httpserver.hsminweb",
    "name": "luaTemplateExtension",
    "type": "Method"
  },
  {
    "desc": "Get or set the maximum body size for an HTTP request",
    "module": "hs.httpserver.hsminweb",
    "name": "maxBodySize",
    "type": "Method"
  },
  {
    "desc": "Get or set the name the web server uses in Bonjour advertisement when the web server is running.",
    "module": "hs.httpserver.hsminweb",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Set a password for the hsminweb web server, or return a boolean indicating whether or not a password is currently set for the web server.",
    "module": "hs.httpserver.hsminweb",
    "name": "password",
    "type": "Method"
  },
  {
    "desc": "Get or set the name the port the web server listens on",
    "module": "hs.httpserver.hsminweb",
    "name": "port",
    "type": "Method"
  },
  {
    "desc": "Get or set the whether or not requests to this web server are logged.",
    "module": "hs.httpserver.hsminweb",
    "name": "queryLogging",
    "type": "Method"
  },
  {
    "desc": "Get or set the timeout for a CGI script",
    "module": "hs.httpserver.hsminweb",
    "name": "scriptTimeout",
    "type": "Method"
  },
  {
    "desc": "Get or set the whether or not the web server utilizes SSL for HTTP request and response communications.",
    "module": "hs.httpserver.hsminweb",
    "name": "ssl",
    "type": "Method"
  },
  {
    "desc": "Start serving pages for the hsminweb web server.",
    "module": "hs.httpserver.hsminweb",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stop serving pages for the hsminweb web server.",
    "module": "hs.httpserver.hsminweb",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Provides support functions in the `cgilua` module for Hammerspoon Minimal Web Server Lua templates.",
    "name": "hs.httpserver.hsminweb.cgilua",
    "type": "Module"
  },
  {
    "desc": "The file name of the running script. Obtained from cgilua.script_path.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "script_file",
    "type": "Variable"
  },
  {
    "desc": "The system path of the running script. Equivalent to the CGI environment variable SCRIPT_FILENAME.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "script_path",
    "type": "Variable"
  },
  {
    "desc": "The directory of the running script. Obtained from cgilua.script_path.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "script_pdir",
    "type": "Variable"
  },
  {
    "desc": "If PATH_INFO represents a directory (i.e. ends with \"/\"), then this is equal to `cgilua.script_vpath`.  Otherwise, this contains the directory portion of `cgilua.script_vpath`.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "script_vdir",
    "type": "Variable"
  },
  {
    "desc": "Equivalent to the CGI environment variable PATH_INFO or \"/\", if no PATH_INFO is set.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "script_vpath",
    "type": "Variable"
  },
  {
    "desc": "The directory used by `cgilua.tmpfile`",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "tmp_path",
    "type": "Variable"
  },
  {
    "desc": "The name of the script as requested in the URL. Equivalent to the CGI environment variable SCRIPT_NAME.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "urlpath",
    "type": "Variable"
  },
  {
    "desc": "Sets the HTTP response type for the content being generated to maintype/subtype.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "contentheader",
    "type": "Function"
  },
  {
    "desc": "Executes a lua file (given by filepath) if it exists.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "doif",
    "type": "Function"
  },
  {
    "desc": "Executes a lua file (given by filepath).",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "doscript",
    "type": "Function"
  },
  {
    "desc": "Sends the message to the `hs.httpserver.hsminweb` log, tagged as an error.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "errorlog",
    "type": "Function"
  },
  {
    "desc": "Sets the HTTP response header `key` to `value`",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "header",
    "type": "Function"
  },
  {
    "desc": "Sets the HTTP response type to \"text/html\"",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "htmlheader",
    "type": "Function"
  },
  {
    "desc": "Returns an absolute URL for the given URI by prepending the path with the scheme, hostname, and port of this web server.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "mkabsoluteurl",
    "type": "Function"
  },
  {
    "desc": "Creates a full document URI from a partial URI, including query arguments if present.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "mkurlpath",
    "type": "Function"
  },
  {
    "desc": "Appends the given arguments to the response body.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "print",
    "type": "Function"
  },
  {
    "desc": "Appends the given arguments to the response body.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "put",
    "type": "Function"
  },
  {
    "desc": "Sends the headers to force a redirection to the given URL adding the parameters in table args to the new URL.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "redirect",
    "type": "Function"
  },
  {
    "desc": "Returns a string with the value of the CGI environment variable correspoding to varname.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "servervariable",
    "type": "Function"
  },
  {
    "desc": "Returns two strings with the \"first directory\" and the \"remaining paht\" of the given path string splitted on the first separator (\"/\" or \"\\\").",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "splitfirst",
    "type": "Function"
  },
  {
    "desc": "Returns two strings with the \"directory path\" and \"file\" parts of the given path string splitted on the last separator (\"/\" or \"\\\").",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "splitonlast",
    "type": "Function"
  },
  {
    "desc": "Returns the file handle to a temporary file for writing, or nil and an error message if the file could not be created for any reason.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "tmpfile",
    "type": "Function"
  },
  {
    "desc": "Returns a temporary file name used by `cgilua.tmpfile`.",
    "module": "hs.httpserver.hsminweb.cgilua",
    "name": "tmpname",
    "type": "Function"
  },
  {
    "desc": "Support functions for the CGILua compatibility module for including and translating Lua template pages into Lua code for execution within the Hammerspoon environment to provide dynamic content for http requests.",
    "name": "hs.httpserver.hsminweb.cgilua.lp",
    "type": "Module"
  },
  {
    "desc": "Converts the specified Lua template source into a Lua function.",
    "module": "hs.httpserver.hsminweb.cgilua.lp",
    "name": "compile",
    "type": "Function"
  },
  {
    "desc": "Includes the template specified by the `file` parameter.",
    "module": "hs.httpserver.hsminweb.cgilua.lp",
    "name": "include",
    "type": "Function"
  },
  {
    "desc": "Converts the specified Lua template source into Lua code executable within the Hammerspoon environment.",
    "module": "hs.httpserver.hsminweb.cgilua.lp",
    "name": "translate",
    "type": "Function"
  },
  {
    "desc": "Support functions for the CGILua compatibility module for encoding and decoding URL components in accordance with RFC 3986.",
    "name": "hs.httpserver.hsminweb.cgilua.urlcode",
    "type": "Module"
  },
  {
    "desc": "Encodes the table of key-value pairs as a query string suitable for inclusion in a URL.",
    "module": "hs.httpserver.hsminweb.cgilua.urlcode",
    "name": "encodetable",
    "type": "Function"
  },
  {
    "desc": "URL encodes the provided string, making it safe as a component within a URL.",
    "module": "hs.httpserver.hsminweb.cgilua.urlcode",
    "name": "escape",
    "type": "Function"
  },
  {
    "desc": "Inserts the specified key and value into the table of key-value pairs.",
    "module": "hs.httpserver.hsminweb.cgilua.urlcode",
    "name": "insertfield",
    "type": "Function"
  },
  {
    "desc": "Parse the query string and store the key-value pairs in the provided table.",
    "module": "hs.httpserver.hsminweb.cgilua.urlcode",
    "name": "parsequery",
    "type": "Function"
  },
  {
    "desc": "Removes any URL encoding in the provided string.",
    "module": "hs.httpserver.hsminweb.cgilua.urlcode",
    "name": "unescape",
    "type": "Function"
  },
  {
    "desc": "A module for capturing and manipulating image objects from other modules for use with hs.drawing.",
    "name": "hs.image",
    "type": "Module"
  },
  {
    "desc": "Table of arrays containing the names of additional internal system images which may also be available for use with `hs.drawing.image` and [hs.image.imageFromName](#imageFromName).",
    "module": "hs.image",
    "name": "additionalImageNames",
    "type": "Constant"
  },
  {
    "desc": "Table containing the names of internal system images for use with hs.drawing.image",
    "module": "hs.image",
    "name": "systemImageNames",
    "type": "Constant"
  },
  {
    "desc": "Creates an `hs.image` object for the file or files specified",
    "module": "hs.image",
    "name": "iconForFile",
    "type": "Constructor"
  },
  {
    "desc": "Creates an `hs.image` object of the icon for the specified file type.",
    "module": "hs.image",
    "name": "iconForFileType",
    "type": "Constructor"
  },
  {
    "desc": "Creates an `hs.image` object using the icon from an App",
    "module": "hs.image",
    "name": "imageFromAppBundle",
    "type": "Constructor"
  },
  {
    "desc": "Creates an image from an ASCII representation with the specified context.",
    "module": "hs.image",
    "name": "imageFromASCII",
    "type": "Constructor"
  },
  {
    "desc": "Creates an `hs.image` object from a video file or the album artwork of an audio file or directory",
    "module": "hs.image",
    "name": "imageFromMediaFile",
    "type": "Constructor"
  },
  {
    "desc": "Returns the hs.image object for the specified name, if it exists.",
    "module": "hs.image",
    "name": "imageFromName",
    "type": "Constructor"
  },
  {
    "desc": "Loads an image file",
    "module": "hs.image",
    "name": "imageFromPath",
    "type": "Constructor"
  },
  {
    "desc": "Creates an `hs.image` object from the contents of the specified URL.",
    "module": "hs.image",
    "name": "imageFromURL",
    "type": "Constructor"
  },
  {
    "desc": "Returns a copy of the image",
    "module": "hs.image",
    "name": "copy",
    "type": "Method"
  },
  {
    "desc": "Returns a copy of the portion of the image specified by the rectangle specified.",
    "module": "hs.image",
    "name": "croppedCopy",
    "type": "Method"
  },
  {
    "desc": "Returns a bitmap representation of the image as a base64 encoded URL string",
    "module": "hs.image",
    "name": "encodeAsURLString",
    "type": "Method"
  },
  {
    "desc": "Get or set the name of the image represented by the hs.image object.",
    "module": "hs.image",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Save the hs.image object as an image of type `filetype` to the specified filename.",
    "module": "hs.image",
    "name": "saveToFile",
    "type": "Method"
  },
  {
    "desc": "Assigns the name assigned to the hs.image object.",
    "module": "hs.image",
    "name": "setName",
    "type": "Method"
  },
  {
    "desc": "Returns a copy of the image resized to the height and width specified in the size table.",
    "module": "hs.image",
    "name": "setSize",
    "type": "Method"
  },
  {
    "desc": "Get or set the size of the image represented byt he hs.image object.",
    "module": "hs.image",
    "name": "size",
    "type": "Method"
  },
  {
    "desc": "Get or set whether the image is considered a template image.",
    "module": "hs.image",
    "name": "template",
    "type": "Method"
  },
  {
    "desc": "Produce human-readable representations of Lua variables (particularly tables)",
    "name": "hs.inspect",
    "type": "Module"
  },
  {
    "desc": "Gets a human readable version of the supplied Lua variable",
    "module": "hs.inspect",
    "name": "inspect",
    "type": "Function"
  },
  {
    "desc": "Provides Hammerspoon with the ability to create both local and remote message ports for inter-process communication.",
    "name": "hs.ipc",
    "type": "Module"
  },
  {
    "desc": "See [hs.ipc.cliColors](#cliColors).",
    "module": "hs.ipc",
    "name": "cliGetColors",
    "type": "Deprecated"
  },
  {
    "desc": "See [hs.ipc.cliColors](#cliColors).",
    "module": "hs.ipc",
    "name": "cliResetColors",
    "type": "Deprecated"
  },
  {
    "desc": "See [hs.ipc.cliColors](#cliColors).",
    "module": "hs.ipc",
    "name": "cliSetColors",
    "type": "Deprecated"
  },
  {
    "desc": "Get or set the terminal escape codes used to produce colorized output in the `hs` command line tool",
    "module": "hs.ipc",
    "name": "cliColors",
    "type": "Function"
  },
  {
    "desc": "Installs the `hs` command line tool",
    "module": "hs.ipc",
    "name": "cliInstall",
    "type": "Function"
  },
  {
    "desc": "Get or set whether or not the command line tool saves a history of the commands you type.",
    "module": "hs.ipc",
    "name": "cliSaveHistory",
    "type": "Function"
  },
  {
    "desc": "Get or set whether the maximum number of commands saved when command line tool history saving is enabled.",
    "module": "hs.ipc",
    "name": "cliSaveHistorySize",
    "type": "Function"
  },
  {
    "desc": "Gets the status of the `hs` command line tool",
    "module": "hs.ipc",
    "name": "cliStatus",
    "type": "Function"
  },
  {
    "desc": "Uninstalls the `hs` command line tool",
    "module": "hs.ipc",
    "name": "cliUninstall",
    "type": "Function"
  },
  {
    "desc": "Create a new local ipcObject for receiving and responding to messages from a remote port",
    "module": "hs.ipc",
    "name": "localPort",
    "type": "Constructor"
  },
  {
    "desc": "Create a new remote ipcObject for sending messages asynchronously to a local port",
    "module": "hs.ipc",
    "name": "remotePort",
    "type": "Constructor"
  },
  {
    "desc": "Deletes the ipcObject, stopping it as well if necessary",
    "module": "hs.ipc",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the ipcObject represents a remote or local port",
    "module": "hs.ipc",
    "name": "isRemote",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the ipcObject port is still valid or not",
    "module": "hs.ipc",
    "name": "isValid",
    "type": "Method"
  },
  {
    "desc": "Returns the name the ipcObject uses for its port when active",
    "module": "hs.ipc",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Sends a message from a remote port to a local port",
    "module": "hs.ipc",
    "name": "sendMessage",
    "type": "Method"
  },
  {
    "desc": "Controls for iTunes music player",
    "name": "hs.itunes",
    "type": "Module"
  },
  {
    "desc": "Returned by `hs.itunes.getPlaybackState()` to indicates iTunes is paused",
    "module": "hs.itunes",
    "name": "state_paused",
    "type": "Constant"
  },
  {
    "desc": "Returned by `hs.itunes.getPlaybackState()` to indicates iTunes is playing",
    "module": "hs.itunes",
    "name": "state_playing",
    "type": "Constant"
  },
  {
    "desc": "Returned by `hs.itunes.getPlaybackState()` to indicates iTunes is stopped",
    "module": "hs.itunes",
    "name": "state_stopped",
    "type": "Constant"
  },
  {
    "desc": "Displays information for current track on screen",
    "module": "hs.itunes",
    "name": "displayCurrentTrack",
    "type": "Function"
  },
  {
    "desc": "Skips the current playback forwards by 5 seconds",
    "module": "hs.itunes",
    "name": "ff",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the current Album",
    "module": "hs.itunes",
    "name": "getCurrentAlbum",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the current Artist",
    "module": "hs.itunes",
    "name": "getCurrentArtist",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the current track",
    "module": "hs.itunes",
    "name": "getCurrentTrack",
    "type": "Function"
  },
  {
    "desc": "Gets the duration (in seconds) of the current song",
    "module": "hs.itunes",
    "name": "getDuration",
    "type": "Function"
  },
  {
    "desc": "Gets the current playback state of iTunes",
    "module": "hs.itunes",
    "name": "getPlaybackState",
    "type": "Function"
  },
  {
    "desc": "Gets the playback position (in seconds) of the current song",
    "module": "hs.itunes",
    "name": "getPosition",
    "type": "Function"
  },
  {
    "desc": "Gets the current iTunes volume setting",
    "module": "hs.itunes",
    "name": "getVolume",
    "type": "Function"
  },
  {
    "desc": "Returns whether iTunes is currently playing",
    "module": "hs.itunes",
    "name": "isPlaying",
    "type": "Function"
  },
  {
    "desc": "Returns whether iTunes is currently open. Most other functions in hs.itunes will automatically start the application, so this function can be used to guard against that.",
    "module": "hs.itunes",
    "name": "isRunning",
    "type": "Function"
  },
  {
    "desc": "Skips to the next itunes track",
    "module": "hs.itunes",
    "name": "next",
    "type": "Function"
  },
  {
    "desc": "Pauses the current iTunes track",
    "module": "hs.itunes",
    "name": "pause",
    "type": "Function"
  },
  {
    "desc": "Plays the current iTunes track",
    "module": "hs.itunes",
    "name": "play",
    "type": "Function"
  },
  {
    "desc": "Toggles play/pause of current iTunes track",
    "module": "hs.itunes",
    "name": "playpause",
    "type": "Function"
  },
  {
    "desc": "Skips to previous itunes track",
    "module": "hs.itunes",
    "name": "previous",
    "type": "Function"
  },
  {
    "desc": "Skips the current playback backwards by 5 seconds",
    "module": "hs.itunes",
    "name": "rw",
    "type": "Function"
  },
  {
    "desc": "Sets the playback position of the current song",
    "module": "hs.itunes",
    "name": "setPosition",
    "type": "Function"
  },
  {
    "desc": "Sets the iTunes playback volume",
    "module": "hs.itunes",
    "name": "setVolume",
    "type": "Function"
  },
  {
    "desc": "Decreases the iTunes playback volume by 5",
    "module": "hs.itunes",
    "name": "volumeDown",
    "type": "Function"
  },
  {
    "desc": "Increases the iTunes playback volume by 5",
    "module": "hs.itunes",
    "name": "volumeUp",
    "type": "Function"
  },
  {
    "desc": "Execute JavaScript code",
    "name": "hs.javascript",
    "type": "Module"
  },
  {
    "desc": "JSON encoding and decoding",
    "name": "hs.json",
    "type": "Module"
  },
  {
    "desc": "Decodes JSON into a table",
    "module": "hs.json",
    "name": "decode",
    "type": "Function"
  },
  {
    "desc": "Encodes a table as JSON",
    "module": "hs.json",
    "name": "encode",
    "type": "Function"
  },
  {
    "desc": "Convert between key-strings and key-codes. Also provides funcionality for querying and changing keyboard layouts.",
    "name": "hs.keycodes",
    "type": "Module"
  },
  {
    "desc": "A mapping from string representation of a key to its keycode, and vice versa.",
    "module": "hs.keycodes",
    "name": "map",
    "type": "Constant"
  },
  {
    "desc": "Gets the name of the current keyboard layout",
    "module": "hs.keycodes",
    "name": "currentLayout",
    "type": "Function"
  },
  {
    "desc": "Gets the icon of the current keyboard layout",
    "module": "hs.keycodes",
    "name": "currentLayoutIcon",
    "type": "Function"
  },
  {
    "desc": "Get current input method",
    "module": "hs.keycodes",
    "name": "currentMethod",
    "type": "Function"
  },
  {
    "desc": "Get or set the source id for the keyboard input source",
    "module": "hs.keycodes",
    "name": "currentSourceID",
    "type": "Function"
  },
  {
    "desc": "Gets an hs.image object for a given keyboard layout or input method",
    "module": "hs.keycodes",
    "name": "iconForLayoutOrMethod",
    "type": "Function"
  },
  {
    "desc": "Sets the function to be called when your input source (i.e. qwerty, dvorak, colemac) changes.",
    "module": "hs.keycodes",
    "name": "inputSourceChanged",
    "type": "Function"
  },
  {
    "desc": "Gets all of the enabled keyboard layouts that the keyboard input source can be switched to",
    "module": "hs.keycodes",
    "name": "layouts",
    "type": "Function"
  },
  {
    "desc": "Gets all of the enabled input methods that the keyboard input source can be switched to",
    "module": "hs.keycodes",
    "name": "methods",
    "type": "Function"
  },
  {
    "desc": "Changes the system keyboard layout",
    "module": "hs.keycodes",
    "name": "setLayout",
    "type": "Function"
  },
  {
    "desc": "Changes the system input method",
    "module": "hs.keycodes",
    "name": "setMethod",
    "type": "Function"
  },
  {
    "desc": "Window layout manager",
    "name": "hs.layout",
    "type": "Module"
  },
  {
    "desc": "A unit rect which will make a window occupy the left 25% of a screen",
    "module": "hs.layout",
    "name": "left25",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the left 30% of a screen",
    "module": "hs.layout",
    "name": "left30",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the left 50% of a screen",
    "module": "hs.layout",
    "name": "left50",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the left 70% of a screen",
    "module": "hs.layout",
    "name": "left70",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the left 75% of a screen",
    "module": "hs.layout",
    "name": "left75",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy all of a screen",
    "module": "hs.layout",
    "name": "maximized",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the right 25% of a screen",
    "module": "hs.layout",
    "name": "right25",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the right 30% of a screen",
    "module": "hs.layout",
    "name": "right30",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the right 50% of a screen",
    "module": "hs.layout",
    "name": "right50",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the right 70% of a screen",
    "module": "hs.layout",
    "name": "right70",
    "type": "Constant"
  },
  {
    "desc": "A unit rect which will make a window occupy the right 75% of a screen",
    "module": "hs.layout",
    "name": "right75",
    "type": "Constant"
  },
  {
    "desc": "Applies a layout to applications/windows",
    "module": "hs.layout",
    "name": "apply",
    "type": "Function"
  },
  {
    "desc": "Determine the machine's location and useful information about that location",
    "name": "hs.location",
    "type": "Module"
  },
  {
    "desc": "Returns a string describing the authorization status of Hammerspoon's use of Location Services.",
    "module": "hs.location",
    "name": "authorizationStatus",
    "type": "Function"
  },
  {
    "desc": "Measures the distance between two points of latitude and longitude",
    "module": "hs.location",
    "name": "distance",
    "type": "Function"
  },
  {
    "desc": "Returns a table representing the current location",
    "module": "hs.location",
    "name": "get",
    "type": "Function"
  },
  {
    "desc": "Registers a callback function to be called when the system location is updated",
    "module": "hs.location",
    "name": "register",
    "type": "Function"
  },
  {
    "desc": "Gets the state of OS X Location Services",
    "module": "hs.location",
    "name": "servicesEnabled",
    "type": "Function"
  },
  {
    "desc": "Begins location tracking using OS X's Location Services so that registered callback functions can be invoked as the computer location changes.",
    "module": "hs.location",
    "name": "start",
    "type": "Function"
  },
  {
    "desc": "Stops location tracking.  Registered callback functions will cease to receive notification of location changes.",
    "module": "hs.location",
    "name": "stop",
    "type": "Function"
  },
  {
    "desc": "Returns the time of official sunrise for the supplied location",
    "module": "hs.location",
    "name": "sunrise",
    "type": "Function"
  },
  {
    "desc": "Returns the time of official sunset for the supplied location",
    "module": "hs.location",
    "name": "sunset",
    "type": "Function"
  },
  {
    "desc": "Unregisters a callback",
    "module": "hs.location",
    "name": "unregister",
    "type": "Function"
  },
  {
    "desc": "Create a new location object which can receive callbacks independant of other Hammerspoon use of Location Services.",
    "module": "hs.location",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Adds a region to be monitored by Location Services",
    "module": "hs.location",
    "name": "addMonitoredRegion",
    "type": "Method"
  },
  {
    "desc": "Sets or removes the callback function for this locationObject",
    "module": "hs.location",
    "name": "callback",
    "type": "Method"
  },
  {
    "desc": "Returns the string identifier for the current region",
    "module": "hs.location",
    "name": "currentRegion",
    "type": "Method"
  },
  {
    "desc": "Enable callbacks for location changes/refinements for this locationObject",
    "module": "hs.location",
    "name": "distanceFrom",
    "type": "Method"
  },
  {
    "desc": "Returns the current location",
    "module": "hs.location",
    "name": "location",
    "type": "Method"
  },
  {
    "desc": "Returns a table containing the regionTables for the regions currently being monitored for this locationObject",
    "module": "hs.location",
    "name": "monitoredRegions",
    "type": "Method"
  },
  {
    "desc": "Removes a monitored region from Location Services",
    "module": "hs.location",
    "name": "removeMonitoredRegion",
    "type": "Method"
  },
  {
    "desc": "Enable callbacks for location changes/refinements for this locationObject",
    "module": "hs.location",
    "name": "startTracking",
    "type": "Method"
  },
  {
    "desc": "Disable callbacks for location changes/refinements for this locationObject",
    "module": "hs.location",
    "name": "stopTracking",
    "type": "Method"
  },
  {
    "desc": "Converts between GPS coordinates and more user friendly representations like an address or points of interest.",
    "name": "hs.location.geocoder",
    "type": "Module"
  },
  {
    "desc": "Look up geocoding information for the specified address.",
    "module": "hs.location.geocoder",
    "name": "lookupAddress",
    "type": "Constructor"
  },
  {
    "desc": "Look up geocoding information for the specified address.",
    "module": "hs.location.geocoder",
    "name": "lookupAddressNear",
    "type": "Constructor"
  },
  {
    "desc": "Look up geocoding information for the specified location.",
    "module": "hs.location.geocoder",
    "name": "lookupLocation",
    "type": "Constructor"
  },
  {
    "desc": "Cancels the pending or in progress geocoding request.",
    "module": "hs.location.geocoder",
    "name": "cancel",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean indicating whether or not the geocoding process is still active.",
    "module": "hs.location.geocoder",
    "name": "geocoding",
    "type": "Method"
  },
  {
    "desc": "Simple logger for debugging purposes",
    "name": "hs.logger",
    "type": "Module"
  },
  {
    "desc": "Default log level for new logger instances.",
    "module": "hs.logger",
    "name": "defaultLogLevel",
    "type": "Variable"
  },
  {
    "desc": "Returns the global log history",
    "module": "hs.logger",
    "name": "history",
    "type": "Function"
  },
  {
    "desc": "Sets or gets the global log history size",
    "module": "hs.logger",
    "name": "historySize",
    "type": "Function"
  },
  {
    "desc": "Creates a new logger instance",
    "module": "hs.logger",
    "name": "new",
    "type": "Function"
  },
  {
    "desc": "Prints the global log history to the console",
    "module": "hs.logger",
    "name": "printHistory",
    "type": "Function"
  },
  {
    "desc": "Sets the log level for all logger instances (including objects' loggers)",
    "module": "hs.logger",
    "name": "setGlobalLogLevel",
    "type": "Function"
  },
  {
    "desc": "Sets the log level for all currently loaded modules",
    "module": "hs.logger",
    "name": "setModulesLogLevel",
    "type": "Function"
  },
  {
    "desc": "The log level of the logger instance, as a number between 0 and 5",
    "module": "hs.logger",
    "name": "level",
    "type": "Field"
  },
  {
    "desc": "Logs debug info to the console",
    "module": "hs.logger",
    "name": "d",
    "type": "Method"
  },
  {
    "desc": "Logs formatted debug info to the console",
    "module": "hs.logger",
    "name": "df",
    "type": "Method"
  },
  {
    "desc": "Logs an error to the console",
    "module": "hs.logger",
    "name": "e",
    "type": "Method"
  },
  {
    "desc": "Logs a formatted error to the console",
    "module": "hs.logger",
    "name": "ef",
    "type": "Method"
  },
  {
    "desc": "Logs formatted info to the console",
    "module": "hs.logger",
    "name": "f",
    "type": "Method"
  },
  {
    "desc": "Gets the log level of the logger instance",
    "module": "hs.logger",
    "name": "getLogLevel",
    "type": "Method"
  },
  {
    "desc": "Logs info to the console",
    "module": "hs.logger",
    "name": "i",
    "type": "Method"
  },
  {
    "desc": "Sets the log level of the logger instance",
    "module": "hs.logger",
    "name": "setLogLevel",
    "type": "Method"
  },
  {
    "desc": "Logs verbose info to the console",
    "module": "hs.logger",
    "name": "v",
    "type": "Method"
  },
  {
    "desc": "Logs formatted verbose info to the console",
    "module": "hs.logger",
    "name": "vf",
    "type": "Method"
  },
  {
    "desc": "Logs a warning to the console",
    "module": "hs.logger",
    "name": "w",
    "type": "Method"
  },
  {
    "desc": "Logs a formatted warning to the console",
    "module": "hs.logger",
    "name": "wf",
    "type": "Method"
  },
  {
    "desc": "Create and manage menubar icons",
    "name": "hs.menubar",
    "type": "Module"
  },
  {
    "desc": "Pre-defined list of priority levels which can be used for positioning menubar items.",
    "module": "hs.menubar",
    "name": "priorities",
    "type": "Constant"
  },
  {
    "desc": "Creates a new menu bar item object and optionally add it to the system menubar",
    "module": "hs.menubar",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new menu bar item object with the specified priority",
    "module": "hs.menubar",
    "name": "newWithPriority",
    "type": "Constructor"
  },
  {
    "desc": "Removes the menubar item from the menubar and destroys it",
    "module": "hs.menubar",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Returns the menubar item frame",
    "module": "hs.menubar",
    "name": "frame",
    "type": "Method"
  },
  {
    "desc": "Returns the current icon of the menubar item object.",
    "module": "hs.menubar",
    "name": "icon",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean indicating whether or not the specified menu is currently in the OS X menubar.",
    "module": "hs.menubar",
    "name": "isInMenuBar",
    "type": "Method"
  },
  {
    "desc": "Display a menubaritem as a pop up menu at the specified screen point.",
    "module": "hs.menubar",
    "name": "popupMenu",
    "type": "Method"
  },
  {
    "desc": "Get or set a menubar item's priority",
    "module": "hs.menubar",
    "name": "priority",
    "type": "Method"
  },
  {
    "desc": "Removes a menu from the system menu bar.  The item can still be used as a pop-up menu, unless you also delete it.",
    "module": "hs.menubar",
    "name": "removeFromMenuBar",
    "type": "Method"
  },
  {
    "desc": "Returns a previously removed menu back to the system menu bar.",
    "module": "hs.menubar",
    "name": "returnToMenuBar",
    "type": "Method"
  },
  {
    "desc": "Registers a function to be called when the menubar item is clicked",
    "module": "hs.menubar",
    "name": "setClickCallback",
    "type": "Method"
  },
  {
    "desc": "Sets the image of a menubar item object. The image will be displayed in the system menubar",
    "module": "hs.menubar",
    "name": "setIcon",
    "type": "Method"
  },
  {
    "desc": "Attaches a dropdown menu to the menubar item",
    "module": "hs.menubar",
    "name": "setMenu",
    "type": "Method"
  },
  {
    "desc": "Sets the title of a menubar item object. The title will be displayed in the system menubar",
    "module": "hs.menubar",
    "name": "setTitle",
    "type": "Method"
  },
  {
    "desc": "Sets the tooltip text on a menubar item",
    "module": "hs.menubar",
    "name": "setTooltip",
    "type": "Method"
  },
  {
    "desc": "Get or set the size for state images when the menu is displayed.",
    "module": "hs.menubar",
    "name": "stateImageSize",
    "type": "Method"
  },
  {
    "desc": "Returns the current title of the menubar item object.",
    "module": "hs.menubar",
    "name": "title",
    "type": "Method"
  },
  {
    "desc": "Send messages via iMessage and SMS Relay (note, SMS Relay requires OS X 10.10 and an established SMS Relay pairing between your Mac and an iPhone running iOS8)",
    "name": "hs.messages",
    "type": "Module"
  },
  {
    "desc": "Sends an iMessage",
    "module": "hs.messages",
    "name": "iMessage",
    "type": "Function"
  },
  {
    "desc": "Sends an SMS using SMS Relay",
    "module": "hs.messages",
    "name": "SMS",
    "type": "Function"
  },
  {
    "desc": "Simple controls for the MiLight LED WiFi bridge (also known as LimitlessLED and EasyBulb)",
    "name": "hs.milight",
    "type": "Module"
  },
  {
    "desc": "Specifies the maximum brightness value that can be used. Defaults to 25",
    "module": "hs.milight",
    "name": "maxBrightness",
    "type": "Constant"
  },
  {
    "desc": "Specifies the minimum brightness value that can be used. Defaults to 0",
    "module": "hs.milight",
    "name": "minBrightness",
    "type": "Constant"
  },
  {
    "desc": "Creates a new bridge object, which will be connected to the supplied IP address and port",
    "module": "hs.milight",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Deletes an `hs.milight` object",
    "module": "hs.milight",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Cycles through the disco modes",
    "module": "hs.milight",
    "name": "disco",
    "type": "Method"
  },
  {
    "desc": "Sends a command to the bridge",
    "module": "hs.milight",
    "name": "send",
    "type": "Method"
  },
  {
    "desc": "Sets brightness for the specified zone",
    "module": "hs.milight",
    "name": "zoneBrightness",
    "type": "Method"
  },
  {
    "desc": "Sets RGB color for the specified zone",
    "module": "hs.milight",
    "name": "zoneColor",
    "type": "Method"
  },
  {
    "desc": "Turns off the specified zone",
    "module": "hs.milight",
    "name": "zoneOff",
    "type": "Method"
  },
  {
    "desc": "Turns on the specified zone",
    "module": "hs.milight",
    "name": "zoneOn",
    "type": "Method"
  },
  {
    "desc": "Sets the specified zone to white",
    "module": "hs.milight",
    "name": "zoneWhite",
    "type": "Method"
  },
  {
    "desc": "tmuxomatic-like window management",
    "name": "hs.mjomatic",
    "type": "Module"
  },
  {
    "desc": "Applies a configuration to the currently open windows",
    "module": "hs.mjomatic",
    "name": "go",
    "type": "Function"
  },
  {
    "desc": "Inspect/manipulate the position of the mouse pointer",
    "name": "hs.mouse",
    "type": "Module"
  },
  {
    "desc": "Gets the absolute co-ordinates of the mouse pointer",
    "module": "hs.mouse",
    "name": "getAbsolutePosition",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing the current mouse buttons being pressed *at this instant*.",
    "module": "hs.mouse",
    "name": "getButtons",
    "type": "Function"
  },
  {
    "desc": "Gets the screen the mouse pointer is on",
    "module": "hs.mouse",
    "name": "getCurrentScreen",
    "type": "Function"
  },
  {
    "desc": "Gets the co-ordinates of the mouse pointer, relative to the screen it is on",
    "module": "hs.mouse",
    "name": "getRelativePosition",
    "type": "Function"
  },
  {
    "desc": "Gets the system-wide direction of scolling",
    "module": "hs.mouse",
    "name": "scrollDirection",
    "type": "Function"
  },
  {
    "desc": "Sets the absolute co-ordinates of the mouse pointer",
    "module": "hs.mouse",
    "name": "setAbsolutePosition",
    "type": "Function"
  },
  {
    "desc": "Sets the co-ordinates of the mouse pointer, relative to a screen",
    "module": "hs.mouse",
    "name": "setRelativePosition",
    "type": "Function"
  },
  {
    "desc": "Gets/Sets the current system mouse tracking speed setting",
    "module": "hs.mouse",
    "name": "trackingSpeed",
    "type": "Function"
  },
  {
    "desc": "This module provides functions for inquiring about and monitoring changes to the network.",
    "name": "hs.network",
    "type": "Module"
  },
  {
    "desc": "Returns a list of the IPv4 and IPv6 addresses for the specified interfaces, or all interfaces if no arguments are given.",
    "module": "hs.network",
    "name": "addresses",
    "type": "Function"
  },
  {
    "desc": "Returns details about the specified interface or the primary interface if no interface is specified.",
    "module": "hs.network",
    "name": "interfaceDetails",
    "type": "Function"
  },
  {
    "desc": "Returns the user defined name for the specified interface or the primary interface if no interface is specified.",
    "module": "hs.network",
    "name": "interfaceName",
    "type": "Function"
  },
  {
    "desc": "Returns a list of interfaces currently active for the system.",
    "module": "hs.network",
    "name": "interfaces",
    "type": "Function"
  },
  {
    "desc": "Returns the names of the primary IPv4 and IPv6 interfaces.",
    "module": "hs.network",
    "name": "primaryInterfaces",
    "type": "Function"
  },
  {
    "desc": "This sub-module provides access to the current location set configuration settings in the system's dynamic store.",
    "name": "hs.network.configuration",
    "type": "Module"
  },
  {
    "desc": "Opens a session to the dynamic store maintained by the System Configuration server.",
    "module": "hs.network.configuration",
    "name": "open",
    "type": "Constructor"
  },
  {
    "desc": "Returns the name of the computeras specified in the Sharing Preferences, and its string encoding",
    "module": "hs.network.configuration",
    "name": "computerName",
    "type": "Method"
  },
  {
    "desc": "Returns the name of the user currently logged into the system, including the users id and primary group id",
    "module": "hs.network.configuration",
    "name": "consoleUser",
    "type": "Method"
  },
  {
    "desc": "Return the contents of the store for the specified keys or keys matching the specified pattern(s)",
    "module": "hs.network.configuration",
    "name": "contents",
    "type": "Method"
  },
  {
    "desc": "Return the DHCP information for the specified service or the primary service if no parameter is specified.",
    "module": "hs.network.configuration",
    "name": "dhcpInfo",
    "type": "Method"
  },
  {
    "desc": "Returns the current local host name for the computer",
    "module": "hs.network.configuration",
    "name": "hostname",
    "type": "Method"
  },
  {
    "desc": "Return the keys in the dynamic store which match the specified pattern",
    "module": "hs.network.configuration",
    "name": "keys",
    "type": "Method"
  },
  {
    "desc": "Returns the current location identifier",
    "module": "hs.network.configuration",
    "name": "location",
    "type": "Method"
  },
  {
    "desc": "Returns all configured locations",
    "module": "hs.network.configuration",
    "name": "locations",
    "type": "Method"
  },
  {
    "desc": "Specify the key(s) or key pattern(s) to monitor for changes.",
    "module": "hs.network.configuration",
    "name": "monitorKeys",
    "type": "Method"
  },
  {
    "desc": "Returns information about the currently active proxies, if any",
    "module": "hs.network.configuration",
    "name": "proxies",
    "type": "Method"
  },
  {
    "desc": "Set or remove the callback function for a store object",
    "module": "hs.network.configuration",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Switches to a new location",
    "module": "hs.network.configuration",
    "name": "setLocation",
    "type": "Method"
  },
  {
    "desc": "Starts watching the store object for changes to the monitored keys and invokes the callback function (if any) when a change occurs.",
    "module": "hs.network.configuration",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops watching the store object for changes.",
    "module": "hs.network.configuration",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "This sub-module provides functions for acquiring host information, such as hostnames, addresses, and reachability.",
    "name": "hs.network.host",
    "type": "Module"
  },
  {
    "desc": "Get IP addresses for the hostname specified.",
    "module": "hs.network.host",
    "name": "addressesForHostname",
    "type": "Function"
  },
  {
    "desc": "Get hostnames for the IP address specified.",
    "module": "hs.network.host",
    "name": "hostnamesForAddress",
    "type": "Function"
  },
  {
    "desc": "Get the reachability status for the IP address specified.",
    "module": "hs.network.host",
    "name": "reachabilityForAddress",
    "type": "Function"
  },
  {
    "desc": "Get the reachability status for the IP address specified.",
    "module": "hs.network.host",
    "name": "reachabilityForHostname",
    "type": "Function"
  },
  {
    "desc": "Cancels an in-progress asynchronous host resolution.",
    "module": "hs.network.host",
    "name": "cancel",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not resolution is still in progress for an asynchronous query.",
    "module": "hs.network.host",
    "name": "isRunning",
    "type": "Method"
  },
  {
    "desc": "This module provides a basic ping function which can test host availability. Ping is a network diagnostic tool commonly found in most operating systems which can be used to test if a route to a specified host exists and if that host is responding to network traffic.",
    "name": "hs.network.ping",
    "type": "Module"
  },
  {
    "desc": "Test server availability by pinging it with ICMP Echo Requests.",
    "module": "hs.network.ping",
    "name": "ping",
    "type": "Constructor"
  },
  {
    "desc": "Returns a string containing the resolved IPv4 or IPv6 address this pingObject is sending echo requests to.",
    "module": "hs.network.ping",
    "name": "address",
    "type": "Method"
  },
  {
    "desc": "Cancels an in progress ping process, terminating it immediately",
    "module": "hs.network.ping",
    "name": "cancel",
    "type": "Method"
  },
  {
    "desc": "Get or set the number of ICMP Echo Requests that will be sent by the ping process",
    "module": "hs.network.ping",
    "name": "count",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the ping process is currently paused.",
    "module": "hs.network.ping",
    "name": "isPaused",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the ping process is currently active.",
    "module": "hs.network.ping",
    "name": "isRunning",
    "type": "Method"
  },
  {
    "desc": "Returns a table containing information about the ICMP Echo packets sent by this pingObject.",
    "module": "hs.network.ping",
    "name": "packets",
    "type": "Method"
  },
  {
    "desc": "Pause an in progress ping process.",
    "module": "hs.network.ping",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Resume an in progress ping process, if it has been paused.",
    "module": "hs.network.ping",
    "name": "resume",
    "type": "Method"
  },
  {
    "desc": "Returns the number of ICMP Echo Requests which have been sent.",
    "module": "hs.network.ping",
    "name": "sent",
    "type": "Method"
  },
  {
    "desc": "Returns the hostname or ip address string given to the [hs.network.ping.ping](#ping) constructor.",
    "module": "hs.network.ping",
    "name": "server",
    "type": "Method"
  },
  {
    "desc": "Set or remoce the callback function for the pingObject.",
    "module": "hs.network.ping",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Returns a string containing summary information about the ping process.",
    "module": "hs.network.ping",
    "name": "summary",
    "type": "Method"
  },
  {
    "desc": "Provides lower-level access to the ICMP Echo Request infrastructure used by the hs.network.ping module. In general, you should not need to use this module directly unless you have specific requirements not met by the hs.network.ping module and the `hs.network.ping` object methods.",
    "name": "hs.network.ping.echoRequest",
    "type": "Module"
  },
  {
    "desc": "Creates a new ICMP Echo Request object for the server specified.",
    "module": "hs.network.ping.echoRequest",
    "name": "echoRequest",
    "type": "Constructor"
  },
  {
    "desc": "Get or set the address family the echoRequestObject should communicate with.",
    "module": "hs.network.ping.echoRequest",
    "name": "acceptAddressFamily",
    "type": "Method"
  },
  {
    "desc": "Returns a string representation for the server's IP address, or a boolean if address resolution has not completed yet.",
    "module": "hs.network.ping.echoRequest",
    "name": "hostAddress",
    "type": "Method"
  },
  {
    "desc": "Returns the host address family currently in use by this echoRequestObject.",
    "module": "hs.network.ping.echoRequest",
    "name": "hostAddressFamily",
    "type": "Method"
  },
  {
    "desc": "Returns the name of the target host as provided to the echoRequestObject's constructor",
    "module": "hs.network.ping.echoRequest",
    "name": "hostName",
    "type": "Method"
  },
  {
    "desc": "Returns the identifier number for the echoRequestObject.",
    "module": "hs.network.ping.echoRequest",
    "name": "identifier",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean indicating whether or not this echoRequestObject is currently listening for ICMP Echo Replies.",
    "module": "hs.network.ping.echoRequest",
    "name": "isRunning",
    "type": "Method"
  },
  {
    "desc": "The sequence number that will be used for the next ICMP packet sent by this object.",
    "module": "hs.network.ping.echoRequest",
    "name": "nextSequenceNumber",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the callback should receive all unexpected packets or only those which carry our identifier.",
    "module": "hs.network.ping.echoRequest",
    "name": "seeAllUnexpectedPackets",
    "type": "Method"
  },
  {
    "desc": "Sends a single ICMP Echo Request packet.",
    "module": "hs.network.ping.echoRequest",
    "name": "sendPayload",
    "type": "Method"
  },
  {
    "desc": "Set or remove the object callback function",
    "module": "hs.network.ping.echoRequest",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Start the echoRequestObject by resolving the server's address and start listening for ICMP Echo Reply packets.",
    "module": "hs.network.ping.echoRequest",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stop listening for ICMP Echo Reply packets with this object.",
    "module": "hs.network.ping.echoRequest",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "This sub-module can be used to determine the reachability of a target host. A remote host is considered reachable when a data packet, sent by an application into the network stack, can leave the local device. Reachability does not guarantee that the data packet will actually be received by the host.",
    "name": "hs.network.reachability",
    "type": "Module"
  },
  {
    "desc": "",
    "module": "hs.network.reachability",
    "name": "flags",
    "type": "Constant"
  },
  {
    "desc": "Returns a reachability object for the specified network address.",
    "module": "hs.network.reachability",
    "name": "forAddress",
    "type": "Constructor"
  },
  {
    "desc": "Returns a reachability object for the specified network address from the specified localAddress.",
    "module": "hs.network.reachability",
    "name": "forAddressPair",
    "type": "Constructor"
  },
  {
    "desc": "Returns a reachability object for the specified host.",
    "module": "hs.network.reachability",
    "name": "forHostName",
    "type": "Constructor"
  },
  {
    "desc": "Creates a reachability object for testing internet access",
    "module": "hs.network.reachability",
    "name": "internet",
    "type": "Constructor"
  },
  {
    "desc": "Creates a reachability object for testing IPv4 link local networking",
    "module": "hs.network.reachability",
    "name": "linkLocal",
    "type": "Constructor"
  },
  {
    "desc": "Set or remove the callback function for a reachability object",
    "module": "hs.network.reachability",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Starts watching the reachability object for changes and invokes the callback function (if any) when a change occurs.",
    "module": "hs.network.reachability",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Returns the reachability status for the object",
    "module": "hs.network.reachability",
    "name": "status",
    "type": "Method"
  },
  {
    "desc": "Returns a string representation of the reachability status for the object",
    "module": "hs.network.reachability",
    "name": "statusString",
    "type": "Method"
  },
  {
    "desc": "Stops watching the reachability object for changes.",
    "module": "hs.network.reachability",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Contains two low latency audio recognizers for different mouth noises, which can be used to trigger actions like scrolling or clicking.",
    "name": "hs.noises",
    "type": "Module"
  },
  {
    "desc": "Creates a new listener for mouth noise recognition",
    "module": "hs.noises",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts listening to the microphone and passing the audio to the recognizer.",
    "module": "hs.noises",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the listener from recording and analyzing microphone input.",
    "module": "hs.noises",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "This module allows you to create on screen notifications in the User Notification Center located at the right of the users screen.",
    "name": "hs.notify",
    "type": "Module"
  },
  {
    "desc": "Convenience array of the possible activation types for a notification, and their reverse for reference.",
    "module": "hs.notify",
    "name": "activationTypes",
    "type": "Constant"
  },
  {
    "desc": "The string representation of the default notification sound. Use `hs.notify:soundName()` or set the `soundName` attribute in `hs:notify.new()`, to this constant, if you want to use the default sound",
    "module": "hs.notify",
    "name": "defaultNotificationSound",
    "type": "Constant"
  },
  {
    "desc": "A table containing the registered callback functions and their tags.",
    "module": "hs.notify",
    "name": "registry",
    "type": "Variable"
  },
  {
    "desc": "A value indicating whether or not a missing notification function tag should cause a warning.  Defaults to `true`.",
    "module": "hs.notify",
    "name": "warnAboutMissingFunctionTag",
    "type": "Variable"
  },
  {
    "desc": "Registers a function callback with the specified tag for a notification. The callback function will be invoked when the user clicks on or interacts with a notification.",
    "module": "hs.notify",
    "name": "register",
    "type": "Function"
  },
  {
    "desc": "Unregisters a function callback so that it is no longer available as a callback when notifications corresponding to the specified entry are interacted with.",
    "module": "hs.notify",
    "name": "unregister",
    "type": "Function"
  },
  {
    "desc": "Unregisters all functions registered as callbacks.",
    "module": "hs.notify",
    "name": "unregisterall",
    "type": "Function"
  },
  {
    "desc": "Withdraw all delivered notifications from Hammerspoon",
    "module": "hs.notify",
    "name": "withdrawAll",
    "type": "Function"
  },
  {
    "desc": "Withdraw all scheduled notifications from Hammerspoon",
    "module": "hs.notify",
    "name": "withdrawAllScheduled",
    "type": "Function"
  },
  {
    "desc": "Creates a new notification object",
    "module": "hs.notify",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Shorthand constructor to create and show simple notifications",
    "module": "hs.notify",
    "name": "show",
    "type": "Constructor"
  },
  {
    "desc": "Get or set the label of a notification's action button",
    "module": "hs.notify",
    "name": "actionButtonTitle",
    "type": "Method"
  },
  {
    "desc": "Returns how the notification was activated by the user.",
    "module": "hs.notify",
    "name": "activationType",
    "type": "Method"
  },
  {
    "desc": "Returns the date and time when a notification was delivered",
    "module": "hs.notify",
    "name": "actualDeliveryDate",
    "type": "Method"
  },
  {
    "desc": "Get or set whether a notification should be presented even if this overrides Notification Center's decision process.",
    "module": "hs.notify",
    "name": "alwaysPresent",
    "type": "Method"
  },
  {
    "desc": "Get or set whether a notification should automatically withdraw once activated",
    "module": "hs.notify",
    "name": "autoWithdraw",
    "type": "Method"
  },
  {
    "desc": "Get or set a notification's content image.",
    "module": "hs.notify",
    "name": "contentImage",
    "type": "Method"
  },
  {
    "desc": "Returns whether the notification has been delivered to the Notification Center",
    "module": "hs.notify",
    "name": "delivered",
    "type": "Method"
  },
  {
    "desc": "Return the name of the function tag the notification will call when activated.",
    "module": "hs.notify",
    "name": "getFunctionTag",
    "type": "Method"
  },
  {
    "desc": "Get or set the presence of an action button in a notification",
    "module": "hs.notify",
    "name": "hasActionButton",
    "type": "Method"
  },
  {
    "desc": "Get or set the informative text of a notification",
    "module": "hs.notify",
    "name": "informativeText",
    "type": "Method"
  },
  {
    "desc": "Get or set the label of a notification's other button",
    "module": "hs.notify",
    "name": "otherButtonTitle",
    "type": "Method"
  },
  {
    "desc": "Returns whether the users Notification Center decided to display the notification",
    "module": "hs.notify",
    "name": "presented",
    "type": "Method"
  },
  {
    "desc": "This is a no-op included for backwards compatibility.",
    "module": "hs.notify",
    "name": "release",
    "type": "Method"
  },
  {
    "desc": "Schedules a notification for delivery in the future.",
    "module": "hs.notify",
    "name": "schedule",
    "type": "Method"
  },
  {
    "desc": "Delivers the notification immediately to the users Notification Center.",
    "module": "hs.notify",
    "name": "send",
    "type": "Method"
  },
  {
    "desc": "Set a notification's identification image (replace the Hammerspoon icon with a custom image)",
    "module": "hs.notify",
    "name": "setIdImage",
    "type": "Method"
  },
  {
    "desc": "Get or set the sound for a notification",
    "module": "hs.notify",
    "name": "soundName",
    "type": "Method"
  },
  {
    "desc": "Get or set the subtitle of a notification",
    "module": "hs.notify",
    "name": "subTitle",
    "type": "Method"
  },
  {
    "desc": "Get or set the title of a notification",
    "module": "hs.notify",
    "name": "title",
    "type": "Method"
  },
  {
    "desc": "Withdraws a delivered notification from the Notification Center.",
    "module": "hs.notify",
    "name": "withdraw",
    "type": "Method"
  },
  {
    "desc": "Execute Open Scripting Architecture (OSA) code - AppleScript and JavaScript",
    "name": "hs.osascript",
    "type": "Module"
  },
  {
    "desc": "Runs osascript code",
    "module": "hs.osascript",
    "name": "_osascript",
    "type": "Function"
  },
  {
    "desc": "Runs AppleScript code",
    "module": "hs.osascript",
    "name": "applescript",
    "type": "Function"
  },
  {
    "desc": "Runs JavaScript code",
    "module": "hs.osascript",
    "name": "javascript",
    "type": "Function"
  },
  {
    "desc": "Inspect/manipulate pasteboards (more commonly called clipboards). Both the system default pasteboard and custom named pasteboards can be interacted with.",
    "name": "hs.pasteboard",
    "type": "Module"
  },
  {
    "desc": "An array whose elements are a table containing the content types for each element on the clipboard.",
    "module": "hs.pasteboard",
    "name": "allContentTypes",
    "type": "Function"
  },
  {
    "desc": "Gets the number of times the pasteboard owner has changed",
    "module": "hs.pasteboard",
    "name": "changeCount",
    "type": "Function"
  },
  {
    "desc": "Clear the contents of the pasteboard",
    "module": "hs.pasteboard",
    "name": "clearContents",
    "type": "Function"
  },
  {
    "desc": "Return the UTI strings of the data types for the first pasteboard item on the specified pasteboard.",
    "module": "hs.pasteboard",
    "name": "contentTypes",
    "type": "Function"
  },
  {
    "desc": "Deletes a custom pasteboard",
    "module": "hs.pasteboard",
    "name": "deletePasteboard",
    "type": "Function"
  },
  {
    "desc": "Gets the contents of the pasteboard",
    "module": "hs.pasteboard",
    "name": "getContents",
    "type": "Function"
  },
  {
    "desc": "Return the pasteboard type identifier strings for the specified pasteboard.",
    "module": "hs.pasteboard",
    "name": "pasteboardTypes",
    "type": "Function"
  },
  {
    "desc": "Returns all values in the first item on the pasteboard in a table that maps a UTI value to the raw data of the item",
    "module": "hs.pasteboard",
    "name": "readAllData",
    "type": "Function"
  },
  {
    "desc": "Returns the first item on the pasteboard with the specified UTI. The data on the pasteboard must be encoded as a keyed archive object conforming to NSKeyedArchiver.",
    "module": "hs.pasteboard",
    "name": "readArchiverDataForUTI",
    "type": "Function"
  },
  {
    "desc": "Returns one or more `hs.drawing.color` tables from the clipboard, or nil if no compatible objects are present.",
    "module": "hs.pasteboard",
    "name": "readColor",
    "type": "Function"
  },
  {
    "desc": "Returns the first item on the pasteboard with the specified UTI as raw data",
    "module": "hs.pasteboard",
    "name": "readDataForUTI",
    "type": "Function"
  },
  {
    "desc": "Returns one or more `hs.image` objects from the clipboard, or nil if no compatible objects are present.",
    "module": "hs.pasteboard",
    "name": "readImage",
    "type": "Function"
  },
  {
    "desc": "Returns the first item on the pasteboard with the specified UTI as a property list item",
    "module": "hs.pasteboard",
    "name": "readPListForUTI",
    "type": "Function"
  },
  {
    "desc": "Returns one or more `hs.sound` objects from the clipboard, or nil if no compatible objects are present.",
    "module": "hs.pasteboard",
    "name": "readSound",
    "type": "Function"
  },
  {
    "desc": "Returns one or more strings from the clipboard, or nil if no compatible objects are present.",
    "module": "hs.pasteboard",
    "name": "readString",
    "type": "Function"
  },
  {
    "desc": "Returns one or more `hs.styledtext` objects from the clipboard, or nil if no compatible objects are present.",
    "module": "hs.pasteboard",
    "name": "readStyledText",
    "type": "Function"
  },
  {
    "desc": "Returns one or more strings representing file or resource urls from the clipboard, or nil if no compatible objects are present.",
    "module": "hs.pasteboard",
    "name": "readURL",
    "type": "Function"
  },
  {
    "desc": "Sets the contents of the pasteboard",
    "module": "hs.pasteboard",
    "name": "setContents",
    "type": "Function"
  },
  {
    "desc": "Returns a table indicating what content types are available on the pasteboard.",
    "module": "hs.pasteboard",
    "name": "typesAvailable",
    "type": "Function"
  },
  {
    "desc": "Returns the name of a new pasteboard with a name that is guaranteed to be unique with respect to other pasteboards on the computer.",
    "module": "hs.pasteboard",
    "name": "uniquePasteboard",
    "type": "Function"
  },
  {
    "desc": "Stores in the pasteboard a given table of UTI to data mapping all at once",
    "module": "hs.pasteboard",
    "name": "writeAllData",
    "type": "Function"
  },
  {
    "desc": "Sets the pasteboard to the contents of the data and assigns its type to the specified UTI. The data will be encoded as an archive conforming to NSKeyedArchiver.",
    "module": "hs.pasteboard",
    "name": "writeArchiverDataForUTI",
    "type": "Function"
  },
  {
    "desc": "Sets the pasteboard to the contents of the data and assigns its type to the specified UTI.",
    "module": "hs.pasteboard",
    "name": "writeDataForUTI",
    "type": "Function"
  },
  {
    "desc": "Sets the pasteboard contents to the object or objects specified.",
    "module": "hs.pasteboard",
    "name": "writeObjects",
    "type": "Function"
  },
  {
    "desc": "Sets the pasteboard to the contents of the data and assigns its type to the specified UTI.",
    "module": "hs.pasteboard",
    "name": "writePListForUTI",
    "type": "Function"
  },
  {
    "desc": "Watch paths recursively for changes",
    "name": "hs.pathwatcher",
    "type": "Module"
  },
  {
    "desc": "Creates a new path watcher object",
    "module": "hs.pathwatcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts a path watcher",
    "module": "hs.pathwatcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops a path watcher",
    "module": "hs.pathwatcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Read and write Property List files",
    "name": "hs.plist",
    "type": "Module"
  },
  {
    "desc": "Loads a Property List file",
    "module": "hs.plist",
    "name": "read",
    "type": "Function"
  },
  {
    "desc": "Writes a Property List file",
    "module": "hs.plist",
    "name": "write",
    "type": "Function"
  },
  {
    "desc": "Inverts and/or lowers the color temperature of the screen(s) on a schedule, for a more pleasant experience at night",
    "name": "hs.redshift",
    "type": "Module"
  },
  {
    "desc": "A table holding the gamma values for given color temperatures; each key must be a color temperature number in K (useful values are between",
    "module": "hs.redshift",
    "name": "COLORRAMP",
    "type": "Variable"
  },
  {
    "desc": "Subscribes a callback to be notified when the color inversion status changes",
    "module": "hs.redshift",
    "name": "invertSubscribe",
    "type": "Function"
  },
  {
    "desc": "Unsubscribes a previously subscribed color inversion change callback",
    "module": "hs.redshift",
    "name": "invertUnsubscribe",
    "type": "Function"
  },
  {
    "desc": "Checks if the colors are currently inverted",
    "module": "hs.redshift",
    "name": "isInverted",
    "type": "Function"
  },
  {
    "desc": "Sets or clears a request for color inversion",
    "module": "hs.redshift",
    "name": "requestInvert",
    "type": "Function"
  },
  {
    "desc": "Sets the schedule and (re)starts the module",
    "module": "hs.redshift",
    "name": "start",
    "type": "Function"
  },
  {
    "desc": "Stops the module and disables color adjustment and color inversion",
    "module": "hs.redshift",
    "name": "stop",
    "type": "Function"
  },
  {
    "desc": "Sets or clears the user override for color temperature adjustment.",
    "module": "hs.redshift",
    "name": "toggle",
    "type": "Function"
  },
  {
    "desc": "Sets or clears the user override for color inversion.",
    "module": "hs.redshift",
    "name": "toggleInvert",
    "type": "Function"
  },
  {
    "desc": "Manipulate screens (i.e. monitors)",
    "name": "hs.screen",
    "type": "Module"
  },
  {
    "desc": "If set to `true`, the methods `hs.screen:toEast()`, `:toNorth()` etc. will disregard screens that lie perpendicularly to the desired axis",
    "module": "hs.screen",
    "name": "strictScreenInDirection",
    "type": "Variable"
  },
  {
    "desc": "Gets the current state of the screen-related accessibility settings",
    "module": "hs.screen",
    "name": "accessibilitySettings",
    "type": "Function"
  },
  {
    "desc": "Finds screens",
    "module": "hs.screen",
    "name": "find",
    "type": "Function"
  },
  {
    "desc": "Restore the gamma settings to defaults",
    "module": "hs.screen",
    "name": "restoreGamma",
    "type": "Function"
  },
  {
    "desc": "Returns a list of all connected and enabled screens, along with their \"position\" relative to the primary screen",
    "module": "hs.screen",
    "name": "screenPositions",
    "type": "Function"
  },
  {
    "desc": "Returns all the screens",
    "module": "hs.screen",
    "name": "allScreens",
    "type": "Constructor"
  },
  {
    "desc": "Returns the 'main' screen, i.e. the one containing the currently focused window",
    "module": "hs.screen",
    "name": "mainScreen",
    "type": "Constructor"
  },
  {
    "desc": "Gets the primary screen",
    "module": "hs.screen",
    "name": "primaryScreen",
    "type": "Constructor"
  },
  {
    "desc": "Transforms from the absolute coordinate space used by OSX/Hammerspoon to the screen's local",
    "module": "hs.screen",
    "name": "absoluteToLocal",
    "type": "Method"
  },
  {
    "desc": "Returns a table containing the screen modes supported by the screen. A screen mode is a combination of resolution, scaling factor and colour depth",
    "module": "hs.screen",
    "name": "availableModes",
    "type": "Method"
  },
  {
    "desc": "Returns a table describing the current screen mode",
    "module": "hs.screen",
    "name": "currentMode",
    "type": "Method"
  },
  {
    "desc": "Gets/Sets the desktop background image for a screen",
    "module": "hs.screen",
    "name": "desktopImageURL",
    "type": "Method"
  },
  {
    "desc": "Returns the screen frame, without the dock or menu.",
    "module": "hs.screen",
    "name": "frame",
    "type": "Method"
  },
  {
    "desc": "Returns the absolute rect of a given unit rect within this screen",
    "module": "hs.screen",
    "name": "fromUnitRect",
    "type": "Method"
  },
  {
    "desc": "Returns the screen frame, including the dock and menu.",
    "module": "hs.screen",
    "name": "fullFrame",
    "type": "Method"
  },
  {
    "desc": "Gets the screen's brightness",
    "module": "hs.screen",
    "name": "getBrightness",
    "type": "Method"
  },
  {
    "desc": "Gets the current whitepoint and blackpoint of the screen",
    "module": "hs.screen",
    "name": "getGamma",
    "type": "Method"
  },
  {
    "desc": "Returns a screen's unique ID",
    "module": "hs.screen",
    "name": "id",
    "type": "Method"
  },
  {
    "desc": "Transforms from the screen's local coordinate space, where `0,0` is at the screen's top left corner,",
    "module": "hs.screen",
    "name": "localToAbsolute",
    "type": "Method"
  },
  {
    "desc": "Returns the preferred name for the screen set by the manufacturer",
    "module": "hs.screen",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Gets the screen 'after' this one (in arbitrary order); this method wraps around to the first screen.",
    "module": "hs.screen",
    "name": "next",
    "type": "Method"
  },
  {
    "desc": "Return a given screen's position relative to the primary screen - see 'hs.screen.screenPositions()'",
    "module": "hs.screen",
    "name": "position",
    "type": "Method"
  },
  {
    "desc": "Gets the screen 'before' this one (in arbitrary order); this method wraps around to the last screen.",
    "module": "hs.screen",
    "name": "previous",
    "type": "Method"
  },
  {
    "desc": "Gets/Sets the rotation of a screen",
    "module": "hs.screen",
    "name": "rotate",
    "type": "Method"
  },
  {
    "desc": "Sets the screen's brightness",
    "module": "hs.screen",
    "name": "setBrightness",
    "type": "Method"
  },
  {
    "desc": "Sets the current white point and black point of the screen",
    "module": "hs.screen",
    "name": "setGamma",
    "type": "Method"
  },
  {
    "desc": "Sets the screen to a new mode",
    "module": "hs.screen",
    "name": "setMode",
    "type": "Method"
  },
  {
    "desc": "Sets the screen to be the primary display (i.e. contain the menubar and dock)",
    "module": "hs.screen",
    "name": "setPrimary",
    "type": "Method"
  },
  {
    "desc": "Saves an image of the screen to a JPG file",
    "module": "hs.screen",
    "name": "shotAsJPG",
    "type": "Method"
  },
  {
    "desc": "Saves an image of the screen to a PNG file",
    "module": "hs.screen",
    "name": "shotAsPNG",
    "type": "Method"
  },
  {
    "desc": "Captures an image of the screen",
    "module": "hs.screen",
    "name": "snapshot",
    "type": "Method"
  },
  {
    "desc": "Gets the first screen to the east of this one, ordered by proximity to its center or a specified point.",
    "module": "hs.screen",
    "name": "toEast",
    "type": "Method"
  },
  {
    "desc": "Gets the first screen to the north of this one, ordered by proximity to its center or a specified point.",
    "module": "hs.screen",
    "name": "toNorth",
    "type": "Method"
  },
  {
    "desc": "Gets the first screen to the south of this one, ordered by proximity to its center or a specified point.",
    "module": "hs.screen",
    "name": "toSouth",
    "type": "Method"
  },
  {
    "desc": "Returns the unit rect of a given rect, relative to this screen",
    "module": "hs.screen",
    "name": "toUnitRect",
    "type": "Method"
  },
  {
    "desc": "Gets the first screen to the west of this one, ordered by proximity to its center or a specified point.",
    "module": "hs.screen",
    "name": "toWest",
    "type": "Method"
  },
  {
    "desc": "Watch for screen layout changes",
    "name": "hs.screen.watcher",
    "type": "Module"
  },
  {
    "desc": "Creates a new screen-watcher.",
    "module": "hs.screen.watcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new screen-watcher that is also called when the active screen changes.",
    "module": "hs.screen.watcher",
    "name": "newWithActiveScreen",
    "type": "Constructor"
  },
  {
    "desc": "Starts the screen watcher, making it so fn is called each time the screen arrangement changes",
    "module": "hs.screen.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the screen watcher's fn from getting called until started again",
    "module": "hs.screen.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Serialize simple Lua variables across Hammerspoon launches",
    "name": "hs.settings",
    "type": "Module"
  },
  {
    "desc": "A string representing the ID of the bundle Hammerspoon's settings are stored in . You can use this with the command line tool `defaults` or other tools which allow access to the `User Defaults` of applications, to access these outside of Hammerspoon",
    "module": "hs.settings",
    "name": "bundleID",
    "type": "Constant"
  },
  {
    "desc": "A string representing the expected format of date and time when presenting the date and time as a string to `hs.setDate()`.  e.g. `os.date(hs.settings.dateFormat)`",
    "module": "hs.settings",
    "name": "dateFormat",
    "type": "Constant"
  },
  {
    "desc": "Deletes a setting",
    "module": "hs.settings",
    "name": "clear",
    "type": "Function"
  },
  {
    "desc": "Loads a setting",
    "module": "hs.settings",
    "name": "get",
    "type": "Function"
  },
  {
    "desc": "Gets all of the previously stored setting names",
    "module": "hs.settings",
    "name": "getKeys",
    "type": "Function"
  },
  {
    "desc": "Saves a setting with common datatypes",
    "module": "hs.settings",
    "name": "set",
    "type": "Function"
  },
  {
    "desc": "Saves a setting with raw binary data",
    "module": "hs.settings",
    "name": "setData",
    "type": "Function"
  },
  {
    "desc": "Saves a setting with a date",
    "module": "hs.settings",
    "name": "setDate",
    "type": "Function"
  },
  {
    "desc": "Get or set a watcher to invoke a callback when the specified settings key changes",
    "module": "hs.settings",
    "name": "watchKey",
    "type": "Function"
  },
  {
    "desc": "Share items with the macOS Sharing Services under the control of Hammerspoon.",
    "name": "hs.sharing",
    "type": "Module"
  },
  {
    "desc": "A table containing the predefined sharing service labels defined by Apple.",
    "module": "hs.sharing",
    "name": "builtinSharingServices",
    "type": "Constant"
  },
  {
    "desc": "Returns a table representing a file URL for the path specified.",
    "module": "hs.sharing",
    "name": "fileURL",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing the sharing service identifiers which can share the items specified.",
    "module": "hs.sharing",
    "name": "shareTypesFor",
    "type": "Function"
  },
  {
    "desc": "Returns a table representing the URL specified.",
    "module": "hs.sharing",
    "name": "URL",
    "type": "Function"
  },
  {
    "desc": "Creates a new sharing object of the type specified by the identifier provided.",
    "module": "hs.sharing",
    "name": "newShare",
    "type": "Constructor"
  },
  {
    "desc": "The account name used by the sharing service when posting on Twitter or Sina Weibo.",
    "module": "hs.sharing",
    "name": "accountName",
    "type": "Method"
  },
  {
    "desc": "Returns an alternate image, if one exists, representing the sharing service provided by this sharing object.",
    "module": "hs.sharing",
    "name": "alternateImage",
    "type": "Method"
  },
  {
    "desc": "If the sharing service provides an array of the attachments included when the data was posted, this method will return an array of file URL tables of the attachments.",
    "module": "hs.sharing",
    "name": "attachments",
    "type": "Method"
  },
  {
    "desc": "Set or clear the callback for the sharingObject.",
    "module": "hs.sharing",
    "name": "callback",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean specifying whether or not all of the items specified can be shared with the sharing service represented by the sharingObject.",
    "module": "hs.sharing",
    "name": "canShareItems",
    "type": "Method"
  },
  {
    "desc": "Returns an image, if one exists, representing the sharing service provided by this sharing object.",
    "module": "hs.sharing",
    "name": "image",
    "type": "Method"
  },
  {
    "desc": "If the sharing service provides the message body that was posted when sharing has completed, this method will return the message body as a string.",
    "module": "hs.sharing",
    "name": "messageBody",
    "type": "Method"
  },
  {
    "desc": "If the sharing service provides a permanent link to the post when sharing has completed, this method will return the corresponding URL.",
    "module": "hs.sharing",
    "name": "permanentLink",
    "type": "Method"
  },
  {
    "desc": "Get or set the subject to be used when the sharing service performs its sharing method.",
    "module": "hs.sharing",
    "name": "recipients",
    "type": "Method"
  },
  {
    "desc": "The service identifier for the sharing service represented by the sharingObject.",
    "module": "hs.sharing",
    "name": "serviceName",
    "type": "Method"
  },
  {
    "desc": "Shares the items specified with the sharing service represented by the sharingObject.",
    "module": "hs.sharing",
    "name": "shareItems",
    "type": "Method"
  },
  {
    "desc": "Get or set the subject to be used when the sharing service performs its sharing method.",
    "module": "hs.sharing",
    "name": "subject",
    "type": "Method"
  },
  {
    "desc": "The title for the sharing service represented by the sharingObject.",
    "module": "hs.sharing",
    "name": "title",
    "type": "Method"
  },
  {
    "desc": "Talk to custom protocols using asynchronous TCP sockets",
    "name": "hs.socket",
    "type": "Module"
  },
  {
    "desc": "Timeout for the socket operations, in seconds. New [`hs.socket`](#new) objects will be created with this timeout value, but can individually change it with the [`setTimeout`](#setTimeout) method",
    "module": "hs.socket",
    "name": "timeout",
    "type": "Variable"
  },
  {
    "desc": "Parses a binary socket address structure into a readable table",
    "module": "hs.socket",
    "name": "parseAddress",
    "type": "Function"
  },
  {
    "desc": "Creates an unconnected asynchronous TCP socket object",
    "module": "hs.socket",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates and binds an [`hs.socket`](#new) instance to a port or path (Unix domain socket) for listening",
    "module": "hs.socket",
    "name": "server",
    "type": "Constructor"
  },
  {
    "desc": "Connects an unconnected [`hs.socket`](#new) instance",
    "module": "hs.socket",
    "name": "connect",
    "type": "Method"
  },
  {
    "desc": "Returns the connection status of the [`hs.socket`](#new) instance",
    "module": "hs.socket",
    "name": "connected",
    "type": "Method"
  },
  {
    "desc": "Returns the number of connections to the socket, which is at most 1 for default (non-listening) sockets",
    "module": "hs.socket",
    "name": "connections",
    "type": "Method"
  },
  {
    "desc": "Disconnects the [`hs.socket`](#new) instance, freeing it for reuse",
    "module": "hs.socket",
    "name": "disconnect",
    "type": "Method"
  },
  {
    "desc": "Returns information on the [`hs.socket`](#new) instance",
    "module": "hs.socket",
    "name": "info",
    "type": "Method"
  },
  {
    "desc": "Binds an unconnected [`hs.socket`](#new) instance to a port or path (Unix domain socket) for listening",
    "module": "hs.socket",
    "name": "listen",
    "type": "Method"
  },
  {
    "desc": "Read data from the socket. Results are passed to the [callback function](#setCallback), which must be set to use this method",
    "module": "hs.socket",
    "name": "read",
    "type": "Method"
  },
  {
    "desc": "Alias for [`hs.socket:read`](#read)",
    "module": "hs.socket",
    "name": "receive",
    "type": "Method"
  },
  {
    "desc": "Alias for [`hs.socket:write`](#write)",
    "module": "hs.socket",
    "name": "send",
    "type": "Method"
  },
  {
    "desc": "Sets the read callback for the [`hs.socket`](#new) instance. Must be set to read data from the socket",
    "module": "hs.socket",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Sets the timeout for the socket operations. If the timeout value is negative, the operations will not use a timeout, which is the default",
    "module": "hs.socket",
    "name": "setTimeout",
    "type": "Method"
  },
  {
    "desc": "Secures the socket with TLS. The socket will disconnect immediately if TLS negotiation fails",
    "module": "hs.socket",
    "name": "startTLS",
    "type": "Method"
  },
  {
    "desc": "Write data to the socket",
    "module": "hs.socket",
    "name": "write",
    "type": "Method"
  },
  {
    "desc": "Talk to custom protocols using asynchronous UDP sockets",
    "name": "hs.socket.udp",
    "type": "Module"
  },
  {
    "desc": "Timeout for the socket operations, in seconds. New [`hs.socket.udp`](#new) objects will be created with this timeout value, but can individually change it with the [`setTimeout`](#setTimeout) method",
    "module": "hs.socket.udp",
    "name": "timeout",
    "type": "Variable"
  },
  {
    "desc": "Alias for [`hs.socket.parseAddress`](./hs.socket.html#parseAddress)",
    "module": "hs.socket.udp",
    "name": "parseAddress",
    "type": "Function"
  },
  {
    "desc": "Creates an unconnected asynchronous UDP socket object",
    "module": "hs.socket.udp",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates and binds an [`hs.socket.udp`](#new) instance to a port for listening",
    "module": "hs.socket.udp",
    "name": "server",
    "type": "Constructor"
  },
  {
    "desc": "Enables broadcasting on the underlying socket",
    "module": "hs.socket.udp",
    "name": "broadcast",
    "type": "Method"
  },
  {
    "desc": "Immediately closes the underlying socket, freeing the [`hs.socket.udp`](#new) instance for reuse. Any pending send operations are discarded",
    "module": "hs.socket.udp",
    "name": "close",
    "type": "Method"
  },
  {
    "desc": "Returns the closed status of the [`hs.socket.udp`](#new) instance",
    "module": "hs.socket.udp",
    "name": "closed",
    "type": "Method"
  },
  {
    "desc": "Connects an unconnected [`hs.socket.udp`](#new) instance",
    "module": "hs.socket.udp",
    "name": "connect",
    "type": "Method"
  },
  {
    "desc": "Returns the connection status of the [`hs.socket.udp`](#new) instance",
    "module": "hs.socket.udp",
    "name": "connected",
    "type": "Method"
  },
  {
    "desc": "Enables or disables IPv4 or IPv6 on the underlying socket. By default, both are enabled",
    "module": "hs.socket.udp",
    "name": "enableIPv",
    "type": "Method"
  },
  {
    "desc": "Returns information on the [`hs.socket.udp`](#new) instance",
    "module": "hs.socket.udp",
    "name": "info",
    "type": "Method"
  },
  {
    "desc": "Binds an unconnected [`hs.socket.udp`](#new) instance to a port for listening",
    "module": "hs.socket.udp",
    "name": "listen",
    "type": "Method"
  },
  {
    "desc": "Suspends reading of packets from the socket. Call one of the receive methods to resume",
    "module": "hs.socket.udp",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Sets the preferred IP version: IPv4, IPv6, or neutral (first to resolve)",
    "module": "hs.socket.udp",
    "name": "preferIPv",
    "type": "Method"
  },
  {
    "desc": "Alias for [`hs.socket.udp:receive`](#receive)",
    "module": "hs.socket.udp",
    "name": "read",
    "type": "Method"
  },
  {
    "desc": "Alias for [`hs.socket.udp:receiveOne`](#receiveOne)",
    "module": "hs.socket.udp",
    "name": "readOne",
    "type": "Method"
  },
  {
    "desc": "Reads packets from the socket as they arrive. Results are passed to the [callback function](#setCallback), which must be set to use this method",
    "module": "hs.socket.udp",
    "name": "receive",
    "type": "Method"
  },
  {
    "desc": "Reads a single packet from the socket. Results are passed to the [callback function](#setCallback), which must be set to use this method",
    "module": "hs.socket.udp",
    "name": "receiveOne",
    "type": "Method"
  },
  {
    "desc": "Enables port reuse on the underlying socket",
    "module": "hs.socket.udp",
    "name": "reusePort",
    "type": "Method"
  },
  {
    "desc": "Sends a packet to the destination address",
    "module": "hs.socket.udp",
    "name": "send",
    "type": "Method"
  },
  {
    "desc": "Sets the maximum size of the buffer that will be allocated for receive operations",
    "module": "hs.socket.udp",
    "name": "setBufferSize",
    "type": "Method"
  },
  {
    "desc": "Sets the read callback for the [`hs.socket.udp`](#new) instance. Must be set to read data from the socket",
    "module": "hs.socket.udp",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Sets the timeout for the socket operations. If the timeout value is negative, the operations will not use a timeout, which is the default",
    "module": "hs.socket.udp",
    "name": "setTimeout",
    "type": "Method"
  },
  {
    "desc": "Alias for [`hs.socket.udp:send`](#send)",
    "module": "hs.socket.udp",
    "name": "write",
    "type": "Method"
  },
  {
    "desc": "Load/play/manipulate sound files",
    "name": "hs.sound",
    "type": "Module"
  },
  {
    "desc": "Gets the supported sound file types",
    "module": "hs.sound",
    "name": "soundFileTypes",
    "type": "Function"
  },
  {
    "desc": "Gets the supported UTI sound file formats",
    "module": "hs.sound",
    "name": "soundTypes",
    "type": "Function"
  },
  {
    "desc": "Gets a table of available system sounds",
    "module": "hs.sound",
    "name": "systemSounds",
    "type": "Function"
  },
  {
    "desc": "Creates an `hs.sound` object from a file",
    "module": "hs.sound",
    "name": "getByFile",
    "type": "Constructor"
  },
  {
    "desc": "Creates an `hs.sound` object from a named sound",
    "module": "hs.sound",
    "name": "getByName",
    "type": "Constructor"
  },
  {
    "desc": "Get or set the current seek offset within an `hs.sound` object.",
    "module": "hs.sound",
    "name": "currentTime",
    "type": "Method"
  },
  {
    "desc": "Get or set the playback device to use for an `hs.sound` object",
    "module": "hs.sound",
    "name": "device",
    "type": "Method"
  },
  {
    "desc": "Gets the length of an `hs.sound` object",
    "module": "hs.sound",
    "name": "duration",
    "type": "Method"
  },
  {
    "desc": "Gets the current playback state of an `hs.sound` object",
    "module": "hs.sound",
    "name": "isPlaying",
    "type": "Method"
  },
  {
    "desc": "Get or set the looping behaviour of an `hs.sound` object",
    "module": "hs.sound",
    "name": "loopSound",
    "type": "Method"
  },
  {
    "desc": "Get or set the name of an `hs.sound` object",
    "module": "hs.sound",
    "name": "name",
    "type": "Method"
  },
  {
    "desc": "Pauses an `hs.sound` object",
    "module": "hs.sound",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Plays an `hs.sound` object",
    "module": "hs.sound",
    "name": "play",
    "type": "Method"
  },
  {
    "desc": "Resumes playing a paused `hs.sound` object",
    "module": "hs.sound",
    "name": "resume",
    "type": "Method"
  },
  {
    "desc": "Set or remove the callback for receiving completion notification for the sound object.",
    "module": "hs.sound",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Stops playing an `hs.sound` object",
    "module": "hs.sound",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Get or set whether a sound should be stopped when Hammerspoon reloads its configuration",
    "module": "hs.sound",
    "name": "stopOnReload",
    "type": "Method"
  },
  {
    "desc": "Get or set the playback volume of an `hs.sound` object",
    "module": "hs.sound",
    "name": "volume",
    "type": "Method"
  },
  {
    "desc": "Watches for the current Space being changed",
    "name": "hs.spaces.watcher",
    "type": "Module"
  },
  {
    "desc": "Creates a new watcher for Space change events",
    "module": "hs.spaces.watcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts the Spaces watcher",
    "module": "hs.spaces.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the Spaces watcher",
    "module": "hs.spaces.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "This module provides access to the Speech Synthesizer component of OS X.",
    "name": "hs.speech",
    "type": "Module"
  },
  {
    "desc": "Returns a table containing a variety of properties describing and defining the specified voice.",
    "module": "hs.speech",
    "name": "attributesForVoice",
    "type": "Function"
  },
  {
    "desc": "Returns a list of the currently installed voices for speech synthesis.",
    "module": "hs.speech",
    "name": "availableVoices",
    "type": "Function"
  },
  {
    "desc": "Returns the name of the currently selected default voice for the user.  This voice is the voice selected in the System Preferences for Dictation & Speech as the System Voice.",
    "module": "hs.speech",
    "name": "defaultVoice",
    "type": "Function"
  },
  {
    "desc": "Returns whether or not the system is currently using a speech synthesizer in any application to generate speech.",
    "module": "hs.speech",
    "name": "isAnyApplicationSpeaking",
    "type": "Function"
  },
  {
    "desc": "Creates a new speech synthesizer object for use by Hammerspoon.",
    "module": "hs.speech",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Resumes a paused speech synthesizer.",
    "module": "hs.speech",
    "name": "continue",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the synthesizer is currently paused.",
    "module": "hs.speech",
    "name": "isPaused",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the synthesizer is currently speaking, either to an audio device or to a file.",
    "module": "hs.speech",
    "name": "isSpeaking",
    "type": "Method"
  },
  {
    "desc": "Gets or sets the pitch modulation for the synthesizer's voice.",
    "module": "hs.speech",
    "name": "modulation",
    "type": "Method"
  },
  {
    "desc": "Pauses the output of the speech synthesizer.",
    "module": "hs.speech",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Returns the phonemes which would be spoken if the text were to be synthesized.",
    "module": "hs.speech",
    "name": "phonemes",
    "type": "Method"
  },
  {
    "desc": "Returns an array of the phonetic symbols recognized by the synthesizer for the current voice.",
    "module": "hs.speech",
    "name": "phoneticSymbols",
    "type": "Method"
  },
  {
    "desc": "Gets or sets the base pitch for the synthesizer's voice.",
    "module": "hs.speech",
    "name": "pitch",
    "type": "Method"
  },
  {
    "desc": "Gets or sets the synthesizers speaking rate (words per minute).",
    "module": "hs.speech",
    "name": "rate",
    "type": "Method"
  },
  {
    "desc": "Reset a synthesizer back to its default state.",
    "module": "hs.speech",
    "name": "reset",
    "type": "Method"
  },
  {
    "desc": "Sets or removes a callback function for the synthesizer.",
    "module": "hs.speech",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Starts speaking the provided text through the system's current audio device.",
    "module": "hs.speech",
    "name": "speak",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not this synthesizer is currently generating speech.",
    "module": "hs.speech",
    "name": "speaking",
    "type": "Method"
  },
  {
    "desc": "Starts speaking the provided text and saves the audio as an AIFF file.",
    "module": "hs.speech",
    "name": "speakToFile",
    "type": "Method"
  },
  {
    "desc": "Stops the output of the speech synthesizer.",
    "module": "hs.speech",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Gets or sets whether or not the synthesizer uses the speech feedback window.",
    "module": "hs.speech",
    "name": "usesFeedbackWindow",
    "type": "Method"
  },
  {
    "desc": "Gets or sets the active voice for a synthesizer.",
    "module": "hs.speech",
    "name": "voice",
    "type": "Method"
  },
  {
    "desc": "Gets or sets the synthesizers speaking volume.",
    "module": "hs.speech",
    "name": "volume",
    "type": "Method"
  },
  {
    "desc": "This module provides access to the Speech Recognizer component of OS X.",
    "name": "hs.speech.listener",
    "type": "Module"
  },
  {
    "desc": "Creates a new speech recognizer object for use by Hammerspoon.",
    "module": "hs.speech.listener",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Get or set whether or not the speech recognizer should block other recognizers when it is active.",
    "module": "hs.speech.listener",
    "name": "blocksOtherRecognizers",
    "type": "Method"
  },
  {
    "desc": "Get or set the commands this speech recognizer will listen for.",
    "module": "hs.speech.listener",
    "name": "commands",
    "type": "Method"
  },
  {
    "desc": "Disables the speech recognizer and removes it from the possible available speech recognizers.",
    "module": "hs.speech.listener",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the speech recognizer is active only when the Hammerspoon application is active.",
    "module": "hs.speech.listener",
    "name": "foregroundOnly",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean value indicating whether or not the recognizer is currently enabled (started).",
    "module": "hs.speech.listener",
    "name": "isListening",
    "type": "Method"
  },
  {
    "desc": "Sets or removes a callback function for the speech recognizer.",
    "module": "hs.speech.listener",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Make the speech recognizer active.",
    "module": "hs.speech.listener",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Disables the speech recognizer.",
    "module": "hs.speech.listener",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Get or set the title for a speech recognizer.",
    "module": "hs.speech.listener",
    "name": "title",
    "type": "Method"
  },
  {
    "desc": "Utility and management functions for Spoons",
    "name": "hs.spoons",
    "type": "Module"
  },
  {
    "desc": "Map a number of hotkeys according to a definition table",
    "module": "hs.spoons",
    "name": "bindHotkeysToSpec",
    "type": "Method"
  },
  {
    "desc": "Check if a given Spoon is installed.",
    "module": "hs.spoons",
    "name": "isInstalled",
    "type": "Method"
  },
  {
    "desc": "Check if a given Spoon is loaded.",
    "module": "hs.spoons",
    "name": "isLoaded",
    "type": "Method"
  },
  {
    "desc": "Return a list of installed/loaded Spoons",
    "module": "hs.spoons",
    "name": "list",
    "type": "Method"
  },
  {
    "desc": "Create a skeleton for a new Spoon",
    "module": "hs.spoons",
    "name": "newSpoon",
    "type": "Method"
  },
  {
    "desc": "Return full path of an object within a spoon directory, given its partial path.",
    "module": "hs.spoons",
    "name": "resource_path",
    "type": "Method"
  },
  {
    "desc": "Return path of the current spoon.",
    "module": "hs.spoons",
    "name": "script_path",
    "type": "Method"
  },
  {
    "desc": "Declaratively load and configure a Spoon",
    "module": "hs.spoons",
    "name": "use",
    "type": "Method"
  },
  {
    "desc": "Controls for Spotify music player",
    "name": "hs.spotify",
    "type": "Module"
  },
  {
    "desc": "Returned by `hs.spotify.getPlaybackState()` to indicates Spotify is paused",
    "module": "hs.spotify",
    "name": "state_paused",
    "type": "Constant"
  },
  {
    "desc": "Returned by `hs.spotify.getPlaybackState()` to indicates Spotify is playing",
    "module": "hs.spotify",
    "name": "state_playing",
    "type": "Constant"
  },
  {
    "desc": "Returned by `hs.spotify.getPlaybackState()` to indicates Spotify is stopped",
    "module": "hs.spotify",
    "name": "state_stopped",
    "type": "Constant"
  },
  {
    "desc": "Displays information for current track on screen",
    "module": "hs.spotify",
    "name": "displayCurrentTrack",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position forwards by 5 seconds",
    "module": "hs.spotify",
    "name": "ff",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the album of the current track",
    "module": "hs.spotify",
    "name": "getCurrentAlbum",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the artist of the current track",
    "module": "hs.spotify",
    "name": "getCurrentArtist",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the current track",
    "module": "hs.spotify",
    "name": "getCurrentTrack",
    "type": "Function"
  },
  {
    "desc": "Gets the duration (in seconds) of the current song",
    "module": "hs.spotify",
    "name": "getDuration",
    "type": "Function"
  },
  {
    "desc": "Gets the current playback state of Spotify",
    "module": "hs.spotify",
    "name": "getPlaybackState",
    "type": "Function"
  },
  {
    "desc": "Gets the playback position (in seconds) in the current song",
    "module": "hs.spotify",
    "name": "getPosition",
    "type": "Function"
  },
  {
    "desc": "Gets the Spotify volume setting",
    "module": "hs.spotify",
    "name": "getVolume",
    "type": "Function"
  },
  {
    "desc": "Returns whether Spotify is currently playing",
    "module": "hs.spotify",
    "name": "isPlaying",
    "type": "Function"
  },
  {
    "desc": "Returns whether Spotify is currently open. Most other functions in hs.spotify will automatically start the application, so this function can be used to guard against that.",
    "module": "hs.spotify",
    "name": "isRunning",
    "type": "Function"
  },
  {
    "desc": "Skips to the next Spotify track",
    "module": "hs.spotify",
    "name": "next",
    "type": "Function"
  },
  {
    "desc": "Pauses the current Spotify track",
    "module": "hs.spotify",
    "name": "pause",
    "type": "Function"
  },
  {
    "desc": "Plays the current Spotify track",
    "module": "hs.spotify",
    "name": "play",
    "type": "Function"
  },
  {
    "desc": "Toggles play/pause of current Spotify track",
    "module": "hs.spotify",
    "name": "playpause",
    "type": "Function"
  },
  {
    "desc": "Skips to previous Spotify track",
    "module": "hs.spotify",
    "name": "previous",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position backwards by 5 seconds",
    "module": "hs.spotify",
    "name": "rw",
    "type": "Function"
  },
  {
    "desc": "Sets the playback position in the current song",
    "module": "hs.spotify",
    "name": "setPosition",
    "type": "Function"
  },
  {
    "desc": "Sets the Spotify volume setting",
    "module": "hs.spotify",
    "name": "setVolume",
    "type": "Function"
  },
  {
    "desc": "Reduces the volume by 5",
    "module": "hs.spotify",
    "name": "volumeDown",
    "type": "Function"
  },
  {
    "desc": "Increases the volume by 5",
    "module": "hs.spotify",
    "name": "volumeUp",
    "type": "Function"
  },
  {
    "desc": "This module allows Hammerspoon to preform Spotlight metadata queries.",
    "name": "hs.spotlight",
    "type": "Module"
  },
  {
    "desc": "A list of defined attribute keys as discovered in the macOS 10.12 SDK framework headers.",
    "module": "hs.spotlight",
    "name": "commonAttributeKeys",
    "type": "Constant"
  },
  {
    "desc": "A table of key-value pairs describing predefined search scopes for Spotlight queries",
    "module": "hs.spotlight",
    "name": "definedSearchScopes",
    "type": "Constant"
  },
  {
    "desc": "Creates a new spotlightObject to use for Spotlight searches.",
    "module": "hs.spotlight",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new spotlightObject that limits its searches to the current results of another spotlightObject.",
    "module": "hs.spotlight",
    "name": "newWithin",
    "type": "Constructor"
  },
  {
    "desc": "Get or specify the specific messages that should generate a callback.",
    "module": "hs.spotlight",
    "name": "callbackMessages",
    "type": "Method"
  },
  {
    "desc": "Returns the number of results for the spotlightObject's query",
    "module": "hs.spotlight",
    "name": "count",
    "type": "Method"
  },
  {
    "desc": "Returns the grouped results for a Spotlight query.",
    "module": "hs.spotlight",
    "name": "groupedResults",
    "type": "Method"
  },
  {
    "desc": "Get or set the grouping attributes for the Spotlight query.",
    "module": "hs.spotlight",
    "name": "groupingAttributes",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean specifying whether or not the query is in the active gathering phase.",
    "module": "hs.spotlight",
    "name": "isGathering",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean specifying if the query is active or inactive.",
    "module": "hs.spotlight",
    "name": "isRunning",
    "type": "Method"
  },
  {
    "desc": "Specify the query string for the spotlightObject",
    "module": "hs.spotlight",
    "name": "queryString",
    "type": "Method"
  },
  {
    "desc": "Returns the spotlightItemObject at the specified index of the spotlightObject",
    "module": "hs.spotlight",
    "name": "resultAtIndex",
    "type": "Method"
  },
  {
    "desc": "Get or set the search scopes allowed for the Spotlight query.",
    "module": "hs.spotlight",
    "name": "searchScopes",
    "type": "Method"
  },
  {
    "desc": "Set or remove the callback function for the Spotlight search object.",
    "module": "hs.spotlight",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Get or set the sorting preferences for the results of a Spotlight query.",
    "module": "hs.spotlight",
    "name": "sortDescriptors",
    "type": "Method"
  },
  {
    "desc": "Begin the gathering phase of a Spotlight query.",
    "module": "hs.spotlight",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stop the Spotlight query.",
    "module": "hs.spotlight",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Get or set the time interval at which the spotlightObject will send \"didUpdate\" messages during the initial gathering phase.",
    "module": "hs.spotlight",
    "name": "updateInterval",
    "type": "Method"
  },
  {
    "desc": "Get or set the attributes for which value list summaries are produced for the Spotlight query.",
    "module": "hs.spotlight",
    "name": "valueListAttributes",
    "type": "Method"
  },
  {
    "desc": "Returns the value list summaries for the Spotlight query",
    "module": "hs.spotlight",
    "name": "valueLists",
    "type": "Method"
  },
  {
    "desc": "This sub-module is used to access results to a spotlightObject query which have been grouped by one or more attribute values.",
    "name": "hs.spotlight.group",
    "type": "Module"
  },
  {
    "desc": "Returns the name of the attribute the spotlightGroupObject results are grouped by.",
    "module": "hs.spotlight.group",
    "name": "attribute",
    "type": "Method"
  },
  {
    "desc": "Returns the number of query results contained in the spotlightGroupObject.",
    "module": "hs.spotlight.group",
    "name": "count",
    "type": "Method"
  },
  {
    "desc": "Returns the spotlightItemObject at the specified index of the spotlightGroupObject",
    "module": "hs.spotlight.group",
    "name": "resultAtIndex",
    "type": "Method"
  },
  {
    "desc": "Returns the subgroups of the spotlightGroupObject",
    "module": "hs.spotlight.group",
    "name": "subgroups",
    "type": "Method"
  },
  {
    "desc": "Returns the value for the attribute the spotlightGroupObject results are grouped by.",
    "module": "hs.spotlight.group",
    "name": "value",
    "type": "Method"
  },
  {
    "desc": "This sub-module is used to access the individual results of a spotlightObject or a spotlightGroupObject.",
    "name": "hs.spotlight.item",
    "type": "Module"
  },
  {
    "desc": "Returns a list of attributes associated with the spotlightItemObject",
    "module": "hs.spotlight.item",
    "name": "attributes",
    "type": "Method"
  },
  {
    "desc": "Returns the value for the specified attribute of the spotlightItemObject",
    "module": "hs.spotlight.item",
    "name": "valueForAttribute",
    "type": "Method"
  },
  {
    "desc": "Interact with SQLite databases",
    "name": "hs.sqlite3",
    "type": "Module"
  },
  {
    "desc": "Configure/control an Elgato Stream Deck",
    "name": "hs.streamdeck",
    "type": "Module"
  },
  {
    "desc": "Sets/clears a callback for reacting to device discovery events",
    "module": "hs.streamdeck",
    "name": "discoveryCallback",
    "type": "Function"
  },
  {
    "desc": "Gets an hs.streamdeck object for the specified device",
    "module": "hs.streamdeck",
    "name": "getDevice",
    "type": "Function"
  },
  {
    "desc": "Initialises the Stream Deck driver and sets a discovery callback",
    "module": "hs.streamdeck",
    "name": "init",
    "type": "Function"
  },
  {
    "desc": "Gets the number of Stream Deck devices connected",
    "module": "hs.streamdeck",
    "name": "numDevices",
    "type": "Function"
  },
  {
    "desc": "Sets/clears the button callback function for a deck",
    "module": "hs.streamdeck",
    "name": "buttonCallback",
    "type": "Method"
  },
  {
    "desc": "Gets the firmware version of a deck",
    "module": "hs.streamdeck",
    "name": "firmwareVersion",
    "type": "Method"
  },
  {
    "desc": "Resets a deck",
    "module": "hs.streamdeck",
    "name": "reset",
    "type": "Method"
  },
  {
    "desc": "Gets the serial number of a deck",
    "module": "hs.streamdeck",
    "name": "serialNumber",
    "type": "Method"
  },
  {
    "desc": "Sets the brightness of a deck",
    "module": "hs.streamdeck",
    "name": "setBrightness",
    "type": "Method"
  },
  {
    "desc": "Sets a button on the deck to the specified color",
    "module": "hs.streamdeck",
    "name": "setButtonColor",
    "type": "Method"
  },
  {
    "desc": "Sets the image of a button on the deck",
    "module": "hs.streamdeck",
    "name": "setButtonImage",
    "type": "Method"
  },
  {
    "desc": "This module adds support for controlling the style of the text in Hammerspoon.",
    "name": "hs.styledtext",
    "type": "Module"
  },
  {
    "desc": "A table containing the system default fonts and sizes.",
    "module": "hs.styledtext",
    "name": "defaultFonts",
    "type": "Constant"
  },
  {
    "desc": "A table for containing Font Trait masks for use with `hs.styledtext.fontNamesWithTraits(...)`",
    "module": "hs.styledtext",
    "name": "fontTraits",
    "type": "Constant"
  },
  {
    "desc": "A table of values indicating how the line for underlining or strike-through are applied to the text.",
    "module": "hs.styledtext",
    "name": "lineAppliesTo",
    "type": "Constant"
  },
  {
    "desc": "A table of patterns which apply to the line for underlining or strike-through.",
    "module": "hs.styledtext",
    "name": "linePatterns",
    "type": "Constant"
  },
  {
    "desc": "A table of styles which apply to the line for underlining or strike-through.",
    "module": "hs.styledtext",
    "name": "lineStyles",
    "type": "Constant"
  },
  {
    "desc": "Returns the font which most closely matches the given font and the trait change requested.",
    "module": "hs.styledtext",
    "name": "convertFont",
    "type": "Function"
  },
  {
    "desc": "Get information about the font Specified in the attributes table.",
    "module": "hs.styledtext",
    "name": "fontInfo",
    "type": "Function"
  },
  {
    "desc": "Returns the names of all installed fonts for the system.",
    "module": "hs.styledtext",
    "name": "fontNames",
    "type": "Function"
  },
  {
    "desc": "Returns the names of all installed fonts for the system with the specified traits.",
    "module": "hs.styledtext",
    "name": "fontNamesWithTraits",
    "type": "Function"
  },
  {
    "desc": "Create an `hs.styledtext` object from the string provided, converting ANSI SGR color and some font sequences into the appropriate attributes.  Attributes to apply to the resulting string may also be optionally provided.",
    "module": "hs.styledtext",
    "name": "ansi",
    "type": "Constructor"
  },
  {
    "desc": "Converts the provided data into a styled text string.",
    "module": "hs.styledtext",
    "name": "getStyledTextFromData",
    "type": "Constructor"
  },
  {
    "desc": "Converts the data in the specified file into a styled text string.",
    "module": "hs.styledtext",
    "name": "getStyledTextFromFile",
    "type": "Constructor"
  },
  {
    "desc": "Create an `hs.styledtext` object from the string or table representation provided.  Attributes to apply to the resulting string may also be optionally provided.",
    "module": "hs.styledtext",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Returns the table representation of the `hs.styledtext` object or its specified substring.",
    "module": "hs.styledtext",
    "name": "asTable",
    "type": "Method"
  },
  {
    "desc": "Returns the internal numerical representation of the characters in the `hs.styledtext` object specified by the given indicies.  Mimics the Lua `string.byte` function.",
    "module": "hs.styledtext",
    "name": "byte",
    "type": "Method"
  },
  {
    "desc": "Converts the styledtext object into the data format specified.",
    "module": "hs.styledtext",
    "name": "convert",
    "type": "Method"
  },
  {
    "desc": "Create a copy of the `hs.styledtext` object.",
    "module": "hs.styledtext",
    "name": "copy",
    "type": "Method"
  },
  {
    "desc": "Returns the indicies of the first occurrence of the specified pattern in the text of the `hs.styledtext` object.  Mimics the Lua `string.find` function.",
    "module": "hs.styledtext",
    "name": "find",
    "type": "Method"
  },
  {
    "desc": "Returns the text of the `hs.styledtext` object as a Lua String",
    "module": "hs.styledtext",
    "name": "getString",
    "type": "Method"
  },
  {
    "desc": "Returns an iterator function which will return the captures (or the entire pattern) of the next match of the specified pattern in the text of the `hs.styledtext` object each time it is called.  Mimics the Lua `string.gmatch` function.",
    "module": "hs.styledtext",
    "name": "gmatch",
    "type": "Method"
  },
  {
    "desc": "Determine if the `styledText` object is identical to the one specified.",
    "module": "hs.styledtext",
    "name": "isIdentical",
    "type": "Method"
  },
  {
    "desc": "Returns the length of the text of the `hs.styledtext` object.  Mimics the Lua `string.len` function.",
    "module": "hs.styledtext",
    "name": "len",
    "type": "Method"
  },
  {
    "desc": "Returns a copy of the `hs.styledtext` object with all alpha characters converted to lower case.  Mimics the Lua `string.lower` function.",
    "module": "hs.styledtext",
    "name": "lower",
    "type": "Method"
  },
  {
    "desc": "Returns the first occurrence of the captures in the specified pattern (or the complete pattern, if no captures are specified) in the text of the `hs.styledtext` object.  Mimics the Lua `string.match` function.",
    "module": "hs.styledtext",
    "name": "match",
    "type": "Method"
  },
  {
    "desc": "Return a copy of the `hs.styledtext` object containing the changes to its attributes specified in the `attributes` table.",
    "module": "hs.styledtext",
    "name": "removeStyle",
    "type": "Method"
  },
  {
    "desc": "Returns an `hs.styledtext` object which contains `n` repetitions of the `hs.styledtext` object, optionally with `separator` between each repetition.  Mimics the Lua `string.rep` function.",
    "module": "hs.styledtext",
    "name": "rep",
    "type": "Method"
  },
  {
    "desc": "Return a copy of the `hs.styledtext` object containing the changes to its attributes specified in the `attributes` table.",
    "module": "hs.styledtext",
    "name": "setString",
    "type": "Method"
  },
  {
    "desc": "Return a copy of the `hs.styledtext` object containing the changes to its attributes specified in the `attributes` table.",
    "module": "hs.styledtext",
    "name": "setStyle",
    "type": "Method"
  },
  {
    "desc": "Returns a substring, including the style attributes, specified by the given indicies from the `hs.styledtext` object.  Mimics the Lua `string.sub` function.",
    "module": "hs.styledtext",
    "name": "sub",
    "type": "Method"
  },
  {
    "desc": "Returns a copy of the `hs.styledtext` object with all alpha characters converted to upper case.  Mimics the Lua `string.upper` function.",
    "module": "hs.styledtext",
    "name": "upper",
    "type": "Method"
  },
  {
    "desc": "Place the windows of an application into tabs drawn on its titlebar",
    "name": "hs.tabs",
    "type": "Module"
  },
  {
    "desc": "Places all the windows of an app into one place and tab them",
    "module": "hs.tabs",
    "name": "enableForApp",
    "type": "Function"
  },
  {
    "desc": "Focuses a specific tab of an app",
    "module": "hs.tabs",
    "name": "focusTab",
    "type": "Function"
  },
  {
    "desc": "Gets a list of the tabs of a window",
    "module": "hs.tabs",
    "name": "tabWindows",
    "type": "Function"
  },
  {
    "desc": "Execute processes in the background and capture their output",
    "name": "hs.task",
    "type": "Module"
  },
  {
    "desc": "Creates a new hs.task object",
    "module": "hs.task",
    "name": "new",
    "type": "Function"
  },
  {
    "desc": "Closes the task's stdin",
    "module": "hs.task",
    "name": "closeInput",
    "type": "Method"
  },
  {
    "desc": "Returns the environment variables as a table for the task.",
    "module": "hs.task",
    "name": "environment",
    "type": "Method"
  },
  {
    "desc": "Interrupts the task",
    "module": "hs.task",
    "name": "interrupt",
    "type": "Method"
  },
  {
    "desc": "Test if a task is still running.",
    "module": "hs.task",
    "name": "isRunning",
    "type": "Method"
  },
  {
    "desc": "Pauses the task",
    "module": "hs.task",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Gets the PID of a running/finished task",
    "module": "hs.task",
    "name": "pid",
    "type": "Method"
  },
  {
    "desc": "Resumes the task",
    "module": "hs.task",
    "name": "resume",
    "type": "Method"
  },
  {
    "desc": "Set or remove a callback function for a task.",
    "module": "hs.task",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Sets the environment variables for the task.",
    "module": "hs.task",
    "name": "setEnvironment",
    "type": "Method"
  },
  {
    "desc": "Sets the standard input data for a task",
    "module": "hs.task",
    "name": "setInput",
    "type": "Method"
  },
  {
    "desc": "Set a stream callback function for a task",
    "module": "hs.task",
    "name": "setStreamingCallback",
    "type": "Method"
  },
  {
    "desc": "Sets the working directory for the task.",
    "module": "hs.task",
    "name": "setWorkingDirectory",
    "type": "Method"
  },
  {
    "desc": "Starts the task",
    "module": "hs.task",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Terminates the task",
    "module": "hs.task",
    "name": "terminate",
    "type": "Method"
  },
  {
    "desc": "Returns the termination reason for a task, or false if the task is still running.",
    "module": "hs.task",
    "name": "terminationReason",
    "type": "Method"
  },
  {
    "desc": "Returns the termination status of a task, or false if the task is still running.",
    "module": "hs.task",
    "name": "terminationStatus",
    "type": "Method"
  },
  {
    "desc": "Blocks Hammerspoon until the task exits",
    "module": "hs.task",
    "name": "waitUntilExit",
    "type": "Method"
  },
  {
    "desc": "Returns the working directory for the task.",
    "module": "hs.task",
    "name": "workingDirectory",
    "type": "Method"
  },
  {
    "desc": "Execute functions with various timing rules",
    "name": "hs.timer",
    "type": "Module"
  },
  {
    "desc": "Returns the absolute time in nanoseconds since the last system boot.",
    "module": "hs.timer",
    "name": "absolutetime",
    "type": "Function"
  },
  {
    "desc": "Converts days to seconds",
    "module": "hs.timer",
    "name": "days",
    "type": "Function"
  },
  {
    "desc": "Converts hours to seconds",
    "module": "hs.timer",
    "name": "hours",
    "type": "Function"
  },
  {
    "desc": "Returns the number of seconds since local time midnight",
    "module": "hs.timer",
    "name": "localTime",
    "type": "Function"
  },
  {
    "desc": "Converts minutes to seconds",
    "module": "hs.timer",
    "name": "minutes",
    "type": "Function"
  },
  {
    "desc": "Converts a string with a time of day or a duration into number of seconds",
    "module": "hs.timer",
    "name": "seconds",
    "type": "Function"
  },
  {
    "desc": "Gets the (fractional) number of seconds since the UNIX epoch (January 1, 1970)",
    "module": "hs.timer",
    "name": "secondsSinceEpoch",
    "type": "Function"
  },
  {
    "desc": "Blocks Lua execution for the specified time",
    "module": "hs.timer",
    "name": "usleep",
    "type": "Function"
  },
  {
    "desc": "Converts weeks to seconds",
    "module": "hs.timer",
    "name": "weeks",
    "type": "Function"
  },
  {
    "desc": "Calls a function after a delay",
    "module": "hs.timer",
    "name": "doAfter",
    "type": "Constructor"
  },
  {
    "desc": "Creates and starts a timer which will perform `fn` at the given (local) `time` and then (optionally) repeat it every `interval`.",
    "module": "hs.timer",
    "name": "doAt",
    "type": "Constructor"
  },
  {
    "desc": "Repeats fn every interval seconds.",
    "module": "hs.timer",
    "name": "doEvery",
    "type": "Constructor"
  },
  {
    "desc": "Creates and starts a timer which will perform `actionFn` every `checkinterval` seconds until `predicateFn` returns true.  The timer is automatically stopped when `predicateFn` returns true.",
    "module": "hs.timer",
    "name": "doUntil",
    "type": "Constructor"
  },
  {
    "desc": "Creates and starts a timer which will perform `actionFn` every `checkinterval` seconds while `predicateFn` returns true.  The timer is automatically stopped when `predicateFn` returns false.",
    "module": "hs.timer",
    "name": "doWhile",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new `hs.timer` object for repeating interval callbacks",
    "module": "hs.timer",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates and starts a timer which will perform `actionFn` when `predicateFn` returns true.  The timer is automatically stopped when `actionFn` is called.",
    "module": "hs.timer",
    "name": "waitUntil",
    "type": "Constructor"
  },
  {
    "desc": "Creates and starts a timer which will perform `actionFn` when `predicateFn` returns false.  The timer is automatically stopped when `actionFn` is called.",
    "module": "hs.timer",
    "name": "waitWhile",
    "type": "Constructor"
  },
  {
    "desc": "Immediately fires a timer",
    "module": "hs.timer",
    "name": "fire",
    "type": "Method"
  },
  {
    "desc": "Returns the number of seconds until the timer will next trigger",
    "module": "hs.timer",
    "name": "nextTrigger",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean indicating whether or not the timer is currently running.",
    "module": "hs.timer",
    "name": "running",
    "type": "Method"
  },
  {
    "desc": "Sets the next trigger time of a timer",
    "module": "hs.timer",
    "name": "setNextTrigger",
    "type": "Method"
  },
  {
    "desc": "Starts an `hs.timer` object",
    "module": "hs.timer",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops an `hs.timer` object",
    "module": "hs.timer",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Specialized timer objects to coalesce processing of unpredictable asynchronous events into a single callback",
    "name": "hs.timer.delayed",
    "type": "Module"
  },
  {
    "desc": "Creates a new delayed timer.",
    "module": "hs.timer.delayed",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Returns the time left in the callback countdown",
    "module": "hs.timer.delayed",
    "name": "nextTrigger",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean indicating whether the callback countdown is running",
    "module": "hs.timer.delayed",
    "name": "running",
    "type": "Method"
  },
  {
    "desc": "Changes the callback countdown duration",
    "module": "hs.timer.delayed",
    "name": "setDelay",
    "type": "Method"
  },
  {
    "desc": "Starts or restarts the callback countdown",
    "module": "hs.timer.delayed",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Cancels the callback countdown, if running; the callback will therefore not be triggered",
    "module": "hs.timer.delayed",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "A generalized framework for working with OSX UI elements",
    "name": "hs.uielement",
    "type": "Module"
  },
  {
    "desc": "Gets the currently focused UI element",
    "module": "hs.uielement",
    "name": "focusedElement",
    "type": "Function"
  },
  {
    "desc": "Creates a new watcher for the element represented by self (the object the method is being invoked for).",
    "module": "hs.uielement",
    "name": "newWatcher",
    "type": "Constructor"
  },
  {
    "desc": "Returns whether the UI element represents an application.",
    "module": "hs.uielement",
    "name": "isApplication",
    "type": "Method"
  },
  {
    "desc": "Returns whether the UI element represents a window.",
    "module": "hs.uielement",
    "name": "isWindow",
    "type": "Method"
  },
  {
    "desc": "Returns the role of the element.",
    "module": "hs.uielement",
    "name": "role",
    "type": "Method"
  },
  {
    "desc": "Returns the selected text in the element",
    "module": "hs.uielement",
    "name": "selectedText",
    "type": "Method"
  },
  {
    "desc": "Watch for events on certain UI elements (including windows and applications)",
    "name": "hs.uielement.watcher",
    "type": "Module"
  },
  {
    "desc": "Returns the element the watcher is watching.",
    "module": "hs.uielement.watcher",
    "name": "element",
    "type": "Method"
  },
  {
    "desc": "Tells the watcher to start watching for the given list of events.",
    "module": "hs.uielement.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Tells the watcher to stop listening for events.",
    "module": "hs.uielement.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Allows Hammerspoon to respond to URLs",
    "name": "hs.urlevent",
    "type": "Module"
  },
  {
    "desc": "A function that should handle http:// and https:// URL events",
    "module": "hs.urlevent",
    "name": "httpCallback",
    "type": "Variable"
  },
  {
    "desc": "Registers a callback for a hammerspoon:// URL event",
    "module": "hs.urlevent",
    "name": "bind",
    "type": "Function"
  },
  {
    "desc": "Gets all of the application bundle identifiers of applications able to handle a URL scheme",
    "module": "hs.urlevent",
    "name": "getAllHandlersForScheme",
    "type": "Function"
  },
  {
    "desc": "Gets the application bundle identifier of the application currently registered to handle a URL scheme",
    "module": "hs.urlevent",
    "name": "getDefaultHandler",
    "type": "Function"
  },
  {
    "desc": "Opens a URL with the default application",
    "module": "hs.urlevent",
    "name": "openURL",
    "type": "Function"
  },
  {
    "desc": "Opens a URL with a specified application",
    "module": "hs.urlevent",
    "name": "openURLWithBundle",
    "type": "Function"
  },
  {
    "desc": "Sets the default system handler for URLs of a given scheme",
    "module": "hs.urlevent",
    "name": "setDefaultHandler",
    "type": "Function"
  },
  {
    "desc": "Stores a URL handler that will be restored when Hammerspoon or reloads its config",
    "module": "hs.urlevent",
    "name": "setRestoreHandler",
    "type": "Function"
  },
  {
    "desc": "Inspect USB devices",
    "name": "hs.usb",
    "type": "Module"
  },
  {
    "desc": "Gets details about currently attached USB devices",
    "module": "hs.usb",
    "name": "attachedDevices",
    "type": "Function"
  },
  {
    "desc": "Watch for USB device connection/disconnection events",
    "name": "hs.usb.watcher",
    "type": "Module"
  },
  {
    "desc": "Creates a new watcher for USB device events",
    "module": "hs.usb.watcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts the USB watcher",
    "module": "hs.usb.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the USB watcher",
    "module": "hs.usb.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Functions providing basic support for UTF-8 encodings",
    "name": "hs.utf8",
    "type": "Module"
  },
  {
    "desc": "A collection of UTF-8 characters already converted from codepoint and available as convient key-value pairs.  UTF-8 printable versions of common Apple and OS X special keys are predefined and others can be added with `hs.utf8.registerCodepoint(label, codepoint)` for your own use.",
    "module": "hs.utf8",
    "name": "registeredKeys",
    "type": "Variable"
  },
  {
    "desc": "Returns the provided string with all non-printable ascii characters escaped, except Return, Linefeed, and Tab.",
    "module": "hs.utf8",
    "name": "asciiOnly",
    "type": "Function"
  },
  {
    "desc": "Wrapper to `utf8.char(...)` which ensures that all codepoints return valid UTF8 characters.",
    "module": "hs.utf8",
    "name": "codepointToUTF8",
    "type": "Function"
  },
  {
    "desc": "Replace invalid UTF8 character sequences in `inString` with `replacementChar` so it can be safely displayed in the console or other destination which requires valid UTF8 encoding.",
    "module": "hs.utf8",
    "name": "fixUTF8",
    "type": "Function"
  },
  {
    "desc": "Returns a hex dump of the provided string.  This is primarily useful for examining the exact makeup of binary data contained in a Lua String as individual bytes for debugging purposes.",
    "module": "hs.utf8",
    "name": "hexDump",
    "type": "Function"
  },
  {
    "desc": "Registers a Unicode codepoint under the given label as a UTF-8 string of bytes which can be referenced by the label later in your code as `hs.utf8.registeredKeys[label]` for convenience and readability.",
    "module": "hs.utf8",
    "name": "registerCodepoint",
    "type": "Function"
  },
  {
    "desc": "Returns the label name for a UTF8 character, as it is registered in `hs.utf8.registeredKeys[]`.",
    "module": "hs.utf8",
    "name": "registeredLabels",
    "type": "Function"
  },
  {
    "desc": "Controls for VOX music player",
    "name": "hs.vox",
    "type": "Module"
  },
  {
    "desc": "Add media URL to current list",
    "module": "hs.vox",
    "name": "addurl",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position backwards by about 7 seconds",
    "module": "hs.vox",
    "name": "backward",
    "type": "Function"
  },
  {
    "desc": "Decreases the player volume",
    "module": "hs.vox",
    "name": "decreaseVolume",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position backwards by about 14 seconds",
    "module": "hs.vox",
    "name": "fastBackward",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position forwards by about 17 seconds",
    "module": "hs.vox",
    "name": "fastForward",
    "type": "Function"
  },
  {
    "desc": "Skips the playback position forwards by about 7 seconds",
    "module": "hs.vox",
    "name": "forward",
    "type": "Function"
  },
  {
    "desc": "Gets the artist of current Album",
    "module": "hs.vox",
    "name": "getAlbumArtist",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the album of the current track",
    "module": "hs.vox",
    "name": "getCurrentAlbum",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the artist of the current track",
    "module": "hs.vox",
    "name": "getCurrentArtist",
    "type": "Function"
  },
  {
    "desc": "Gets the current playback state of vox",
    "module": "hs.vox",
    "name": "getPlayerState",
    "type": "Function"
  },
  {
    "desc": "Gets the uniqueID of the current track",
    "module": "hs.vox",
    "name": "getUniqueID",
    "type": "Function"
  },
  {
    "desc": "Increases the palyer volume",
    "module": "hs.vox",
    "name": "increaseVolume",
    "type": "Function"
  },
  {
    "desc": "Returns whether VOX is currently open",
    "module": "hs.vox",
    "name": "isRunning",
    "type": "Function"
  },
  {
    "desc": "Skips to the next track",
    "module": "hs.vox",
    "name": "next",
    "type": "Function"
  },
  {
    "desc": "Pauses the current vox track",
    "module": "hs.vox",
    "name": "pause",
    "type": "Function"
  },
  {
    "desc": "Plays the current vox track",
    "module": "hs.vox",
    "name": "play",
    "type": "Function"
  },
  {
    "desc": "Toggles play/pause of current vox track",
    "module": "hs.vox",
    "name": "playpause",
    "type": "Function"
  },
  {
    "desc": "Play media from the given URL",
    "module": "hs.vox",
    "name": "playurl",
    "type": "Function"
  },
  {
    "desc": "Skips to previous track",
    "module": "hs.vox",
    "name": "previous",
    "type": "Function"
  },
  {
    "desc": "Toggle shuffle state of current list",
    "module": "hs.vox",
    "name": "shuffle",
    "type": "Function"
  },
  {
    "desc": "Toggle playlist",
    "module": "hs.vox",
    "name": "togglePlaylist",
    "type": "Function"
  },
  {
    "desc": "Displays information for current track on screen",
    "module": "hs.vox",
    "name": "trackInfo",
    "type": "Function"
  },
  {
    "desc": "A minimalistic Key-Value-Observer framework for Lua.",
    "name": "hs.watchable",
    "type": "Module"
  },
  {
    "desc": "Creates a table that can be watched by other modules for key changes",
    "module": "hs.watchable",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Creates a watcher that will be invoked when the specified key in the specified path is modified.",
    "module": "hs.watchable",
    "name": "watch",
    "type": "Constructor"
  },
  {
    "desc": "Change or remove the callback function for the watchableObject.",
    "module": "hs.watchable",
    "name": "callback",
    "type": "Method"
  },
  {
    "desc": "Externally change the value of the key-value pair being watched by the watchableObject",
    "module": "hs.watchable",
    "name": "change",
    "type": "Method"
  },
  {
    "desc": "Temporarily stop notifications about the key-value pair(s) watched by this watchableObject.",
    "module": "hs.watchable",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Removes the watchableObject so that key-value pairs watched by this object no longer generate notifications.",
    "module": "hs.watchable",
    "name": "release",
    "type": "Method"
  },
  {
    "desc": "Resume notifications about the key-value pair(s) watched by this watchableObject which were previously paused.",
    "module": "hs.watchable",
    "name": "resume",
    "type": "Method"
  },
  {
    "desc": "Get the current value for the key-value pair being watched by the watchableObject",
    "module": "hs.watchable",
    "name": "value",
    "type": "Method"
  },
  {
    "desc": "Display web content in a window from Hammerspoon",
    "name": "hs.webview",
    "type": "Module"
  },
  {
    "desc": "Because use of this method can easily lead to a crash, useful methods from `hs.drawing` have been added to the `hs.webview` module itself.  If you believe that a useful method has been overlooked, please submit an issue.",
    "module": "hs.webview",
    "name": "asHSDrawing",
    "type": "Deprecated"
  },
  {
    "desc": "Returns an hs.window object for the webview so that you can use hs.window methods on it.",
    "module": "hs.webview",
    "name": "asHSWindow",
    "type": "Deprecated"
  },
  {
    "desc": "Deprecated; you should use [hs.webview:level](#level) instead.",
    "module": "hs.webview",
    "name": "setLevel",
    "type": "Deprecated"
  },
  {
    "desc": "A table of common OID values found in SSL certificates.  SSL certificates provided to the callback function for [hs.webview:sslCallback](#sslCallback) or in the results of [hs.webview:certificateChain](#certificateChain) use OID strings as the keys which describe the properties of the certificate and this table can be used to get a more common name for the keys you are most likely to see.",
    "module": "hs.webview",
    "name": "certificateOIDs",
    "type": "Constant"
  },
  {
    "desc": "A table containing valid masks for the webview window.",
    "module": "hs.webview",
    "name": "windowMasks",
    "type": "Constant"
  },
  {
    "desc": "Create a webviewObject and optionally modify its preferences.",
    "module": "hs.webview",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Create a webviewObject with some presets common to an interactive web browser.",
    "module": "hs.webview",
    "name": "newBrowser",
    "type": "Constructor"
  },
  {
    "desc": "Get or set whether or not the webview will respond to gestures from a trackpad or magic mouse.  Default is false.",
    "module": "hs.webview",
    "name": "allowGestures",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the webview will respond to magnification gestures from a trackpad or magic mouse.  Default is false.",
    "module": "hs.webview",
    "name": "allowMagnificationGestures",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the webview will respond to the navigation gestures from a trackpad or magic mouse.  Default is false.",
    "module": "hs.webview",
    "name": "allowNavigationGestures",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the webview allows new windows to be opened from it by any method.  Defaults to true.",
    "module": "hs.webview",
    "name": "allowNewWindows",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the webview can accept keyboard for web form entry. Defaults to false.",
    "module": "hs.webview",
    "name": "allowTextEntry",
    "type": "Method"
  },
  {
    "desc": "Get or set the alpha level of the window containing the hs.webview object.",
    "module": "hs.webview",
    "name": "alpha",
    "type": "Method"
  },
  {
    "desc": "Get or attach/detach a toolbar to/from the webview.",
    "module": "hs.webview",
    "name": "attachedToolbar",
    "type": "Method"
  },
  {
    "desc": "Get or set the window behavior settings for the webview object.",
    "module": "hs.webview",
    "name": "behavior",
    "type": "Method"
  },
  {
    "desc": "Get or set the window behavior settings for the webview object using labels defined in `hs.drawing.windowBehaviors`.",
    "module": "hs.webview",
    "name": "behaviorAsLabels",
    "type": "Method"
  },
  {
    "desc": "Places the drawing object on top of normal windows",
    "module": "hs.webview",
    "name": "bringToFront",
    "type": "Method"
  },
  {
    "desc": "Returns the certificate chain for the most recently committed navigation of the webview.",
    "module": "hs.webview",
    "name": "certificateChain",
    "type": "Method"
  },
  {
    "desc": "Returns an array of webview objects which have been opened as children of this webview.",
    "module": "hs.webview",
    "name": "children",
    "type": "Method"
  },
  {
    "desc": "If the webview is closable, this will get or set whether or not the Escape key is allowed to close the webview window.",
    "module": "hs.webview",
    "name": "closeOnEscape",
    "type": "Method"
  },
  {
    "desc": "Set or display whether or not the `hs.webview` window should display in dark mode.",
    "module": "hs.webview",
    "name": "darkMode",
    "type": "Method"
  },
  {
    "desc": "Destroys the webview object, optionally fading it out first (if currently visible).",
    "module": "hs.webview",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the webview should delete itself when its window is closed.",
    "module": "hs.webview",
    "name": "deleteOnClose",
    "type": "Method"
  },
  {
    "desc": "Returns the estimated percentage of expected content that has been loaded.  Will equal 1.0 when all content has been loaded.",
    "module": "hs.webview",
    "name": "estimatedProgress",
    "type": "Method"
  },
  {
    "desc": "Execute JavaScript within the context of the current webview and optionally receive its result or error in a callback function.",
    "module": "hs.webview",
    "name": "evaluateJavaScript",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not invalid SSL server certificates that are approved by the ssl callback function are accepted as valid for browsing with the webview.",
    "module": "hs.webview",
    "name": "examineInvalidCertificates",
    "type": "Method"
  },
  {
    "desc": "Get or set the frame of the webview window.",
    "module": "hs.webview",
    "name": "frame",
    "type": "Method"
  },
  {
    "desc": "Move to the previous page in the webview's history, if possible.",
    "module": "hs.webview",
    "name": "goBack",
    "type": "Method"
  },
  {
    "desc": "Move to the next page in the webview's history, if possible.",
    "module": "hs.webview",
    "name": "goForward",
    "type": "Method"
  },
  {
    "desc": "Hides the webview object",
    "module": "hs.webview",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Returns the URL history for the current webview as an array.",
    "module": "hs.webview",
    "name": "historyList",
    "type": "Method"
  },
  {
    "desc": "Returns an hs.window object for the webview so that you can use hs.window methods on it.",
    "module": "hs.webview",
    "name": "hswindow",
    "type": "Method"
  },
  {
    "desc": "Render the given HTML in the webview with an optional base URL for relative links.",
    "module": "hs.webview",
    "name": "html",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean value indicating if all content current displayed in the webview was loaded over securely encrypted connections.",
    "module": "hs.webview",
    "name": "isOnlySecureContent",
    "type": "Method"
  },
  {
    "desc": "Get or set the window level",
    "module": "hs.webview",
    "name": "level",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean value indicating whether or not the vebview is still loading content.",
    "module": "hs.webview",
    "name": "loading",
    "type": "Method"
  },
  {
    "desc": "Get or set the webviews current magnification level. Default is 1.0.",
    "module": "hs.webview",
    "name": "magnification",
    "type": "Method"
  },
  {
    "desc": "Sets a callback for tracking a webview's navigation process.",
    "module": "hs.webview",
    "name": "navigationCallback",
    "type": "Method"
  },
  {
    "desc": "Get the most recent navigation identifier for the specified webview.",
    "module": "hs.webview",
    "name": "navigationID",
    "type": "Method"
  },
  {
    "desc": "Moves webview object above webview2, or all webview objects in the same presentation level, if webview2 is not given.",
    "module": "hs.webview",
    "name": "orderAbove",
    "type": "Method"
  },
  {
    "desc": "Moves webview object below webview2, or all webview objects in the same presentation level, if webview2 is not given.",
    "module": "hs.webview",
    "name": "orderBelow",
    "type": "Method"
  },
  {
    "desc": "Get the parent webview object for the calling webview object, or nil if the webview has no parent.",
    "module": "hs.webview",
    "name": "parent",
    "type": "Method"
  },
  {
    "desc": "Sets a callback to approve or deny web navigation activity.",
    "module": "hs.webview",
    "name": "policyCallback",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the webview browser is set up for private browsing (i.e. uses a non-persistent datastore)",
    "module": "hs.webview",
    "name": "privateBrowsing",
    "type": "Method"
  },
  {
    "desc": "Reload the page in the webview, optionally performing end-to-end revalidation using cache-validating conditionals if possible.",
    "module": "hs.webview",
    "name": "reload",
    "type": "Method"
  },
  {
    "desc": "Places the webview object behind normal windows, between the desktop wallpaper and desktop icons",
    "module": "hs.webview",
    "name": "sendToBack",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the webview window has shadows. Default to false.",
    "module": "hs.webview",
    "name": "shadow",
    "type": "Method"
  },
  {
    "desc": "Displays the webview object",
    "module": "hs.webview",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Get or set the size of a webview window",
    "module": "hs.webview",
    "name": "size",
    "type": "Method"
  },
  {
    "desc": "Sets a callback to examine an invalid SSL certificate and determine if an exception should be granted.",
    "module": "hs.webview",
    "name": "sslCallback",
    "type": "Method"
  },
  {
    "desc": "Stop loading content if the webview is still loading content.  Does nothing if content has already completed loading.",
    "module": "hs.webview",
    "name": "stopLoading",
    "type": "Method"
  },
  {
    "desc": "Get the title of the page displayed in the webview.",
    "module": "hs.webview",
    "name": "title",
    "type": "Method"
  },
  {
    "desc": "Get or set the top-left coordinate of the webview window",
    "module": "hs.webview",
    "name": "topLeft",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the webview background is transparent.  Default is false.",
    "module": "hs.webview",
    "name": "transparent",
    "type": "Method"
  },
  {
    "desc": "Get or set the URL to render for the webview.",
    "module": "hs.webview",
    "name": "url",
    "type": "Method"
  },
  {
    "desc": "Returns a table of keys containing the individual components of the URL for the webview.",
    "module": "hs.webview",
    "name": "urlParts",
    "type": "Method"
  },
  {
    "desc": "Get or set the webview's user agent string",
    "module": "hs.webview",
    "name": "userAgent",
    "type": "Method"
  },
  {
    "desc": "Set or clear a callback for updates to the webview window",
    "module": "hs.webview",
    "name": "windowCallback",
    "type": "Method"
  },
  {
    "desc": "Get or set the window display style",
    "module": "hs.webview",
    "name": "windowStyle",
    "type": "Method"
  },
  {
    "desc": "Sets the title for the webview window.",
    "module": "hs.webview",
    "name": "windowTitle",
    "type": "Method"
  },
  {
    "desc": "Provides methods to list and purge the various types of data used by websites visited with `hs.webview`.",
    "name": "hs.webview.datastore",
    "type": "Module"
  },
  {
    "desc": "Returns a list of the currently available data types within a datastore.",
    "module": "hs.webview.datastore",
    "name": "websiteDataTypes",
    "type": "Function"
  },
  {
    "desc": "Returns an object representing the default datastore for Hammerspoon `hs.webview` instances.",
    "module": "hs.webview.datastore",
    "name": "default",
    "type": "Constructor"
  },
  {
    "desc": "Returns an object representing the datastore for the specified `hs.webview` instance.",
    "module": "hs.webview.datastore",
    "name": "fromWebview",
    "type": "Constructor"
  },
  {
    "desc": "Returns an object representing a newly created non-persistent (private) datastore for use with a Hammerspoon `hs.webview` instance.",
    "module": "hs.webview.datastore",
    "name": "newPrivate",
    "type": "Constructor"
  },
  {
    "desc": "Generates a list of the datastore records of the specified type, and invokes the callback function with the list.",
    "module": "hs.webview.datastore",
    "name": "fetchRecords",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not the datastore is persistent.",
    "module": "hs.webview.datastore",
    "name": "persistent",
    "type": "Method"
  },
  {
    "desc": "Removes the specified types of data from the datastore if the data was added or changed since the given date.",
    "module": "hs.webview.datastore",
    "name": "removeRecordsAfter",
    "type": "Method"
  },
  {
    "desc": "Remove data from the datastore of the specified type(s) for the specified site(s).",
    "module": "hs.webview.datastore",
    "name": "removeRecordsFor",
    "type": "Method"
  },
  {
    "desc": "Create and manipulate toolbars which can be attached to the Hammerspoon console or hs.webview objects.",
    "name": "hs.webview.toolbar",
    "type": "Module"
  },
  {
    "desc": "A table containing some pre-defined toolbar item priority values for use when determining item order in the toolbar.",
    "module": "hs.webview.toolbar",
    "name": "itemPriorities",
    "type": "Constant"
  },
  {
    "desc": "An array containing string identifiers for supported system defined toolbar items.",
    "module": "hs.webview.toolbar",
    "name": "systemToolbarItems",
    "type": "Constant"
  },
  {
    "desc": "Get or attach/detach a toolbar to the console or webview.",
    "module": "hs.webview.toolbar",
    "name": "attachToolbar",
    "type": "Function"
  },
  {
    "desc": "Creates a new toolbar for a webview or the console.",
    "module": "hs.webview.toolbar",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Add one or more toolbar items to the toolbar",
    "module": "hs.webview.toolbar",
    "name": "addItems",
    "type": "Method"
  },
  {
    "desc": "Returns an array of all toolbar item identifiers defined for this toolbar.",
    "module": "hs.webview.toolbar",
    "name": "allowedItems",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the toolbar autosaves changes made to the toolbar.",
    "module": "hs.webview.toolbar",
    "name": "autossaves",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the user is allowed to customize the toolbar with the Customization Panel.",
    "module": "hs.webview.toolbar",
    "name": "canCustomize",
    "type": "Method"
  },
  {
    "desc": "Returns a copy of the toolbar object.",
    "module": "hs.webview.toolbar",
    "name": "copy",
    "type": "Method"
  },
  {
    "desc": "Opens the toolbar customization panel.",
    "module": "hs.webview.toolbar",
    "name": "customizePanel",
    "type": "Method"
  },
  {
    "desc": "Deletes the toolbar, removing it from its window if it is currently attached.",
    "module": "hs.webview.toolbar",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Deletes the toolbar item specified completely from the toolbar, removing it first, if the toolbar item is currently active.",
    "module": "hs.webview.toolbar",
    "name": "deleteItem",
    "type": "Method"
  },
  {
    "desc": "Get or set the toolbar's display mode.",
    "module": "hs.webview.toolbar",
    "name": "displayMode",
    "type": "Method"
  },
  {
    "desc": "The identifier for this toolbar.",
    "module": "hs.webview.toolbar",
    "name": "identifier",
    "type": "Method"
  },
  {
    "desc": "Insert or move the toolbar item to the index position specified",
    "module": "hs.webview.toolbar",
    "name": "insertItem",
    "type": "Method"
  },
  {
    "desc": "Returns a boolean indicating whether or not the toolbar is currently attached to a window.",
    "module": "hs.webview.toolbar",
    "name": "isAttached",
    "type": "Method"
  },
  {
    "desc": "Indicates whether or not the customization panel is currently open for the toolbar.",
    "module": "hs.webview.toolbar",
    "name": "isCustomizing",
    "type": "Method"
  },
  {
    "desc": "Returns a table containing details about the specified toolbar item",
    "module": "hs.webview.toolbar",
    "name": "itemDetails",
    "type": "Method"
  },
  {
    "desc": "Returns an array of the toolbar item identifiers currently assigned to the toolbar.",
    "module": "hs.webview.toolbar",
    "name": "items",
    "type": "Method"
  },
  {
    "desc": "Modify the toolbar item specified by the \"id\" key in the table argument.",
    "module": "hs.webview.toolbar",
    "name": "modifyItem",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the global callback function is invoked when a toolbar item is added or removed from the toolbar.",
    "module": "hs.webview.toolbar",
    "name": "notifyOnChange",
    "type": "Method"
  },
  {
    "desc": "Remove the toolbar item at the index position specified, or with the specified identifier, if currently present in the toolbar.",
    "module": "hs.webview.toolbar",
    "name": "removeItem",
    "type": "Method"
  },
  {
    "desc": "Returns a table containing the settings which will be saved for the toolbar if [hs.webview.toolbar:autosaves](#autosaves) is true.",
    "module": "hs.webview.toolbar",
    "name": "savedSettings",
    "type": "Method"
  },
  {
    "desc": "Get or set the selected toolbar item",
    "module": "hs.webview.toolbar",
    "name": "selectedItem",
    "type": "Method"
  },
  {
    "desc": "Programmatically focus the search field for keyboard input.",
    "module": "hs.webview.toolbar",
    "name": "selectSearchField",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the toolbar shows a separator between the toolbar and the main window contents.",
    "module": "hs.webview.toolbar",
    "name": "separator",
    "type": "Method"
  },
  {
    "desc": "Sets or removes the global callback function for the toolbar.",
    "module": "hs.webview.toolbar",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Get or set the toolbar's size.",
    "module": "hs.webview.toolbar",
    "name": "sizeMode",
    "type": "Method"
  },
  {
    "desc": "Get or set whether or not the toolbar is currently visible in the window it is attached to.",
    "module": "hs.webview.toolbar",
    "name": "visible",
    "type": "Method"
  },
  {
    "desc": "Returns an array of the currently visible toolbar item identifiers.",
    "module": "hs.webview.toolbar",
    "name": "visibleItems",
    "type": "Method"
  },
  {
    "desc": "This module provides support for injecting custom JavaScript user content into your webviews and for JavaScript to post messages back to Hammerspoon.",
    "name": "hs.webview.usercontent",
    "type": "Module"
  },
  {
    "desc": "Create a new user content controller for a webview and create the message port with the specified name for JavaScript message support.",
    "module": "hs.webview.usercontent",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Add a script to be injected into webviews which use this user content controller.",
    "module": "hs.webview.usercontent",
    "name": "injectScript",
    "type": "Method"
  },
  {
    "desc": "Removes all user scripts currently defined for this user content controller.",
    "module": "hs.webview.usercontent",
    "name": "removeAllScripts",
    "type": "Method"
  },
  {
    "desc": "Set or remove the callback function to handle message posted to this user content's message port.",
    "module": "hs.webview.usercontent",
    "name": "setCallback",
    "type": "Method"
  },
  {
    "desc": "Get a table containing all of the currently defined injection scripts for this user content controller",
    "module": "hs.webview.usercontent",
    "name": "userScripts",
    "type": "Method"
  },
  {
    "desc": "Inspect WiFi networks",
    "name": "hs.wifi",
    "type": "Module"
  },
  {
    "desc": "Connect the interface to a wireless network",
    "module": "hs.wifi",
    "name": "associate",
    "type": "Function"
  },
  {
    "desc": "Gets a list of available WiFi networks",
    "module": "hs.wifi",
    "name": "availableNetworks",
    "type": "Function"
  },
  {
    "desc": "Gets the name of the current WiFi network",
    "module": "hs.wifi",
    "name": "currentNetwork",
    "type": "Function"
  },
  {
    "desc": "Disconnect the interface from its current network.",
    "module": "hs.wifi",
    "name": "disassociate",
    "type": "Function"
  },
  {
    "desc": "Returns a table containing details about the wireless interface.",
    "module": "hs.wifi",
    "name": "interfaceDetails",
    "type": "Function"
  },
  {
    "desc": "Returns a list of interface names for WLAN devices attached to the system",
    "module": "hs.wifi",
    "name": "interfaces",
    "type": "Function"
  },
  {
    "desc": "Turns a wifi interface on or off",
    "module": "hs.wifi",
    "name": "setPower",
    "type": "Function"
  },
  {
    "desc": "Perform a scan for available wifi networks in the background (non-blocking)",
    "module": "hs.wifi",
    "name": "backgroundScan",
    "type": "Constructor"
  },
  {
    "desc": "Returns whether or not a scan object has completed its scan for wireless networks.",
    "module": "hs.wifi",
    "name": "isDone",
    "type": "Method"
  },
  {
    "desc": "Watch for changes to the associated wifi network",
    "name": "hs.wifi.watcher",
    "type": "Module"
  },
  {
    "desc": "A table containing the possible event types that this watcher can monitor for.",
    "module": "hs.wifi.watcher",
    "name": "eventTypes",
    "type": "Constant"
  },
  {
    "desc": "Creates a new watcher for WiFi network events",
    "module": "hs.wifi.watcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Starts the SSID watcher",
    "module": "hs.wifi.watcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the SSID watcher",
    "module": "hs.wifi.watcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Get or set the specific types of wifi events to generate a callback for with this watcher.",
    "module": "hs.wifi.watcher",
    "name": "watchingFor",
    "type": "Method"
  },
  {
    "desc": "Inspect/manipulate windows",
    "name": "hs.window",
    "type": "Module"
  },
  {
    "desc": "The default duration for animations, in seconds. Initial value is 0.2; set to 0 to disable animations.",
    "module": "hs.window",
    "name": "animationDuration",
    "type": "Variable"
  },
  {
    "desc": "Using `hs.window:setFrame()` in some cases does not work as expected: namely, the bottom (or Dock) edge, and edges between screens, might",
    "module": "hs.window",
    "name": "setFrameCorrectness",
    "type": "Variable"
  },
  {
    "desc": "Returns all windows",
    "module": "hs.window",
    "name": "allWindows",
    "type": "Function"
  },
  {
    "desc": "Returns the desktop \"window\"",
    "module": "hs.window",
    "name": "desktop",
    "type": "Function"
  },
  {
    "desc": "Returns all visible windows, ordered from front to back",
    "module": "hs.window",
    "name": "orderedWindows",
    "type": "Function"
  },
  {
    "desc": "Enables/Disables window shadows",
    "module": "hs.window",
    "name": "setShadows",
    "type": "Function"
  },
  {
    "desc": "Returns a snapshot of the window specified by the ID as an `hs.image` object",
    "module": "hs.window",
    "name": "snapshotForID",
    "type": "Function"
  },
  {
    "desc": "Gets all visible windows",
    "module": "hs.window",
    "name": "visibleWindows",
    "type": "Function"
  },
  {
    "desc": "Finds windows",
    "module": "hs.window",
    "name": "find",
    "type": "Constructor"
  },
  {
    "desc": "Returns the window that has keyboard/mouse focus",
    "module": "hs.window",
    "name": "focusedWindow",
    "type": "Constructor"
  },
  {
    "desc": "Returns the focused window or, if no window has focus, the frontmost one",
    "module": "hs.window",
    "name": "frontmostWindow",
    "type": "Constructor"
  },
  {
    "desc": "Gets a specific window",
    "module": "hs.window",
    "name": "get",
    "type": "Constructor"
  },
  {
    "desc": "Gets the `hs.application` object the window belongs to",
    "module": "hs.window",
    "name": "application",
    "type": "Method"
  },
  {
    "desc": "Makes the window the main window of its application",
    "module": "hs.window",
    "name": "becomeMain",
    "type": "Method"
  },
  {
    "desc": "Centers the window on a screen",
    "module": "hs.window",
    "name": "centerOnScreen",
    "type": "Method"
  },
  {
    "desc": "Closes the window",
    "module": "hs.window",
    "name": "close",
    "type": "Method"
  },
  {
    "desc": "Focuses the window",
    "module": "hs.window",
    "name": "focus",
    "type": "Method"
  },
  {
    "desc": "Focuses the tab in the window's tab group at index, or the last tab if",
    "module": "hs.window",
    "name": "focusTab",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest possible window to the east (i.e. right)",
    "module": "hs.window",
    "name": "focusWindowEast",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest possible window to the north (i.e. up)",
    "module": "hs.window",
    "name": "focusWindowNorth",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest possible window to the south (i.e. down)",
    "module": "hs.window",
    "name": "focusWindowSouth",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest possible window to the west (i.e. right)",
    "module": "hs.window",
    "name": "focusWindowWest",
    "type": "Method"
  },
  {
    "desc": "Gets the frame of the window in absolute coordinates",
    "module": "hs.window",
    "name": "frame",
    "type": "Method"
  },
  {
    "desc": "Gets the unique identifier of the window",
    "module": "hs.window",
    "name": "id",
    "type": "Method"
  },
  {
    "desc": "Gets the fullscreen state of the window",
    "module": "hs.window",
    "name": "isFullScreen",
    "type": "Method"
  },
  {
    "desc": "Gets the minimized state of the window",
    "module": "hs.window",
    "name": "isMinimized",
    "type": "Method"
  },
  {
    "desc": "Determines if the window is a standard window",
    "module": "hs.window",
    "name": "isStandard",
    "type": "Method"
  },
  {
    "desc": "Determines if a window is visible (i.e. not hidden and not minimized)",
    "module": "hs.window",
    "name": "isVisible",
    "type": "Method"
  },
  {
    "desc": "Maximizes the window",
    "module": "hs.window",
    "name": "maximize",
    "type": "Method"
  },
  {
    "desc": "Minimizes the window",
    "module": "hs.window",
    "name": "minimize",
    "type": "Method"
  },
  {
    "desc": "Moves the window",
    "module": "hs.window",
    "name": "move",
    "type": "Method"
  },
  {
    "desc": "Moves the window one screen east (i.e. right)",
    "module": "hs.window",
    "name": "moveOneScreenEast",
    "type": "Method"
  },
  {
    "desc": "Moves the window one screen north (i.e. up)",
    "module": "hs.window",
    "name": "moveOneScreenNorth",
    "type": "Method"
  },
  {
    "desc": "Moves the window one screen south (i.e. down)",
    "module": "hs.window",
    "name": "moveOneScreenSouth",
    "type": "Method"
  },
  {
    "desc": "Moves the window one screen west (i.e. left)",
    "module": "hs.window",
    "name": "moveOneScreenWest",
    "type": "Method"
  },
  {
    "desc": "Moves the window to a given screen, retaining its relative position and size",
    "module": "hs.window",
    "name": "moveToScreen",
    "type": "Method"
  },
  {
    "desc": "Moves and resizes the window to occupy a given fraction of the screen",
    "module": "hs.window",
    "name": "moveToUnit",
    "type": "Method"
  },
  {
    "desc": "Gets every window except this one",
    "module": "hs.window",
    "name": "otherWindowsAllScreens",
    "type": "Method"
  },
  {
    "desc": "Gets other windows on the same screen",
    "module": "hs.window",
    "name": "otherWindowsSameScreen",
    "type": "Method"
  },
  {
    "desc": "Brings a window to the front of the screen without focussing it",
    "module": "hs.window",
    "name": "raise",
    "type": "Method"
  },
  {
    "desc": "Gets the role of the window",
    "module": "hs.window",
    "name": "role",
    "type": "Method"
  },
  {
    "desc": "Gets the screen which the window is on",
    "module": "hs.window",
    "name": "screen",
    "type": "Method"
  },
  {
    "desc": "Sends the window to the back",
    "module": "hs.window",
    "name": "sendToBack",
    "type": "Method"
  },
  {
    "desc": "Sets the frame of the window in absolute coordinates",
    "module": "hs.window",
    "name": "setFrame",
    "type": "Method"
  },
  {
    "desc": "Sets the frame of the window in absolute coordinates, possibly adjusted to ensure it is fully inside the screen",
    "module": "hs.window",
    "name": "setFrameInScreenBounds",
    "type": "Method"
  },
  {
    "desc": "Sets the frame of the window in absolute coordinates, using the additional workarounds described in `hs.window.setFrameCorrectness`",
    "module": "hs.window",
    "name": "setFrameWithWorkarounds",
    "type": "Method"
  },
  {
    "desc": "Sets the fullscreen state of the window",
    "module": "hs.window",
    "name": "setFullScreen",
    "type": "Method"
  },
  {
    "desc": "Resizes the window",
    "module": "hs.window",
    "name": "setSize",
    "type": "Method"
  },
  {
    "desc": "Moves the window to a given point",
    "module": "hs.window",
    "name": "setTopLeft",
    "type": "Method"
  },
  {
    "desc": "Gets the size of the window",
    "module": "hs.window",
    "name": "size",
    "type": "Method"
  },
  {
    "desc": "Returns a snapshot of the window as an `hs.image` object",
    "module": "hs.window",
    "name": "snapshot",
    "type": "Method"
  },
  {
    "desc": "Gets the subrole of the window",
    "module": "hs.window",
    "name": "subrole",
    "type": "Method"
  },
  {
    "desc": "Gets the number of tabs in the window has, or nil if the window doesn't have tabs.",
    "module": "hs.window",
    "name": "tabCount",
    "type": "Method"
  },
  {
    "desc": "Gets the title of the window",
    "module": "hs.window",
    "name": "title",
    "type": "Method"
  },
  {
    "desc": "Toggles the fullscreen state of the window",
    "module": "hs.window",
    "name": "toggleFullScreen",
    "type": "Method"
  },
  {
    "desc": "Toggles the zoom state of the window (this is effectively equivalent to clicking the green maximize/fullscreen button at the top left of a window)",
    "module": "hs.window",
    "name": "toggleZoom",
    "type": "Method"
  },
  {
    "desc": "Gets the absolute co-ordinates of the top left of the window",
    "module": "hs.window",
    "name": "topLeft",
    "type": "Method"
  },
  {
    "desc": "Un-minimizes the window",
    "module": "hs.window",
    "name": "unminimize",
    "type": "Method"
  },
  {
    "desc": "Gets all windows to the east of this window",
    "module": "hs.window",
    "name": "windowsToEast",
    "type": "Method"
  },
  {
    "desc": "Gets all windows to the north of this window",
    "module": "hs.window",
    "name": "windowsToNorth",
    "type": "Method"
  },
  {
    "desc": "Gets all windows to the south of this window",
    "module": "hs.window",
    "name": "windowsToSouth",
    "type": "Method"
  },
  {
    "desc": "Gets all windows to the west of this window",
    "module": "hs.window",
    "name": "windowsToWest",
    "type": "Method"
  },
  {
    "desc": "Gets a rect-table for the location of the zoom button (the green button typically found at the top left of a window)",
    "module": "hs.window",
    "name": "zoomButtonRect",
    "type": "Method"
  },
  {
    "desc": "Filter windows by application, title, location on screen and more, and easily subscribe to events on these windows",
    "name": "hs.window.filter",
    "type": "Module"
  },
  {
    "desc": "The default windowfilter; it filters apps whose windows are transient in nature so that you're unlikely (and often",
    "module": "hs.window.filter",
    "name": "default",
    "type": "Constant"
  },
  {
    "desc": "A copy of the default windowfilter (see `hs.window.filter.default`) that only allows windows in the current",
    "module": "hs.window.filter",
    "name": "defaultCurrentSpace",
    "type": "Constant"
  },
  {
    "desc": "Pseudo-event for `hs.window.filter:subscribe()`: the windowfilter now rejects all windows",
    "module": "hs.window.filter",
    "name": "hasNoWindows",
    "type": "Constant"
  },
  {
    "desc": "Pseudo-event for `hs.window.filter:subscribe()`: the windowfilter now allows one window",
    "module": "hs.window.filter",
    "name": "hasWindow",
    "type": "Constant"
  },
  {
    "desc": "Sort order for `hs.window.filter:getWindows()`: windows are sorted in order of creation, oldest first (see also `hs.window.filter:setSortOrder()`)",
    "module": "hs.window.filter",
    "name": "sortByCreated",
    "type": "Constant"
  },
  {
    "desc": "Sort order for `hs.window.filter:getWindows()`: windows are sorted in order of creation, newest first (see also `hs.window.filter:setSortOrder()`)",
    "module": "hs.window.filter",
    "name": "sortByCreatedLast",
    "type": "Constant"
  },
  {
    "desc": "Sort order for `hs.window.filter:getWindows()`: windows are sorted in order of focus received, least recently first (see also `hs.window.filter:setSortOrder()`)",
    "module": "hs.window.filter",
    "name": "sortByFocused",
    "type": "Constant"
  },
  {
    "desc": "Sort order for `hs.window.filter:getWindows()`: windows are sorted in order of focus received, most recently first (see also `hs.window.filter:setSortOrder()`)",
    "module": "hs.window.filter",
    "name": "sortByFocusedLast",
    "type": "Constant"
  },
  {
    "desc": "Pseudo-event for `hs.window.filter:subscribe()`: a previously rejected window (or a newly created one) is now allowed",
    "module": "hs.window.filter",
    "name": "windowAllowed",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a new window was created",
    "module": "hs.window.filter",
    "name": "windowCreated",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was destroyed",
    "module": "hs.window.filter",
    "name": "windowDestroyed",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window received focus",
    "module": "hs.window.filter",
    "name": "windowFocused",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was expanded to fullscreen",
    "module": "hs.window.filter",
    "name": "windowFullscreened",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was hidden (its app was hidden, e.g. via `cmd-h`)",
    "module": "hs.window.filter",
    "name": "windowHidden",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window is now in the current Mission Control Space, due to",
    "module": "hs.window.filter",
    "name": "windowInCurrentSpace",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was minimized",
    "module": "hs.window.filter",
    "name": "windowMinimized",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was moved or resized, including toggling fullscreen/maximize",
    "module": "hs.window.filter",
    "name": "windowMoved",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window that used to be in the current Mission Control Space isn't anymore,",
    "module": "hs.window.filter",
    "name": "windowNotInCurrentSpace",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window is no longer *actually* visible on any screen because it was minimized, closed,",
    "module": "hs.window.filter",
    "name": "windowNotOnScreen",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window is no longer \"visible\" (in *any* Mission Control Space, as per `hs.window:isVisible()`)",
    "module": "hs.window.filter",
    "name": "windowNotVisible",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window became *actually* visible on screen (i.e. it's \"visible\" as per `hs.window:isVisible()`",
    "module": "hs.window.filter",
    "name": "windowOnScreen",
    "type": "Constant"
  },
  {
    "desc": "Pseudo-event for `hs.window.filter:subscribe()`: a previously allowed window (or a window that's been destroyed) is now rejected",
    "module": "hs.window.filter",
    "name": "windowRejected",
    "type": "Constant"
  },
  {
    "desc": "Pseudo-event for `hs.window.filter:subscribe()`: the list of allowed windows (as per `windowfilter:getWindows()`) has changed",
    "module": "hs.window.filter",
    "name": "windowsChanged",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window's title changed",
    "module": "hs.window.filter",
    "name": "windowTitleChanged",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window lost focus",
    "module": "hs.window.filter",
    "name": "windowUnfocused",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was reverted back from fullscreen",
    "module": "hs.window.filter",
    "name": "windowUnfullscreened",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was unhidden (its app was unhidden, e.g. via `cmd-h`)",
    "module": "hs.window.filter",
    "name": "windowUnhidden",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window was unminimized",
    "module": "hs.window.filter",
    "name": "windowUnminimized",
    "type": "Constant"
  },
  {
    "desc": "Event for `hs.window.filter:subscribe()`: a window became \"visible\" (in *any* Mission Control Space, as per `hs.window:isVisible()`)",
    "module": "hs.window.filter",
    "name": "windowVisible",
    "type": "Constant"
  },
  {
    "desc": "A table for window roles (as per `hs.window:subrole()`) that are allowed by default.",
    "module": "hs.window.filter",
    "name": "allowedWindowRoles",
    "type": "Variable"
  },
  {
    "desc": "Tells all windowfilters whether to refresh all windows when the user switches to a different Mission Control Space.",
    "module": "hs.window.filter",
    "name": "forceRefreshOnSpaceChange",
    "type": "Variable"
  },
  {
    "desc": "A table of application names (as per `hs.application:name()`) that are always ignored by this module.",
    "module": "hs.window.filter",
    "name": "ignoreAlways",
    "type": "Variable"
  },
  {
    "desc": "Convenience function to focus the nearest window to the east",
    "module": "hs.window.filter",
    "name": "focusEast",
    "type": "Function"
  },
  {
    "desc": "Convenience function to focus the nearest window to the north",
    "module": "hs.window.filter",
    "name": "focusNorth",
    "type": "Function"
  },
  {
    "desc": "Convenience function to focus the nearest window to the south",
    "module": "hs.window.filter",
    "name": "focusSouth",
    "type": "Function"
  },
  {
    "desc": "Convenience function to focus the nearest window to the west",
    "module": "hs.window.filter",
    "name": "focusWest",
    "type": "Function"
  },
  {
    "desc": "Checks whether an app is a known non-GUI app, as per `hs.window.filter.ignoreAlways`",
    "module": "hs.window.filter",
    "name": "isGuiApp",
    "type": "Function"
  },
  {
    "desc": "Callback to inform all windowfilters that the user initiated a switch to a (numbered) Mission Control Space.",
    "module": "hs.window.filter",
    "name": "switchedToSpace",
    "type": "Function"
  },
  {
    "desc": "Returns a copy of an hs.window.filter object that you can further restrict or expand",
    "module": "hs.window.filter",
    "name": "copy",
    "type": "Constructor"
  },
  {
    "desc": "Creates a new hs.window.filter instance",
    "module": "hs.window.filter",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Sets the windowfilter to allow all visible windows belonging to a specific app",
    "module": "hs.window.filter",
    "name": "allowApp",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest window to the east of a given window",
    "module": "hs.window.filter",
    "name": "focusWindowEast",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest window to the south of a given window",
    "module": "hs.window.filter",
    "name": "focusWindowNorth",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest window to the north of a given window",
    "module": "hs.window.filter",
    "name": "focusWindowSouth",
    "type": "Method"
  },
  {
    "desc": "Focuses the nearest window to the west of a given window",
    "module": "hs.window.filter",
    "name": "focusWindowWest",
    "type": "Method"
  },
  {
    "desc": "Return a table with all the filtering rules defined for this windowfilter",
    "module": "hs.window.filter",
    "name": "getFilters",
    "type": "Method"
  },
  {
    "desc": "Gets the current windows allowed by this windowfilter",
    "module": "hs.window.filter",
    "name": "getWindows",
    "type": "Method"
  },
  {
    "desc": "Checks if an app is allowed by the windowfilter",
    "module": "hs.window.filter",
    "name": "isAppAllowed",
    "type": "Method"
  },
  {
    "desc": "Checks if a window is allowed by the windowfilter",
    "module": "hs.window.filter",
    "name": "isWindowAllowed",
    "type": "Method"
  },
  {
    "desc": "Stops the windowfilter event subscriptions; no more event callbacks will be triggered, but the subscriptions remain intact for a subsequent call to `hs.window.filter:resume()`",
    "module": "hs.window.filter",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Sets the windowfilter to outright reject any windows belonging to a specific app",
    "module": "hs.window.filter",
    "name": "rejectApp",
    "type": "Method"
  },
  {
    "desc": "Resumes the windowfilter event subscriptions",
    "module": "hs.window.filter",
    "name": "resume",
    "type": "Method"
  },
  {
    "desc": "Sets the detailed filtering rules for the windows of a specific app",
    "module": "hs.window.filter",
    "name": "setAppFilter",
    "type": "Method"
  },
  {
    "desc": "Sets whether the windowfilter should only allow (or reject) windows in the current Mission Control Space",
    "module": "hs.window.filter",
    "name": "setCurrentSpace",
    "type": "Method"
  },
  {
    "desc": "Set the default filtering rules to be used for apps without app-specific rules",
    "module": "hs.window.filter",
    "name": "setDefaultFilter",
    "type": "Method"
  },
  {
    "desc": "Sets multiple filtering rules",
    "module": "hs.window.filter",
    "name": "setFilters",
    "type": "Method"
  },
  {
    "desc": "Set overriding filtering rules that will be applied for all apps before any app-specific rules",
    "module": "hs.window.filter",
    "name": "setOverrideFilter",
    "type": "Method"
  },
  {
    "desc": "Sets the allowed screen regions for this windowfilter",
    "module": "hs.window.filter",
    "name": "setRegions",
    "type": "Method"
  },
  {
    "desc": "Sets the allowed screens for this windowfilter",
    "module": "hs.window.filter",
    "name": "setScreens",
    "type": "Method"
  },
  {
    "desc": "Sets the sort order for this windowfilter's `:getWindows()` method",
    "module": "hs.window.filter",
    "name": "setSortOrder",
    "type": "Method"
  },
  {
    "desc": "Subscribe to one or more events on the allowed windows",
    "module": "hs.window.filter",
    "name": "subscribe",
    "type": "Method"
  },
  {
    "desc": "Removes one or more event subscriptions",
    "module": "hs.window.filter",
    "name": "unsubscribe",
    "type": "Method"
  },
  {
    "desc": "Removes all event subscriptions",
    "module": "hs.window.filter",
    "name": "unsubscribeAll",
    "type": "Method"
  },
  {
    "desc": "Gets all visible windows allowed by this windowfilter that lie to the east a given window",
    "module": "hs.window.filter",
    "name": "windowsToEast",
    "type": "Method"
  },
  {
    "desc": "Gets all visible windows allowed by this windowfilter that lie to the north a given window",
    "module": "hs.window.filter",
    "name": "windowsToNorth",
    "type": "Method"
  },
  {
    "desc": "Gets all visible windows allowed by this windowfilter that lie to the south a given window",
    "module": "hs.window.filter",
    "name": "windowsToSouth",
    "type": "Method"
  },
  {
    "desc": "Gets all visible windows allowed by this windowfilter that lie to the west a given window",
    "module": "hs.window.filter",
    "name": "windowsToWest",
    "type": "Method"
  },
  {
    "desc": "Highlight the focused window",
    "name": "hs.window.highlight",
    "type": "Module"
  },
  {
    "desc": "Allows customization of the highlight overlays and behaviour.",
    "module": "hs.window.highlight",
    "name": "ui",
    "type": "Variable"
  },
  {
    "desc": "Starts the module",
    "module": "hs.window.highlight",
    "name": "start",
    "type": "Function"
  },
  {
    "desc": "Stops the module and disables focused window highlighting (both \"overlay\" and \"isolate\" mode)",
    "module": "hs.window.highlight",
    "name": "stop",
    "type": "Function"
  },
  {
    "desc": "Sets or clears the user override for \"isolate\" mode.",
    "module": "hs.window.highlight",
    "name": "toggleIsolate",
    "type": "Function"
  },
  {
    "desc": "**WARNING**: EXPERIMENTAL MODULE. DO **NOT** USE IN PRODUCTION.",
    "name": "hs.window.layout",
    "type": "Module"
  },
  {
    "desc": "When \"active mode\" windowlayouts apply a rule, they will pause briefly for this amount of time in seconds, to allow windows",
    "module": "hs.window.layout",
    "name": "applyDelay",
    "type": "Variable"
  },
  {
    "desc": "The number of seconds to wait, after a screen configuration change has been detected, before",
    "module": "hs.window.layout",
    "name": "screensChangedDelay",
    "type": "Variable"
  },
  {
    "desc": "Applies a layout",
    "module": "hs.window.layout",
    "name": "applyLayout",
    "type": "Function"
  },
  {
    "desc": "Pauses all active windowlayout instances",
    "module": "hs.window.layout",
    "name": "pauseAllInstances",
    "type": "Function"
  },
  {
    "desc": "Resumes all active windowlayout instances",
    "module": "hs.window.layout",
    "name": "resumeAllInstances",
    "type": "Function"
  },
  {
    "desc": "Creates a new hs.window.layout instance",
    "module": "hs.window.layout",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Applies the layout",
    "module": "hs.window.layout",
    "name": "apply",
    "type": "Method"
  },
  {
    "desc": "Return a table with all the rules (and the screen configuration, if present) defined for this windowlayout",
    "module": "hs.window.layout",
    "name": "getRules",
    "type": "Method"
  },
  {
    "desc": "Pauses an active windowlayout instance; while paused no automatic window management will occur",
    "module": "hs.window.layout",
    "name": "pause",
    "type": "Method"
  },
  {
    "desc": "Resumes an active windowlayout instance after it was paused",
    "module": "hs.window.layout",
    "name": "resume",
    "type": "Method"
  },
  {
    "desc": "Determines the screen configuration that permits applying this windowlayout",
    "module": "hs.window.layout",
    "name": "setScreenConfiguration",
    "type": "Method"
  },
  {
    "desc": "Puts a windowlayout instance in \"active mode\"",
    "module": "hs.window.layout",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops a windowlayout instance (i.e. not in \"active mode\" anymore)",
    "module": "hs.window.layout",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Window-based cmd-tab replacement",
    "name": "hs.window.switcher",
    "type": "Module"
  },
  {
    "desc": "Allows customization of the switcher behaviour and user interface",
    "module": "hs.window.switcher",
    "name": "ui",
    "type": "Variable"
  },
  {
    "desc": "Shows the switcher (if not yet visible) and selects the next window",
    "module": "hs.window.switcher",
    "name": "nextWindow",
    "type": "Function"
  },
  {
    "desc": "Shows the switcher (if not yet visible) and selects the previous window",
    "module": "hs.window.switcher",
    "name": "previousWindow",
    "type": "Function"
  },
  {
    "desc": "Creates a new switcher instance; it can use a windowfilter to determine which windows to show",
    "module": "hs.window.switcher",
    "name": "new",
    "type": "Constructor"
  },
  {
    "desc": "Shows the switcher instance (if not yet visible) and selects the next window",
    "module": "hs.window.switcher",
    "name": "next",
    "type": "Method"
  },
  {
    "desc": "Shows the switcher instance (if not yet visible) and selects the previous window",
    "module": "hs.window.switcher",
    "name": "previous",
    "type": "Method"
  },
  {
    "desc": "**WARNING**: EXPERIMENTAL MODULE. DO **NOT** USE IN PRODUCTION.",
    "name": "hs.window.tiling",
    "type": "Module"
  },
  {
    "desc": "Tile (or fit) windows into a rect",
    "module": "hs.window.tiling",
    "name": "tileWindows",
    "type": "Function"
  }
]